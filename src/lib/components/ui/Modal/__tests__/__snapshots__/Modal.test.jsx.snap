// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rendering renders correctly with all props except translations 1`] = `
<WithTranslationContextComponent
  actions={
    Array [
      Object {
        "clickHandler": [Function],
        "label": "Action",
      },
    ]
  }
  closeHandler={[Function]}
  disableBodyScrolling={true}
  id="custom-id"
  scrollViewEndShadow={
    Object {
      "background": "none",
    }
  }
  scrollViewStartShadow={
    Object {
      "background": "none",
    }
  }
  size="large"
  title="Modal title"
  translations={null}
>
  <Modal
    actions={
      Array [
        Object {
          "clickHandler": [Function],
          "label": "Action",
        },
      ]
    }
    autoFocus={true}
    closeHandler={[Function]}
    disableBodyScrolling={true}
    id="custom-id"
    portalId={null}
    position="center"
    scrollMode="body"
    scrollViewEndShadow={
      Object {
        "background": "none",
      }
    }
    scrollViewEndShadowStyle={
      Object {
        "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
      }
    }
    scrollViewShadowSize="16px"
    scrollViewStartShadow={
      Object {
        "background": "none",
      }
    }
    scrollViewStartShadowStyle={
      Object {
        "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
      }
    }
    size="large"
    title="Modal title"
    translations={
      Object {
        "close": "Close",
      }
    }
  >
    <div
      className="overlay"
      id="custom-id"
      onClick={[Function]}
      role="presentation"
    >
      <div
        className="root isRootSizeLarge isRootPositionCenter"
        onClick={[Function]}
        role="presentation"
      >
        <div
          className="head"
        >
          <h3
            className="headTitle"
            id="custom-id__title"
          >
            Modal title
          </h3>
          <button
            className="close"
            id="custom-id__closeModalHeaderButton"
            onClick={[Function]}
            title="Close"
            type="button"
          >
            Ã—
          </button>
        </div>
        <div
          className="body isBodyScrollable"
        >
          <WithTranslationContextComponent
            customEndShadowStyle={
              Object {
                "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
              }
            }
            customStartShadowStyle={
              Object {
                "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
              }
            }
            shadowSize="16px"
            translations={null}
          >
            <ScrollView
              arrows={false}
              arrowsScrollStep={200}
              autoScroll="off"
              customEndShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              customNextArrow={null}
              customPrevArrow={null}
              customStartShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              debounce={50}
              direction="vertical"
              scrollbar={true}
              shadowColor={
                Object {
                  "alpha": 1,
                  "blue": 255,
                  "green": 255,
                  "red": 255,
                }
              }
              shadowSize="16px"
              translations={
                Object {
                  "next": "Next",
                  "previous": "Previous",
                }
              }
            >
              <div
                className="root    isRootVertical"
                style={
                  Object {
                    "--rui-local-arrow-color": "inherit",
                    "--rui-local-end-shadow-background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                    "--rui-local-end-shadow-box-shadow": "none",
                    "--rui-local-shadow-height": "16px",
                    "--rui-local-shadow-width": "auto",
                    "--rui-local-start-shadow-background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                    "--rui-local-start-shadow-box-shadow": "none",
                  }
                }
              >
                <div
                  className="viewport"
                >
                  <div
                    className="content"
                  >
                    <div
                      className="content"
                      id="custom-id__content"
                    >
                      Modal content
                    </div>
                  </div>
                </div>
                <div
                  aria-hidden={true}
                  className="scrollingShadows"
                />
              </div>
            </ScrollView>
          </WithTranslationContextComponent>
        </div>
        <div
          className="footer"
        >
          <Toolbar
            align="top"
            dense={true}
            justify="center"
            nowrap={false}
          >
            <div
              className="toolbar isDense  isAlignedToTop isJustifiedToCenter"
            >
              <ToolbarItem
                key="Action"
              >
                <div
                  className="item"
                >
                  <ForwardRef(withForwardedRef(Button))
                    clickHandler={[Function]}
                    label="Action"
                    type="button"
                  >
                    <Button
                      afterLabel={null}
                      beforeLabel={null}
                      block={false}
                      clickHandler={[Function]}
                      disabled={false}
                      endCorner={null}
                      forwardedRef={
                        Object {
                          "current": <button
                            class="root
        priorityFilled
        sizeMedium
        variantPrimary"
                            type="button"
                          >
                            <span
                              class="label"
                            >
                              Action
                            </span>
                          </button>,
                        }
                      }
                      grouped={false}
                      label="Action"
                      labelVisibility="all"
                      loadingIcon={null}
                      priority="filled"
                      size="medium"
                      startCorner={null}
                      type="button"
                      variant="primary"
                    >
                      <button
                        className="root
        priorityFilled
        sizeMedium
        variantPrimary"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="label"
                        >
                          Action
                        </span>
                      </button>
                    </Button>
                  </ForwardRef(withForwardedRef(Button))>
                </div>
              </ToolbarItem>
              <ToolbarItem>
                <div
                  className="item"
                >
                  <ForwardRef(withForwardedRef(Button))
                    clickHandler={[Function]}
                    id="custom-id__closeModalFooterButton"
                    label="Close"
                    priority="flat"
                  >
                    <Button
                      afterLabel={null}
                      beforeLabel={null}
                      block={false}
                      clickHandler={[Function]}
                      disabled={false}
                      endCorner={null}
                      forwardedRef={null}
                      grouped={false}
                      id="custom-id__closeModalFooterButton"
                      label="Close"
                      labelVisibility="all"
                      loadingIcon={null}
                      priority="flat"
                      size="medium"
                      startCorner={null}
                      type="button"
                      variant="primary"
                    >
                      <button
                        className="root
        priorityFlat
        sizeMedium
        variantPrimary"
                        disabled={false}
                        id="custom-id__closeModalFooterButton"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="label"
                          id="custom-id__closeModalFooterButton__labelText"
                        >
                          Close
                        </span>
                      </button>
                    </Button>
                  </ForwardRef(withForwardedRef(Button))>
                </div>
              </ToolbarItem>
            </div>
          </Toolbar>
        </div>
      </div>
    </div>
  </Modal>
</WithTranslationContextComponent>
`;

exports[`rendering renders correctly with all props except translations and with a loading icon 1`] = `
<WithTranslationContextComponent
  actions={
    Array [
      Object {
        "clickHandler": [Function],
        "label": "Action",
        "loadingIcon": <span
          className="icon"
        />,
      },
    ]
  }
  closeHandler={[Function]}
  disableBodyScrolling={true}
  id="custom-id"
  scrollViewEndShadow={
    Object {
      "background": "none",
    }
  }
  scrollViewShadowSize="30px"
  scrollViewStartShadow={
    Object {
      "background": "none",
    }
  }
  size="small"
  title="Modal title"
  translations={null}
>
  <Modal
    actions={
      Array [
        Object {
          "clickHandler": [Function],
          "label": "Action",
          "loadingIcon": <span
            className="icon"
          />,
        },
      ]
    }
    autoFocus={true}
    closeHandler={[Function]}
    disableBodyScrolling={true}
    id="custom-id"
    portalId={null}
    position="center"
    scrollMode="body"
    scrollViewEndShadow={
      Object {
        "background": "none",
      }
    }
    scrollViewEndShadowStyle={
      Object {
        "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
      }
    }
    scrollViewShadowSize="30px"
    scrollViewStartShadow={
      Object {
        "background": "none",
      }
    }
    scrollViewStartShadowStyle={
      Object {
        "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
      }
    }
    size="small"
    title="Modal title"
    translations={
      Object {
        "close": "Close",
      }
    }
  >
    <div
      className="overlay"
      id="custom-id"
      onClick={[Function]}
      role="presentation"
    >
      <div
        className="root isRootSizeSmall isRootPositionCenter"
        onClick={[Function]}
        role="presentation"
      >
        <div
          className="head"
        >
          <h3
            className="headTitle"
            id="custom-id__title"
          >
            Modal title
          </h3>
          <button
            className="close"
            id="custom-id__closeModalHeaderButton"
            onClick={[Function]}
            title="Close"
            type="button"
          >
            Ã—
          </button>
        </div>
        <div
          className="body isBodyScrollable"
        >
          <WithTranslationContextComponent
            customEndShadowStyle={
              Object {
                "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
              }
            }
            customStartShadowStyle={
              Object {
                "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
              }
            }
            shadowSize="30px"
            translations={null}
          >
            <ScrollView
              arrows={false}
              arrowsScrollStep={200}
              autoScroll="off"
              customEndShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              customNextArrow={null}
              customPrevArrow={null}
              customStartShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              debounce={50}
              direction="vertical"
              scrollbar={true}
              shadowColor={
                Object {
                  "alpha": 1,
                  "blue": 255,
                  "green": 255,
                  "red": 255,
                }
              }
              shadowSize="30px"
              translations={
                Object {
                  "next": "Next",
                  "previous": "Previous",
                }
              }
            >
              <div
                className="root    isRootVertical"
                style={
                  Object {
                    "--rui-local-arrow-color": "inherit",
                    "--rui-local-end-shadow-background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                    "--rui-local-end-shadow-box-shadow": "none",
                    "--rui-local-shadow-height": "30px",
                    "--rui-local-shadow-width": "auto",
                    "--rui-local-start-shadow-background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                    "--rui-local-start-shadow-box-shadow": "none",
                  }
                }
              >
                <div
                  className="viewport"
                >
                  <div
                    className="content"
                  >
                    <div
                      className="content"
                      id="custom-id__content"
                    >
                      Modal content
                    </div>
                  </div>
                </div>
                <div
                  aria-hidden={true}
                  className="scrollingShadows"
                />
              </div>
            </ScrollView>
          </WithTranslationContextComponent>
        </div>
        <div
          className="footer"
        >
          <Toolbar
            align="top"
            dense={true}
            justify="center"
            nowrap={false}
          >
            <div
              className="toolbar isDense  isAlignedToTop isJustifiedToCenter"
            >
              <ToolbarItem
                key="Action"
              >
                <div
                  className="item"
                >
                  <ForwardRef(withForwardedRef(Button))
                    clickHandler={[Function]}
                    label="Action"
                    loadingIcon={
                      <span
                        className="icon"
                      />
                    }
                    type="button"
                  >
                    <Button
                      afterLabel={null}
                      beforeLabel={null}
                      block={false}
                      clickHandler={[Function]}
                      disabled={false}
                      endCorner={null}
                      forwardedRef={
                        Object {
                          "current": <button
                            class="root
        priorityFilled
        sizeMedium
        variantPrimary
        
        
        
        isRootLoading"
                            disabled=""
                            type="button"
                          >
                            <span
                              class="label"
                            >
                              Action
                            </span>
                            <span
                              class="loadingIcon"
                            >
                              <span
                                class="icon"
                              />
                            </span>
                          </button>,
                        }
                      }
                      grouped={false}
                      label="Action"
                      labelVisibility="all"
                      loadingIcon={
                        <span
                          className="icon"
                        />
                      }
                      priority="filled"
                      size="medium"
                      startCorner={null}
                      type="button"
                      variant="primary"
                    >
                      <button
                        className="root
        priorityFilled
        sizeMedium
        variantPrimary
        
        
        
        isRootLoading"
                        disabled={true}
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="label"
                        >
                          Action
                        </span>
                        <span
                          className="loadingIcon"
                        >
                          <span
                            className="icon"
                          />
                        </span>
                      </button>
                    </Button>
                  </ForwardRef(withForwardedRef(Button))>
                </div>
              </ToolbarItem>
              <ToolbarItem>
                <div
                  className="item"
                >
                  <ForwardRef(withForwardedRef(Button))
                    clickHandler={[Function]}
                    id="custom-id__closeModalFooterButton"
                    label="Close"
                    priority="flat"
                  >
                    <Button
                      afterLabel={null}
                      beforeLabel={null}
                      block={false}
                      clickHandler={[Function]}
                      disabled={false}
                      endCorner={null}
                      forwardedRef={null}
                      grouped={false}
                      id="custom-id__closeModalFooterButton"
                      label="Close"
                      labelVisibility="all"
                      loadingIcon={null}
                      priority="flat"
                      size="medium"
                      startCorner={null}
                      type="button"
                      variant="primary"
                    >
                      <button
                        className="root
        priorityFlat
        sizeMedium
        variantPrimary"
                        disabled={false}
                        id="custom-id__closeModalFooterButton"
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="label"
                          id="custom-id__closeModalFooterButton__labelText"
                        >
                          Close
                        </span>
                      </button>
                    </Button>
                  </ForwardRef(withForwardedRef(Button))>
                </div>
              </ToolbarItem>
            </div>
          </Toolbar>
        </div>
      </div>
    </div>
  </Modal>
</WithTranslationContextComponent>
`;

exports[`rendering renders correctly with mandatory props only 1`] = `
<WithTranslationContextComponent
  title="Modal title"
  translations={null}
>
  <Modal
    actions={Array []}
    autoFocus={true}
    closeHandler={null}
    portalId={null}
    position="center"
    scrollMode="body"
    scrollViewEndShadowStyle={
      Object {
        "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
      }
    }
    scrollViewShadowSize="16px"
    scrollViewStartShadowStyle={
      Object {
        "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
      }
    }
    size="medium"
    title="Modal title"
    translations={
      Object {
        "close": "Close",
      }
    }
  >
    <div
      className="overlay"
      onClick={[Function]}
      role="presentation"
    >
      <div
        className="root isRootSizeMedium isRootPositionCenter"
        onClick={[Function]}
        role="presentation"
      >
        <div
          className="head"
        >
          <h3
            className="headTitle"
          >
            Modal title
          </h3>
        </div>
        <div
          className="body isBodyScrollable"
        >
          <WithTranslationContextComponent
            customEndShadowStyle={
              Object {
                "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
              }
            }
            customStartShadowStyle={
              Object {
                "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
              }
            }
            shadowSize="16px"
            translations={null}
          >
            <ScrollView
              arrows={false}
              arrowsScrollStep={200}
              autoScroll="off"
              customEndShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              customNextArrow={null}
              customPrevArrow={null}
              customStartShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              debounce={50}
              direction="vertical"
              scrollbar={true}
              shadowColor={
                Object {
                  "alpha": 1,
                  "blue": 255,
                  "green": 255,
                  "red": 255,
                }
              }
              shadowSize="16px"
              translations={
                Object {
                  "next": "Next",
                  "previous": "Previous",
                }
              }
            >
              <div
                className="root    isRootVertical"
                style={
                  Object {
                    "--rui-local-arrow-color": "inherit",
                    "--rui-local-end-shadow-background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                    "--rui-local-end-shadow-box-shadow": "none",
                    "--rui-local-shadow-height": "16px",
                    "--rui-local-shadow-width": "auto",
                    "--rui-local-start-shadow-background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                    "--rui-local-start-shadow-box-shadow": "none",
                  }
                }
              >
                <div
                  className="viewport"
                >
                  <div
                    className="content"
                  >
                    <div
                      className="content"
                    >
                      Modal content
                    </div>
                  </div>
                </div>
                <div
                  aria-hidden={true}
                  className="scrollingShadows"
                />
              </div>
            </ScrollView>
          </WithTranslationContextComponent>
        </div>
      </div>
    </div>
  </Modal>
</WithTranslationContextComponent>
`;

exports[`rendering renders correctly with portal id 1`] = `
<WithTranslationContextComponent
  portalId="app-modal-portal"
  title="Modal title"
  translations={null}
>
  <Modal
    actions={Array []}
    autoFocus={true}
    closeHandler={null}
    portalId="app-modal-portal"
    position="center"
    scrollMode="body"
    scrollViewEndShadowStyle={
      Object {
        "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
      }
    }
    scrollViewShadowSize="16px"
    scrollViewStartShadowStyle={
      Object {
        "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
      }
    }
    size="medium"
    title="Modal title"
    translations={
      Object {
        "close": "Close",
      }
    }
  >
    <Portal
      containerInfo={
        <div
          id="app-modal-portal"
        >
          <div
            class="overlay"
            role="presentation"
          >
            <div
              class="root isRootSizeMedium isRootPositionCenter"
              role="presentation"
            >
              <div
                class="head"
              >
                <h3
                  class="headTitle"
                >
                  Modal title
                </h3>
              </div>
              <div
                class="body isBodyScrollable"
              >
                <div
                  class="root    isRootVertical"
                  style="--rui-local-arrow-color: inherit; --rui-local-shadow-width: auto; --rui-local-shadow-height: 16px; --rui-local-start-shadow-background: radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%); --rui-local-start-shadow-box-shadow: none; --rui-local-end-shadow-background: radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%); --rui-local-end-shadow-box-shadow: none;"
                >
                  <div
                    class="viewport"
                  >
                    <div
                      class="content"
                    >
                      <div
                        class="content"
                      >
                        Modal content
                      </div>
                    </div>
                  </div>
                  <div
                    aria-hidden="true"
                    class="scrollingShadows"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      }
    >
      <div
        className="overlay"
        onClick={[Function]}
        role="presentation"
      >
        <div
          className="root isRootSizeMedium isRootPositionCenter"
          onClick={[Function]}
          role="presentation"
        >
          <div
            className="head"
          >
            <h3
              className="headTitle"
            >
              Modal title
            </h3>
          </div>
          <div
            className="body isBodyScrollable"
          >
            <WithTranslationContextComponent
              customEndShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              customStartShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              shadowSize="16px"
              translations={null}
            >
              <ScrollView
                arrows={false}
                arrowsScrollStep={200}
                autoScroll="off"
                customEndShadowStyle={
                  Object {
                    "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                  }
                }
                customNextArrow={null}
                customPrevArrow={null}
                customStartShadowStyle={
                  Object {
                    "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                  }
                }
                debounce={50}
                direction="vertical"
                scrollbar={true}
                shadowColor={
                  Object {
                    "alpha": 1,
                    "blue": 255,
                    "green": 255,
                    "red": 255,
                  }
                }
                shadowSize="16px"
                translations={
                  Object {
                    "next": "Next",
                    "previous": "Previous",
                  }
                }
              >
                <div
                  className="root    isRootVertical"
                  style={
                    Object {
                      "--rui-local-arrow-color": "inherit",
                      "--rui-local-end-shadow-background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                      "--rui-local-end-shadow-box-shadow": "none",
                      "--rui-local-shadow-height": "16px",
                      "--rui-local-shadow-width": "auto",
                      "--rui-local-start-shadow-background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                      "--rui-local-start-shadow-box-shadow": "none",
                    }
                  }
                >
                  <div
                    className="viewport"
                  >
                    <div
                      className="content"
                    >
                      <div
                        className="content"
                      >
                        Modal content
                      </div>
                    </div>
                  </div>
                  <div
                    aria-hidden={true}
                    className="scrollingShadows"
                  />
                </div>
              </ScrollView>
            </WithTranslationContextComponent>
          </div>
        </div>
      </div>
    </Portal>
  </Modal>
</WithTranslationContextComponent>
`;

exports[`rendering renders correctly with translations 1`] = `
<WithTranslationContextComponent
  closeHandler={[Function]}
  title="Modal title"
  translations={
    Object {
      "close": "ZavÅ™Ã­t",
    }
  }
>
  <Modal
    actions={Array []}
    autoFocus={true}
    closeHandler={[Function]}
    portalId={null}
    position="center"
    scrollMode="body"
    scrollViewEndShadowStyle={
      Object {
        "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
      }
    }
    scrollViewShadowSize="16px"
    scrollViewStartShadowStyle={
      Object {
        "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
      }
    }
    size="medium"
    title="Modal title"
    translations={
      Object {
        "close": "ZavÅ™Ã­t",
      }
    }
  >
    <div
      className="overlay"
      onClick={[Function]}
      role="presentation"
    >
      <div
        className="root isRootSizeMedium isRootPositionCenter"
        onClick={[Function]}
        role="presentation"
      >
        <div
          className="head"
        >
          <h3
            className="headTitle"
          >
            Modal title
          </h3>
          <button
            className="close"
            onClick={[Function]}
            title="ZavÅ™Ã­t"
            type="button"
          >
            Ã—
          </button>
        </div>
        <div
          className="body isBodyScrollable"
        >
          <WithTranslationContextComponent
            customEndShadowStyle={
              Object {
                "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
              }
            }
            customStartShadowStyle={
              Object {
                "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
              }
            }
            shadowSize="16px"
            translations={null}
          >
            <ScrollView
              arrows={false}
              arrowsScrollStep={200}
              autoScroll="off"
              customEndShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              customNextArrow={null}
              customPrevArrow={null}
              customStartShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              debounce={50}
              direction="vertical"
              scrollbar={true}
              shadowColor={
                Object {
                  "alpha": 1,
                  "blue": 255,
                  "green": 255,
                  "red": 255,
                }
              }
              shadowSize="16px"
              translations={
                Object {
                  "next": "Next",
                  "previous": "Previous",
                }
              }
            >
              <div
                className="root    isRootVertical"
                style={
                  Object {
                    "--rui-local-arrow-color": "inherit",
                    "--rui-local-end-shadow-background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                    "--rui-local-end-shadow-box-shadow": "none",
                    "--rui-local-shadow-height": "16px",
                    "--rui-local-shadow-width": "auto",
                    "--rui-local-start-shadow-background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                    "--rui-local-start-shadow-box-shadow": "none",
                  }
                }
              >
                <div
                  className="viewport"
                >
                  <div
                    className="content"
                  >
                    <div
                      className="content"
                    >
                      Modal content
                    </div>
                  </div>
                </div>
                <div
                  aria-hidden={true}
                  className="scrollingShadows"
                />
              </div>
            </ScrollView>
          </WithTranslationContextComponent>
        </div>
        <div
          className="footer"
        >
          <Toolbar
            align="top"
            dense={true}
            justify="center"
            nowrap={false}
          >
            <div
              className="toolbar isDense  isAlignedToTop isJustifiedToCenter"
            >
              <ToolbarItem>
                <div
                  className="item"
                >
                  <ForwardRef(withForwardedRef(Button))
                    clickHandler={[Function]}
                    label="ZavÅ™Ã­t"
                    priority="flat"
                  >
                    <Button
                      afterLabel={null}
                      beforeLabel={null}
                      block={false}
                      clickHandler={[Function]}
                      disabled={false}
                      endCorner={null}
                      forwardedRef={null}
                      grouped={false}
                      label="ZavÅ™Ã­t"
                      labelVisibility="all"
                      loadingIcon={null}
                      priority="flat"
                      size="medium"
                      startCorner={null}
                      type="button"
                      variant="primary"
                    >
                      <button
                        className="root
        priorityFlat
        sizeMedium
        variantPrimary"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                      >
                        <span
                          className="label"
                        >
                          ZavÅ™Ã­t
                        </span>
                      </button>
                    </Button>
                  </ForwardRef(withForwardedRef(Button))>
                </div>
              </ToolbarItem>
            </div>
          </Toolbar>
        </div>
      </div>
    </div>
  </Modal>
</WithTranslationContextComponent>
`;
