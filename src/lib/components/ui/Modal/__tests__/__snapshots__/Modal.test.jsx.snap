// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rendering renders correctly with all props except loading icon 1`] = `
<WithProviderContextComponent
  actions={
    Array [
      Object {
        "clickHandler": [Function],
        "label": "Action",
        "loadingIcon": <span
          className="icon"
        />,
      },
    ]
  }
  closeHandler={[Function]}
  id="custom-id"
  size="small"
  title="Modal title"
  translations={
    Object {
      "close": "Close",
    }
  }
>
  <Modal
    actions={
      Array [
        Object {
          "clickHandler": [Function],
          "label": "Action",
          "loadingIcon": <span
            className="icon"
          />,
        },
      ]
    }
    autoFocus={true}
    closeHandler={[Function]}
    id="custom-id"
    portalId={null}
    position="center"
    scrollView={
      <WithProviderContextComponent
        customEndShadowStyle={
          Object {
            "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
          }
        }
        customStartShadowStyle={
          Object {
            "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
          }
        }
        shadowSize="16px"
      />
    }
    size="small"
    title="Modal title"
    translations={
      Object {
        "close": "Close",
      }
    }
  >
    <div
      className="backdrop"
      id="custom-id"
      onClick={[Function]}
      role="presentation"
    >
      <div
        className="root isRootSizeSmall isRootPositionCenter"
        onClick={[Function]}
        role="presentation"
      >
        <div
          className="head"
        >
          <h3
            className="headTitle"
            id="custom-id__title"
          >
            Modal title
          </h3>
          <button
            className="close"
            id="custom-id__closeModalHeaderButton"
            onClick={[Function]}
            title="Close"
            type="button"
          >
            Ã—
          </button>
        </div>
        <div
          className="body isBodyScrollable"
        >
          <WithProviderContextComponent
            customEndShadowStyle={
              Object {
                "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
              }
            }
            customStartShadowStyle={
              Object {
                "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
              }
            }
            shadowSize="16px"
          >
            <ScrollView
              arrows={false}
              arrowsScrollStep={200}
              autoScroll="off"
              customEndShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              customNextArrow={null}
              customPrevArrow={null}
              customStartShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              debounce={50}
              direction="vertical"
              scrollbar={true}
              shadowColor={
                Object {
                  "alpha": 1,
                  "blue": 255,
                  "green": 255,
                  "red": 255,
                }
              }
              shadowSize="16px"
              translations={
                Object {
                  "next": "Next",
                  "previous": "Previous",
                }
              }
            >
              <div
                className="root    isRootVertical"
                style={
                  Object {
                    "--rui-local-arrow-color": "inherit",
                    "--rui-local-end-shadow-background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                    "--rui-local-end-shadow-box-shadow": "none",
                    "--rui-local-shadow-height": "16px",
                    "--rui-local-shadow-width": "auto",
                    "--rui-local-start-shadow-background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                    "--rui-local-start-shadow-box-shadow": "none",
                  }
                }
              >
                <div
                  className="viewport"
                >
                  <div
                    className="content"
                  >
                    <div
                      className="content"
                      id="custom-id__content"
                    >
                      Modal content
                    </div>
                  </div>
                </div>
                <div
                  aria-hidden={true}
                  className="scrollingShadows"
                />
              </div>
            </ScrollView>
          </WithProviderContextComponent>
        </div>
        <div
          className="footer"
        >
          <WithProviderContextComponent
            dense={true}
            justify="center"
          >
            <Toolbar
              align="top"
              dense={true}
              justify="center"
              nowrap={false}
            >
              <div
                className="toolbar isDense  isAlignedToTop isJustifiedToCenter"
              >
                <WithProviderContextComponent
                  key="Action"
                >
                  <ToolbarItem>
                    <div
                      className="item"
                    >
                      <ForwardRef(withForwardedRef(WithProviderContextComponent))
                        clickHandler={[Function]}
                        forwardedRef={
                          Object {
                            "current": null,
                          }
                        }
                        label="Action"
                        loadingIcon={
                          <span
                            className="icon"
                          />
                        }
                        type="button"
                      >
                        <WithProviderContextComponent
                          clickHandler={[Function]}
                          forwardedRef={null}
                          label="Action"
                          loadingIcon={
                            <span
                              className="icon"
                            />
                          }
                          type="button"
                        >
                          <Button
                            afterLabel={null}
                            beforeLabel={null}
                            block={false}
                            clickHandler={[Function]}
                            disabled={false}
                            endCorner={null}
                            forwardedRef={null}
                            grouped={false}
                            label="Action"
                            labelVisibility="all"
                            loadingIcon={
                              <span
                                className="icon"
                              />
                            }
                            priority="filled"
                            size="medium"
                            startCorner={null}
                            type="button"
                            variant="primary"
                          >
                            <button
                              className="root
        priorityFilled
        sizeMedium
        variantPrimary
        
        
        
        isRootLoading"
                              disabled={true}
                              onClick={[Function]}
                              type="button"
                            >
                              <span
                                className="label"
                              >
                                Action
                              </span>
                              <span
                                className="loadingIcon"
                              >
                                <span
                                  className="icon"
                                />
                              </span>
                            </button>
                          </Button>
                        </WithProviderContextComponent>
                      </ForwardRef(withForwardedRef(WithProviderContextComponent))>
                    </div>
                  </ToolbarItem>
                </WithProviderContextComponent>
                <WithProviderContextComponent>
                  <ToolbarItem>
                    <div
                      className="item"
                    >
                      <ForwardRef(withForwardedRef(WithProviderContextComponent))
                        clickHandler={[Function]}
                        id="custom-id__closeModalFooterButton"
                        label="Close"
                        priority="flat"
                      >
                        <WithProviderContextComponent
                          clickHandler={[Function]}
                          forwardedRef={null}
                          id="custom-id__closeModalFooterButton"
                          label="Close"
                          priority="flat"
                        >
                          <Button
                            afterLabel={null}
                            beforeLabel={null}
                            block={false}
                            clickHandler={[Function]}
                            disabled={false}
                            endCorner={null}
                            forwardedRef={null}
                            grouped={false}
                            id="custom-id__closeModalFooterButton"
                            label="Close"
                            labelVisibility="all"
                            loadingIcon={null}
                            priority="flat"
                            size="medium"
                            startCorner={null}
                            type="button"
                            variant="primary"
                          >
                            <button
                              className="root
        priorityFlat
        sizeMedium
        variantPrimary"
                              disabled={false}
                              id="custom-id__closeModalFooterButton"
                              onClick={[Function]}
                              type="button"
                            >
                              <span
                                className="label"
                                id="custom-id__closeModalFooterButton__labelText"
                              >
                                Close
                              </span>
                            </button>
                          </Button>
                        </WithProviderContextComponent>
                      </ForwardRef(withForwardedRef(WithProviderContextComponent))>
                    </div>
                  </ToolbarItem>
                </WithProviderContextComponent>
              </div>
            </Toolbar>
          </WithProviderContextComponent>
        </div>
      </div>
    </div>
  </Modal>
</WithProviderContextComponent>
`;

exports[`rendering renders correctly with mandatory props only 1`] = `
<WithProviderContextComponent
  title="Modal title"
  translations={
    Object {
      "close": "Close",
    }
  }
>
  <Modal
    actions={Array []}
    autoFocus={true}
    closeHandler={null}
    portalId={null}
    position="center"
    scrollView={
      <WithProviderContextComponent
        customEndShadowStyle={
          Object {
            "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
          }
        }
        customStartShadowStyle={
          Object {
            "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
          }
        }
        shadowSize="16px"
      />
    }
    size="medium"
    title="Modal title"
    translations={
      Object {
        "close": "Close",
      }
    }
  >
    <div
      className="backdrop"
      onClick={[Function]}
      role="presentation"
    >
      <div
        className="root isRootSizeMedium isRootPositionCenter"
        onClick={[Function]}
        role="presentation"
      >
        <div
          className="head"
        >
          <h3
            className="headTitle"
          >
            Modal title
          </h3>
        </div>
        <div
          className="body isBodyScrollable"
        >
          <WithProviderContextComponent
            customEndShadowStyle={
              Object {
                "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
              }
            }
            customStartShadowStyle={
              Object {
                "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
              }
            }
            shadowSize="16px"
          >
            <ScrollView
              arrows={false}
              arrowsScrollStep={200}
              autoScroll="off"
              customEndShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              customNextArrow={null}
              customPrevArrow={null}
              customStartShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              debounce={50}
              direction="vertical"
              scrollbar={true}
              shadowColor={
                Object {
                  "alpha": 1,
                  "blue": 255,
                  "green": 255,
                  "red": 255,
                }
              }
              shadowSize="16px"
              translations={
                Object {
                  "next": "Next",
                  "previous": "Previous",
                }
              }
            >
              <div
                className="root    isRootVertical"
                style={
                  Object {
                    "--rui-local-arrow-color": "inherit",
                    "--rui-local-end-shadow-background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                    "--rui-local-end-shadow-box-shadow": "none",
                    "--rui-local-shadow-height": "16px",
                    "--rui-local-shadow-width": "auto",
                    "--rui-local-start-shadow-background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                    "--rui-local-start-shadow-box-shadow": "none",
                  }
                }
              >
                <div
                  className="viewport"
                >
                  <div
                    className="content"
                  >
                    <div
                      className="content"
                    >
                      Modal content
                    </div>
                  </div>
                </div>
                <div
                  aria-hidden={true}
                  className="scrollingShadows"
                />
              </div>
            </ScrollView>
          </WithProviderContextComponent>
        </div>
      </div>
    </div>
  </Modal>
</WithProviderContextComponent>
`;

exports[`rendering renders correctly with portal id 1`] = `
<WithProviderContextComponent
  portalId="app-modal-portal"
  title="Modal title"
  translations={
    Object {
      "close": "Close",
    }
  }
>
  <Modal
    actions={Array []}
    autoFocus={true}
    closeHandler={null}
    portalId="app-modal-portal"
    position="center"
    scrollView={
      <WithProviderContextComponent
        customEndShadowStyle={
          Object {
            "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
          }
        }
        customStartShadowStyle={
          Object {
            "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
          }
        }
        shadowSize="16px"
      />
    }
    size="medium"
    title="Modal title"
    translations={
      Object {
        "close": "Close",
      }
    }
  >
    <Portal
      containerInfo={
        <div
          id="app-modal-portal"
        >
          <div
            class="backdrop"
            role="presentation"
          >
            <div
              class="root isRootSizeMedium isRootPositionCenter"
              role="presentation"
            >
              <div
                class="head"
              >
                <h3
                  class="headTitle"
                >
                  Modal title
                </h3>
              </div>
              <div
                class="body isBodyScrollable"
              >
                <div
                  class="root    isRootVertical"
                  style="--rui-local-arrow-color: inherit; --rui-local-shadow-width: auto; --rui-local-shadow-height: 16px; --rui-local-start-shadow-background: radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%); --rui-local-start-shadow-box-shadow: none; --rui-local-end-shadow-background: radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%); --rui-local-end-shadow-box-shadow: none;"
                >
                  <div
                    class="viewport"
                  >
                    <div
                      class="content"
                    >
                      <div
                        class="content"
                      >
                        Modal content
                      </div>
                    </div>
                  </div>
                  <div
                    aria-hidden="true"
                    class="scrollingShadows"
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      }
    >
      <div
        className="backdrop"
        onClick={[Function]}
        role="presentation"
      >
        <div
          className="root isRootSizeMedium isRootPositionCenter"
          onClick={[Function]}
          role="presentation"
        >
          <div
            className="head"
          >
            <h3
              className="headTitle"
            >
              Modal title
            </h3>
          </div>
          <div
            className="body isBodyScrollable"
          >
            <WithProviderContextComponent
              customEndShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              customStartShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              shadowSize="16px"
            >
              <ScrollView
                arrows={false}
                arrowsScrollStep={200}
                autoScroll="off"
                customEndShadowStyle={
                  Object {
                    "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                  }
                }
                customNextArrow={null}
                customPrevArrow={null}
                customStartShadowStyle={
                  Object {
                    "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                  }
                }
                debounce={50}
                direction="vertical"
                scrollbar={true}
                shadowColor={
                  Object {
                    "alpha": 1,
                    "blue": 255,
                    "green": 255,
                    "red": 255,
                  }
                }
                shadowSize="16px"
                translations={
                  Object {
                    "next": "Next",
                    "previous": "Previous",
                  }
                }
              >
                <div
                  className="root    isRootVertical"
                  style={
                    Object {
                      "--rui-local-arrow-color": "inherit",
                      "--rui-local-end-shadow-background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                      "--rui-local-end-shadow-box-shadow": "none",
                      "--rui-local-shadow-height": "16px",
                      "--rui-local-shadow-width": "auto",
                      "--rui-local-start-shadow-background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                      "--rui-local-start-shadow-box-shadow": "none",
                    }
                  }
                >
                  <div
                    className="viewport"
                  >
                    <div
                      className="content"
                    >
                      <div
                        className="content"
                      >
                        Modal content
                      </div>
                    </div>
                  </div>
                  <div
                    aria-hidden={true}
                    className="scrollingShadows"
                  />
                </div>
              </ScrollView>
            </WithProviderContextComponent>
          </div>
        </div>
      </div>
    </Portal>
  </Modal>
</WithProviderContextComponent>
`;

exports[`rendering renders correctly with translations 1`] = `
<WithProviderContextComponent
  closeHandler={[Function]}
  title="Modal title"
  translations={
    Object {
      "close": "ZavÅ™Ã­t",
    }
  }
>
  <Modal
    actions={Array []}
    autoFocus={true}
    closeHandler={[Function]}
    portalId={null}
    position="center"
    scrollView={
      <WithProviderContextComponent
        customEndShadowStyle={
          Object {
            "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
          }
        }
        customStartShadowStyle={
          Object {
            "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
          }
        }
        shadowSize="16px"
      />
    }
    size="medium"
    title="Modal title"
    translations={
      Object {
        "close": "ZavÅ™Ã­t",
      }
    }
  >
    <div
      className="backdrop"
      onClick={[Function]}
      role="presentation"
    >
      <div
        className="root isRootSizeMedium isRootPositionCenter"
        onClick={[Function]}
        role="presentation"
      >
        <div
          className="head"
        >
          <h3
            className="headTitle"
          >
            Modal title
          </h3>
          <button
            className="close"
            onClick={[Function]}
            title="ZavÅ™Ã­t"
            type="button"
          >
            Ã—
          </button>
        </div>
        <div
          className="body isBodyScrollable"
        >
          <WithProviderContextComponent
            customEndShadowStyle={
              Object {
                "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
              }
            }
            customStartShadowStyle={
              Object {
                "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
              }
            }
            shadowSize="16px"
          >
            <ScrollView
              arrows={false}
              arrowsScrollStep={200}
              autoScroll="off"
              customEndShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              customNextArrow={null}
              customPrevArrow={null}
              customStartShadowStyle={
                Object {
                  "background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                }
              }
              debounce={50}
              direction="vertical"
              scrollbar={true}
              shadowColor={
                Object {
                  "alpha": 1,
                  "blue": 255,
                  "green": 255,
                  "red": 255,
                }
              }
              shadowSize="16px"
              translations={
                Object {
                  "next": "Next",
                  "previous": "Previous",
                }
              }
            >
              <div
                className="root    isRootVertical"
                style={
                  Object {
                    "--rui-local-arrow-color": "inherit",
                    "--rui-local-end-shadow-background": "radial-gradient(farthest-side at center bottom, rgba(0, 0, 0, 0.16) 0%, rgba(0, 0, 0, 0.06) 40%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                    "--rui-local-end-shadow-box-shadow": "none",
                    "--rui-local-shadow-height": "16px",
                    "--rui-local-shadow-width": "auto",
                    "--rui-local-start-shadow-background": "radial-gradient(farthest-side at center top, rgba(0, 0, 0, 0.15) 0%, rgba(0, 0, 0, 0.05) 60%, rgba(0, 0, 0, 0.02) 85%, rgba(0, 0, 0, 0) 100%)",
                    "--rui-local-start-shadow-box-shadow": "none",
                  }
                }
              >
                <div
                  className="viewport"
                >
                  <div
                    className="content"
                  >
                    <div
                      className="content"
                    >
                      Modal content
                    </div>
                  </div>
                </div>
                <div
                  aria-hidden={true}
                  className="scrollingShadows"
                />
              </div>
            </ScrollView>
          </WithProviderContextComponent>
        </div>
        <div
          className="footer"
        >
          <WithProviderContextComponent
            dense={true}
            justify="center"
          >
            <Toolbar
              align="top"
              dense={true}
              justify="center"
              nowrap={false}
            >
              <div
                className="toolbar isDense  isAlignedToTop isJustifiedToCenter"
              >
                <WithProviderContextComponent>
                  <ToolbarItem>
                    <div
                      className="item"
                    >
                      <ForwardRef(withForwardedRef(WithProviderContextComponent))
                        clickHandler={[Function]}
                        label="ZavÅ™Ã­t"
                        priority="flat"
                      >
                        <WithProviderContextComponent
                          clickHandler={[Function]}
                          forwardedRef={null}
                          label="ZavÅ™Ã­t"
                          priority="flat"
                        >
                          <Button
                            afterLabel={null}
                            beforeLabel={null}
                            block={false}
                            clickHandler={[Function]}
                            disabled={false}
                            endCorner={null}
                            forwardedRef={null}
                            grouped={false}
                            label="ZavÅ™Ã­t"
                            labelVisibility="all"
                            loadingIcon={null}
                            priority="flat"
                            size="medium"
                            startCorner={null}
                            type="button"
                            variant="primary"
                          >
                            <button
                              className="root
        priorityFlat
        sizeMedium
        variantPrimary"
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                            >
                              <span
                                className="label"
                              >
                                ZavÅ™Ã­t
                              </span>
                            </button>
                          </Button>
                        </WithProviderContextComponent>
                      </ForwardRef(withForwardedRef(WithProviderContextComponent))>
                    </div>
                  </ToolbarItem>
                </WithProviderContextComponent>
              </div>
            </Toolbar>
          </WithProviderContextComponent>
        </div>
      </div>
    </div>
  </Modal>
</WithProviderContextComponent>
`;
