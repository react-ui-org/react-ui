@import '../../../styles/settings/forms.deprecated';
@import '../../../styles/tools/forms/foundation';
@import '../../../styles/tools/forms.deprecated';

.root {
  position: relative;
  display: block;
  box-sizing: border-box;
}

.label {
  @include form-field-label();

  display: inline-block;
  margin-bottom: 0.25rem;
}

.isLabelRequired {
  composes: label;

  &::after {
    content: ' *';
  }
}

.isLabelHidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.list {
  padding: 0;
  margin: 0;
  list-style-type: none;
}

.inputWrap {
  position: relative;
  min-height: $checkbox-radio-label-height;
}

.input {
  @include form-checkbox-radio-input-styles($checkbox-radio-size, 0);
}

.radioLabel {
  @include form-field-label();
  @include form-checkbox-radio-label-styles($checkbox-radio-label-height, $checkbox-radio-padding-left);
}

.radioLabel:empty {
  padding-left: 0;
}

.input + .radioLabel::before {
  @include form-checkbox-radio-shared-inactive(
    $checkbox-radio-size,
    $checkbox-radio-top,
    0,
    $form-field-border-color
  );

  border-radius: 50%;
}

.input:disabled + .radioLabel {
  @include form-disabled-state();

  color: $radio-disabled-font-color;
}

/* stylelint-disable selector-max-specificity */
.input:checked + .radioLabel::before {
  box-shadow: $radio-checked-box-shadow;
}

.input:focus + .radioLabel::before {
  outline: 0;
  box-shadow: $radio-focused-box-shadow;
}

.input:disabled + .radioLabel::before {
  background-color: $gray-light-midtone;
}

.input:focus:checked + .radioLabel::before {
  outline: 0;
  box-shadow: $radio-checked-box-shadow, $radio-focused-box-shadow;
}

.input:disabled:checked + .radioLabel::before {
  background-color: $radio-disabled-background-color;
  box-shadow: $radio-disabled-checked-box-shadow;
}

.description,
.error {
  @include form-field-helper-text();
}

.error {
  min-height: 1rem;
}

// States
// stylelint-disable no-descending-specificity
.isRootStateInvalid .radioLabel,
.isRootStateInvalid .description,
.isRootStateInvalid .error {
  color: $form-invalid-color;
}

.isRootStateInvalid .input + .radioLabel::before,
.isRootStateInvalid .input:checked + .radioLabel::before {
  border-color: $form-invalid-color;
}

.isRootStateInvalid .input:checked + .radioLabel::before {
  box-shadow: inset 0 0 0 6px $form-invalid-color;
}

.isRootStateValid .radioLabel,
.isRootStateValid .description,
.isRootStateValid .error {
  color: $form-valid-color;
}

.isRootStateValid .input + .radioLabel::before,
.isRootStateValid .input:checked + .radioLabel::before {
  border-color: $form-valid-color;
}

.isRootStateValid .input:checked + .radioLabel::before {
  box-shadow: inset 0 0 0 6px $form-valid-color;
}

.isRootStateWarning .radioLabel,
.isRootStateWarning .description,
.isRootStateWarning .error {
  color: $form-warning-color;
}

.isRootStateWarning .input + .radioLabel::before,
.isRootStateWarning .input:checked + .radioLabel::before {
  border-color: $form-warning-color;
}

.isRootStateWarning .input:checked + .radioLabel::before {
  box-shadow: inset 0 0 0 6px $form-warning-color;
}

.isRootLayoutHorizontal {
  position: relative; // Just set something until the component is refactored (#20).
}

.isRootInFormLayout {
  @include form-field-in-form-layout();
}
