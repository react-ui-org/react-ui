// 1. Scrolling shadows are implemented as pseudo elements. This way we can customise them only
//    with custom properties.
// 2. Stack scrolling shadows  over viewport content while keeping the content interactive.
//
//    - `.scrollingShadows` is positioned absolutely over the `.root`, with auto `z-index` (this is
//      important!), and with `overflow: hidden` to clip the shadows (ie. its pseudo elements).
//    - The `.viewport` is in `.root`'s stacking context and remains interactive because its
//      `z-index` is higher than the auto `z-index` of `.scrollingShadows`.
//
// 3. Optional arrows are positioned relative to the `.root` and stacked on top of scrolling
//    shadows. They can be shifted outside the `ScrollView` area only because `overflow: hidden` is
//    **not** present at `.root`.
//
// 4. Make the `.content`'s bounding rectangle spread beyond the part visible through `.viewport`.
// 5. Prevent undesired vertical scrolling that may occur with tables inside.
// 6. Make `ScrollView` adjust to flexible layouts.

@import '../../../styles/tools/caret';
@import '../../../styles/tools/hide-scrollbar';
@import '../../../styles/tools/reset';
@import '../../../styles/tools/transitions';
@import 'theme';

$_arrow-inner-offset: 0.5rem;
$_arrow-outer-offset: 1rem;

.root {
  position: relative; // 2.
  display: flex;
  flex-direction: column;
  width: 100%;
}

// 1.
.scrollingShadows {
  position: absolute; // 2.
  width: 100%; // 2.
  height: 100%; // 2.
  overflow: hidden; // 2.

  &::before,
  &::after {
    @include transition((visibility, opacity, transform));

    content: '';
    position: absolute;
    z-index: 2; // 2.
    display: block;
    visibility: hidden;
    opacity: 0;
    width: var(--rui-local-shadow-width);
    height: var(--rui-local-shadow-height);
  }

  &::before {
    background: var(--rui-local-start-shadow-background);
    box-shadow: var(--rui-local-start-shadow-box-shadow);
  }

  &::after {
    background: var(--rui-local-end-shadow-background);
    box-shadow: var(--rui-local-end-shadow-box-shadow);
  }
}

.viewport {
  z-index: 1; // 2.
  width: 100%;
  scroll-behavior: smooth;
  -webkit-overflow-scrolling: touch;
}

.arrowPrev,
.arrowNext {
  @include reset-button();
  @include transition((visibility, opacity, transform));

  position: absolute; // 3.
  z-index: 3; // 3.
  display: flex;
  visibility: hidden;
  opacity: 0;
  align-items: center;
  justify-content: center;
  color: var(--rui-local-arrow-color);
}

.arrowIcon {
  @include caret();
}

.isRootVertical {
  height: 100%;
  min-height: 0; // 6.
}

.isRootVertical .viewport {
  height: 100%;
  overflow-y: auto; // 2.
}

.isRootVertical .arrowPrev {
  top: 0;
  right: 0;
  left: 0;
  width: 100%;
  padding-top: $_arrow-outer-offset;
  padding-bottom: $_arrow-inner-offset;
  transform: translateY($scrollview-arrow-initial-offset);
}

.isRootVertical .arrowPrev .arrowIcon {
  @include caret-rotate(180);
}

.isRootVertical .arrowNext {
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  padding-top: $_arrow-inner-offset;
  padding-bottom: $_arrow-outer-offset;
  transform: translateY(calc(-1 * #{$scrollview-arrow-initial-offset}));
}

.isRootHorizontal {
  min-width: 0; // 6.
}

.isRootHorizontal .arrowPrev {
  top: 0;
  bottom: 0;
  left: 0;
  padding-right: $_arrow-inner-offset;
  padding-left: $_arrow-outer-offset;
  transform: translateX($scrollview-arrow-initial-offset);
}

.isRootHorizontal .arrowPrev .arrowIcon {
  @include caret-rotate(90);
}

.isRootHorizontal .arrowNext {
  top: 0;
  right: 0;
  bottom: 0;
  padding-right: $_arrow-outer-offset;
  padding-left: $_arrow-inner-offset;
  transform: translateX(calc(-1 * #{$scrollview-arrow-initial-offset}));
}

.isRootHorizontal .arrowNext .arrowIcon {
  @include caret-rotate(270);
}

.isRootVertical .scrollingShadows::before,
.isRootVertical .scrollingShadows::after {
  right: 0;
  left: 0;
}

.isRootVertical .scrollingShadows::before {
  top: 0;
  transform: translateY($scrollview-shadow-initial-offset);
}

.isRootVertical .scrollingShadows::after {
  bottom: 0;
  transform: translateY(calc(-1 * #{$scrollview-shadow-initial-offset}));
}

.isRootHorizontal .viewport {
  overflow-x: auto; // 2.
  overflow-y: hidden; // 5.
}

.isRootHorizontal .content {
  display: inline-flex; // 4.
  min-width: 100%;
}

.isRootHorizontal .scrollingShadows::before,
.isRootHorizontal .scrollingShadows::after {
  top: 0;
  bottom: 0;
}

.isRootHorizontal .scrollingShadows::before {
  left: 0;
  transform: translateX($scrollview-shadow-initial-offset);
}

.isRootHorizontal .scrollingShadows::after {
  right: 0;
  transform: translateX(calc(-1 * #{$scrollview-shadow-initial-offset}));
}

.isRootScrolledAtStart .scrollingShadows::before,
.isRootScrolledAtStart .arrowPrev {
  visibility: visible;
  opacity: 1;
  transform: translate(0, 0);
}

.isRootScrolledAtEnd .scrollingShadows::after,
.isRootScrolledAtEnd .arrowNext {
  visibility: visible;
  opacity: 1;
  transform: translate(0, 0);
}

.hasRootScrollbarDisabled .viewport {
  @include hide-scrollbar();
}
