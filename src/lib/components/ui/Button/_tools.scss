// 1. Due to complexity, it's easier and safer to resolve variant custom properties dynamically with
//    a mixin. This way it's also easier to make theming adjustments to all supported modifications
//    in one place. This applies to the following button priorities:
//
//    - filled
//    - outline
//    - flat
//
//    The “link” priority is treated separately as it doesn't share much of appearance with other
//    variants listed above.
//
// 2. Disabled state theming is optional so `default` theme options are used if no `disabled`
//    styling is provided for specific variant.
//
// 3. Get ready for position of corner elements and group separator.
//
// 4. Icon buttons should appear as squares, that's why width and height is equal here.
//
// 5. Unset undesired properties so the link button appears as link while it keeps some button
//    settings. It might be tempting to use something like `all: initial` or `all: inherit` but it
//    actually causes more harm rather than a useful reset.

@use 'sass:math';
@use 'sass:list';
@use '../../../styles/tools/breakpoint';
@use '../../../styles/tools/transition';
@use 'settings';
@use 'theme';

// 1.
@mixin _get-themeable-properties($priority, $variant, $state) {
  @if (not list.index(map-keys(settings.$themeable-priority-properties), $priority)) {
    @error "Invalid priority specified! #{$priority} doesn't exist. "
      + "Choose one of #{settings.$themeable-priority-properties}.";
  }

  @if (not list.index(settings.$themeable-variants, $variant)) {
    @error "Invalid variant specified! #{$variant} doesn't exist. "
      + "Choose one of #{settings.$themeable-variants}.";
  }

  @if (not list.index(settings.$themeable-states, $state)) {
    @error "Invalid state specified! #{$state} doesn't exist. "
      + "Choose one of #{settings.$themeable-states}.";
  }

  $properties: map-get(settings.$themeable-priority-properties, $priority);

  // 2.
  @if ($state == 'disabled') {
    @each $property in $properties {
      --rui-local-#{$property}:
        var(
          --rui-Button--#{$priority}--#{$variant}--#{$state}__#{$property},
          var(--rui-Button--#{$priority}--#{$variant}--default__#{$property})
        );
    }
  }

  @else {
    @each $property in $properties {
      --rui-local-#{$property}: var(--rui-Button--#{$priority}--#{$variant}--#{$state}__#{$property});
    }
  }
}

@mixin _unset-button-appearance() {
  width: unset;
  height: unset;
  padding: unset;
  font-weight: unset;
  line-height: unset;
  font-family: unset;
  text-transform: unset;
  vertical-align: unset;
  border: unset;
  border-radius: unset;
  box-shadow: unset;
  user-select: unset;
  transition: unset;
}

@mixin button() {
  @include transition.add((opacity, color, border-color, background-color, box-shadow));

  position: relative; // 3.
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: var(--rui-local-width, auto);
  height: var(--rui-local-height, auto);
  padding: var(--rui-local-padding);
  font: theme.$font-weight list.slash(var(--rui-local-font-size), settings.$line-height) settings.$font-family;
  letter-spacing: theme.$letter-spacing;
  text-align: center;
  text-overflow: ellipsis;
  text-decoration: none;
  text-transform: theme.$text-transform;
  vertical-align: middle;
  color: var(--rui-local-color);
  border: theme.$border-width solid var(--rui-local-border-color, transparent);
  border-radius: theme.$border-radius;
  background: var(--rui-local-background, transparent);
  box-shadow: var(--rui-local-box-shadow, none);
  user-select: none;
  cursor: pointer;

  &:hover,
  &:focus {
    text-decoration: none;
  }

  &:disabled {
    opacity: theme.$disabled-opacity;
    cursor: theme.$disabled-cursor;
  }

  &:-moz-focusring {
    outline: 0;
  }
}

@mixin button-size($size) {
  $properties: map-get(theme.$sizes, $size);

  --rui-local-height: #{map-get($properties, height)};
  --rui-local-padding: 0 #{map-get($properties, padding-x)};
  --rui-local-font-size: #{map-get($properties, font-size)};

  &.withLabelHidden,
  &.withLabelHiddenMobile {
    --rui-local-padding: 0;
    --rui-local-width: #{map-get($properties, height)}; // 4.
  }

  &.withLabelHiddenMobile {
    @include breakpoint.up(settings.$breakpoint) {
      --rui-local-padding: 0 #{map-get($properties, padding-x)};
      --rui-local-width: auto;
    }
  }
}

@mixin button-variant($priority, $variant) {
  @include _get-themeable-properties($priority, $variant, default);

  &:disabled {
    @include _get-themeable-properties($priority, $variant, disabled);
  }

  &:not(:disabled):hover,
  &:not(:disabled):focus {
    @include _get-themeable-properties($priority, $variant, hover);
  }

  &:not(:disabled):active {
    @include _get-themeable-properties($priority, $variant, active);
  }
}

@mixin button-link() {
  @include _unset-button-appearance(); // 5.

  text-decoration: map-get(theme.$link-priority-properties, default, text-decoration);
  color: map-get(theme.$link-priority-properties, default, color);

  &:not(:disabled):hover,
  &:not(:disabled):focus {
    text-decoration: map-get(theme.$link-priority-properties, hover, text-decoration);
    color: map-get(theme.$link-priority-properties, hover, color);
  }
}
