@import '../../../styles/settings/colors';
@import '../../../styles/tools/accessibility';
@import '../../../styles/tools/breakpoints';
@import '../../../styles/tools/forms/relationships';
@import 'mixins';
@import 'variables';

.root {
  @include button();
  @include form-field-horizontal-neighbor();
}

.label {
  display: block;
}

.beforeLabel,
.afterLabel,
.startCorner,
.endCorner,
.loadingIcon {
  display: flex;
  align-items: baseline;
  justify-content: center;
}

.beforeLabel {
  margin-right: $button-icon-offset;
}

.afterLabel,
.loadingIcon {
  margin-left: $button-icon-offset;
}

.startCorner,
.endCorner {
  position: absolute;
  top: -0.35rem;
}

.startCorner {
  left: 0;
  margin-left: -0.35rem;
}

.endCorner {
  right: 0;
  margin-right: -0.35rem;
}

.sizeSmall {
  @include button-size(small);
}

.sizeMedium {
  @include button-size(medium);
}

.sizeLarge {
  @include button-size(large);
}

.isRootBlock {
  @include form-field-vertical-neighbor();

  width: 100%;
}

.isRootBlock.withLabelHiddenMobile {
  @include breakpoint-up($button-breakpoint) {
    width: 100%;
  }
}

.isRootGrouped {
  &:not(:first-child) {
    margin-left: calc(-1 * #{$button-border-width});
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  &:not(:last-child) {
    margin-right: 0;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }
}

.withLabelHidden .label,
.withLabelHiddenMobile .label {
  @include accessibility-hide-text();
}

.withLabelHiddenMobile .label {
  @include breakpoint-up($button-breakpoint) {
    position: relative;
    width: auto;
    height: auto;
  }
}

.withLabelHidden .beforeLabel,
.withLabelHidden .afterLabel,
.withLabelHiddenMobile .beforeLabel,
.withLabelHiddenMobile .afterLabel {
  margin-right: 0;
  margin-left: 0;
}

.withLabelHiddenMobile .beforeLabel {
  @include breakpoint-up($button-breakpoint) {
    margin-right: $button-icon-offset;
  }
}

.withLabelHiddenMobile .afterLabel {
  @include breakpoint-up($button-breakpoint) {
    margin-left: $button-icon-offset;
  }
}

// Default priority variants
.priorityDefault.variantPrimary {
  @include button-variant(default, primary);
}

.priorityDefault.variantSecondary {
  @include button-variant(default, secondary);
}

.priorityDefault.variantSuccess {
  @include button-variant(default, success);
}

.priorityDefault.variantWarning {
  @include button-variant(default, warning);
}

.priorityDefault.variantDanger {
  @include button-variant(default, danger);
}

.priorityDefault.variantDark {
  @include button-variant(default, dark);
}

// Outline priority variants
.priorityOutline.variantPrimary {
  @include button-variant(outline, primary);
}

.priorityOutline.variantSecondary {
  @include button-variant(outline, secondary);
}

.priorityOutline.variantSuccess {
  @include button-variant(outline, success);
}

.priorityOutline.variantWarning {
  @include button-variant(outline, warning);
}

.priorityOutline.variantDanger {
  @include button-variant(outline, danger);
}

.priorityOutline.variantDark {
  @include button-variant(outline, dark);
}

// Flat priority variants
.priorityFlat.variantPrimary {
  @include button-variant(flat, primary);
}

.priorityFlat.variantSecondary {
  @include button-variant(flat, secondary);
}

.priorityFlat.variantSuccess {
  @include button-variant(flat, success);
}

.priorityFlat.variantWarning {
  @include button-variant(flat, warning);
}

.priorityFlat.variantDanger {
  @include button-variant(flat, danger);
}

.priorityFlat.variantDark {
  @include button-variant(flat, dark);
}

// Grouped buttons
.priorityDefault.isRootGrouped:not(:first-child)::before,
.priorityFlat.isRootGrouped:not(:first-child)::before {
  content: '';
  position: absolute;
  top: calc(-1 * #{$button-border-width});
  bottom: calc(-1 * #{$button-border-width});
  left: calc(-1 * #{$button-border-width});
  border-left: $button-border-width solid $color-white;
}

.priorityFlat.isRootGrouped:not(:first-child)::before {
  border-left-color: currentColor;
}
