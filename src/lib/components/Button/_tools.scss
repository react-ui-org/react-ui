// 1. Due to complexity, it's easier and safer to resolve variant custom properties dynamically with
//    a mixin. This way it's also easier to make theming adjustments to all supported modifications
//    in one place. This applies to the following button priorities:
//
//    - filled
//    - outline
//    - flat
//
// 2. Disabled state theming is optional so `default` theme options are used if no `disabled`
//    styling is provided for specific variant.
//
// 3. Get ready for position of corner elements and group separator.
//
// 4. Icon buttons should appear as squares, that's why width and height is equal here.
//
// 5. Use original padding to restore square buttons back to their size.

@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "../../styles/tools/accessibility";
@use "../../styles/tools/breakpoint";
@use "../../styles/tools/transition";
@use "settings";
@use "theme";

// 1.
@mixin _get-themeable-properties($priority, $color, $state) {
    @if not list.index(map.keys(settings.$themeable-priority-properties), $priority) {
        @error "Invalid priority specified! #{$priority} doesn't exist. "
            + "Choose one of #{settings.$themeable-priority-properties}.";
    }

    @if not list.index(settings.$themeable-variants, $color) {
        @error "Invalid variant specified! #{$color} doesn't exist. "
            + "Choose one of #{settings.$themeable-variants}.";
    }

    @if not list.index(settings.$themeable-states, $state) {
        @error "Invalid state specified! #{$state} doesn't exist. "
            + "Choose one of #{settings.$themeable-states}.";
    }

    $properties: map.get(settings.$themeable-priority-properties, $priority);

    // 2.
    @if $state == "disabled" {
        @each $property in $properties {
            --rui-local-#{$property}:
                var(
                    --rui-Button--#{$priority}--#{$color}--#{$state}__#{$property},
                    var(--rui-Button--#{$priority}--#{$color}--default__#{$property})
                );
        }
    } @else {
        @each $property in $properties {
            --rui-local-#{$property}: var(--rui-Button--#{$priority}--#{$color}--#{$state}__#{$property});
        }
    }
}

// 4.
@mixin _button-square() {
    --rui-local-padding: 0;
    --rui-local-width: var(--rui-local-height);
}

// 5.
@mixin _button-size-restore() {
    --rui-local-padding: var(--rui-local-padding-original);
    --rui-local-width: unset;
}

@mixin button() {
    @include transition.add((opacity, color, border-color, background-color, box-shadow));

    position: relative; // 3.
    display: inline-flex;
    column-gap: settings.$icon-spacing;
    align-items: center;
    justify-content: center;
    width: var(--rui-local-width, auto);
    min-height: var(--rui-local-height, auto);
    padding: var(--rui-local-padding);
    font: theme.$font-weight list.slash(var(--rui-local-font-size), settings.$line-height) settings.$font-family;
    letter-spacing: theme.$letter-spacing;
    text-align: center;
    text-decoration: none;
    text-transform: theme.$text-transform;
    vertical-align: middle;
    color: var(--rui-local-color);
    border: theme.$border-width solid var(--rui-local-border-color, transparent);
    border-radius: theme.$border-radius;
    background: var(--rui-local-background, transparent);
    box-shadow: var(--rui-local-box-shadow, none);
    user-select: none;
    cursor: pointer;

    &:hover,
    &:focus {
        text-decoration: none;
    }

    &:disabled {
        opacity: theme.$disabled-opacity;
        cursor: theme.$disabled-cursor;
    }

    &:-moz-focusring {
        outline: 0;
    }
}

@mixin button-size($size) {
    $properties: map.get(theme.$sizes, $size);

    --rui-local-height: #{map.get($properties, height)};
    --rui-local-padding: #{map.get($properties, padding-y)} #{map.get($properties, padding-x)};
    --rui-local-padding-original: #{map.get($properties, padding-y)} #{map.get($properties, padding-x)}; // 5.
    --rui-local-font-size: #{map.get($properties, font-size)};
}

@mixin button-color($priority, $color) {
    @include _get-themeable-properties($priority, $color, default);

    &:disabled {
        @include _get-themeable-properties($priority, $color, disabled);
    }

    &:not(:disabled):hover,
    &:not(:disabled):focus {
        @include _get-themeable-properties($priority, $color, hover);
    }

    &:not(:disabled):active {
        @include _get-themeable-properties($priority, $color, active);
    }
}

@mixin hide-label() {
    @include _button-square();

    .label {
        @include accessibility.hide-text();
    }
}

@mixin show-label() {
    @include _button-size-restore();

    .label {
        @include accessibility.unhide-text();
    }
}
