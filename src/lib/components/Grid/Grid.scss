// 1. Read value of `--rui-local-<PROPERTY>-<BREAKPOINT>` that might have been defined by
//    JavaScript and assign it to `--rui-local-<PROPERTY>` used in 2.
//
//    Fallback cascade containing fallbacks for all previous breakpoints recursively is included
//    using CSS custom property fallback mechanism like this:
//
//    Fallback for `xs` breakpoint: `<INITIAL FALLBACK>`
//    Fallback for `sm` breakpoint: `var(--rui-local-<PROPERTY>-xs, <INITIAL FALLBACK>)`
//    Fallback for `md` breakpoint: `var(--rui-local-<PROPERTY>-sm, var(--rui-local-<PROPERTY>-xs, <INIT. FALLBACK>))`
//
//    â€¦ etc, up to the largest breakpoint.
//
//    A media query is then created for each breakpoint (with exception of `xs` which doesn't need a
//    media query) and a corresponding responsive custom property variant is assigned to
//    `--rui-local-<PROPERTY>` that is used later in CSS, see 2.
//
//    Example for `sm` breakpoint:
//
//    `--rui-local-<PROPERTY>: var(--rui-local-<PROPERTY>-sm, var(--rui-local-<PROPERTY>-xs, <INITIAL FALLBACK>))`
//
// 2. Apply custom property value that is defined within current breakpoint, see 1.

@use "sass:map";
@use "../../styles/tools/spacing";
@use "theme";
@use "tools";

.root {
    @include tools.assign-responsive-custom-properties(theme.$responsive-properties); // 1.
    @include spacing.bottom(layouts);

    display: grid;
    grid-template-columns: var(--rui-local-columns); // 2.
    grid-template-rows: var(--rui-local-rows); // 2.
    grid-auto-flow: var(--rui-local-auto-flow, #{map.get(theme.$responsive-properties, auto-flow)}); // 2.
    grid-gap: var(--rui-local-row-gap) var(--rui-local-column-gap); // 2.
    align-content: var(--rui-local-align-content, #{map.get(theme.$responsive-properties, align-content)}); // 2.
    align-items: var(--rui-local-align-items, #{map.get(theme.$responsive-properties, align-items)}); // 2.
    justify-content: var(--rui-local-justify-content, #{map.get(theme.$responsive-properties, justify-content)}); // 2.
    justify-items: var(--rui-local-justify-items, #{map.get(theme.$responsive-properties, justify-items)}); // 2.
}

.span {
    $responsive-properties: (
        column-span: 1,
        row-span: 1,
    );

    @include tools.assign-responsive-custom-properties($responsive-properties); // 1.

    grid-column: span var(--rui-local-column-span, 1); // 2.
    grid-row: span var(--rui-local-row-span, 1); // 2.
}

// stylelint-disable selector-no-qualifying-type
dl.root,
ol.root,
ul.root {
    padding-left: 0;
    margin-left: 0;
}
// stylelint-enable selector-no-qualifying-type
