// 1. Form fields in vertical layout take up as much space as they need. Labels do not wrap until
//    forced by container of the field. Min and max limits make extra long words break if necessary.
//
// 2. Form fields in horizontal layout also take up only as much space as they need. Labels do not
//    wrap until label width limit is reached (50 % of available horizontal space by default).
//
// 3. Help texts and validation messages are aligned below input and wrapped. Their width is always
//    limited to the width of the input field so they don't shift adjacent elements when they show
//    up.
//
// 4. Define grid spacing as padding of child elements because grid areas make row and column gaps
//    show up even when not necessary.
//
// 5. When input size is small and form field layout is set to horizontal, expand help text and
//    validation message over full form field width to improve their readability. Otherwise the text
//    would be packed into a very narrow column and hard to read. To prevent help text and
//    validation message from growing the layout more than necessary (ie. the size without
//    help/validation text), `min-content` grid sizing must be used along with disabled wrapping of
//    label.
//
// 6. Full-width horizontal form fields prefer not wrapping the label until a limit is reached
//    (50 % of available horizontal space by default, same as in 2.).
//
// 7. Justify inputs to `start` in horizontal layouts to fix positioning issues with Select Fields.
//    Reverted for full-width fields.
//
// 8. When form field exists inside FormLayout, automatic margins are removed as the FormLayout
//    takes care of proper spacing.
//
// 9. Grid settings are inherited from horizontal Form Layout and applied using `subgrid`.
//    A fallback is supplied to browsers that don't support `subgrid` yet. See FormLayout styles
//    for more.

@use '../../settings/forms' as settings;
@use '../../theme/forms' as theme;
@use '../breakpoint';

@mixin field-layout-vertical() {
  display: inline-flex; // 1.
  flex-direction: column;
  min-width: 0; // 1.
  max-width: 100%; // 1.

  .label {
    padding-bottom: settings.$field-vertical-inner-gap;
  }

  .field {
    width: min-content; // 3.
    max-width: 100%; // 3.
  }

  .helpText,
  .validationText {
    padding-top: settings.$field-vertical-inner-gap;
  }
}

@mixin field-layout-horizontal() {
  @include field-layout-vertical();

  @include breakpoint.up(settings.$field-horizontal-breakpoint) {
    display: inline-grid; // 2.
    grid-template-columns: theme.$field-horizontal-label-width min-content; // 2.
    grid-template-areas: 'label field';
    align-items: start;

    .label {
      grid-area: label;
      min-width: theme.$field-horizontal-label-min-width;
      padding-right: settings.$field-horizontal-inner-gap; // 4.
      padding-bottom: 0; // 4.
      text-align: theme.$field-horizontal-label-alignment;
    }

    .field {
      grid-area: field;
      justify-self: start; // 7.
    }
  }
}

@mixin field-layout-with-small-input() {
  @include breakpoint.up(settings.$field-horizontal-breakpoint) {
    &.rootLayoutHorizontal {
      grid-template-columns: min-content min-content; // 5.
      grid-template-areas:
        'label field'
        'helptext helptext'
        'validationtext validationtext'; // 5.
    }

    &.rootLayoutHorizontal .label {
      white-space: nowrap; // 5.
    }

    &.rootLayoutHorizontal .field {
      display: contents; // 5.
    }

    &.rootLayoutHorizontal .inputContainer {
      grid-area: field; // 5.
    }

    &.rootLayoutHorizontal .helpText {
      grid-area: helptext; // 5.
    }

    &.rootLayoutHorizontal .validationText {
      grid-area: validationtext; // 5.
    }
  }
}

@mixin field-full-width() {
  display: flex;
  flex-direction: column;
  width: 100%;

  .field,
  .inputContainer,
  .input {
    width: 100%;
  }

  @include breakpoint.up(settings.$field-horizontal-breakpoint) {
    &.rootLayoutHorizontal {
      display: grid;
      grid-template-columns: theme.$field-horizontal-full-width-label-width 1fr; // 6.
    }

    &.rootLayoutHorizontal .field {
      justify-self: stretch; // 7.
    }
  }
}

@mixin field-in-form-layout() {
  &:not(:last-child),
  &.rootLayoutHorizontal:not(:last-child) {
    margin-right: 0; // 8.
    margin-bottom: 0; // 8.
  }

  @include breakpoint.up(settings.$field-horizontal-breakpoint) {
    &.rootLayoutHorizontal,
    &.rootLayoutHorizontal.hasRootSmallInput {
      grid: inherit; // 9.
      grid-template-columns: subgrid; // 9.
      grid-column: span 2; // 9.

      @supports not (grid-template-columns: subgrid) {
        display: contents; // 9.
      }
    }

    &.rootLayoutHorizontal.isRootFullWidth {
      grid-template-columns: subgrid; // 9.
    }

    &.rootLayoutHorizontal .label,
    &.rootLayoutHorizontal .field,
    &.rootLayoutHorizontal .inputContainer,
    &.rootLayoutHorizontal .helpText,
    &.rootLayoutHorizontal .validationText {
      grid-area: unset; // 9.
    }

    &.rootLayoutHorizontal .field,
    &.rootLayoutHorizontal .inputContainer,
    &.rootLayoutHorizontal .helpText,
    &.rootLayoutHorizontal .validationText {
      grid-column-start: 2; // 9.
    }

    &.rootLayoutHorizontal.hasRootSmallInput .field {
      display: block; // 5.
    }
  }
}
