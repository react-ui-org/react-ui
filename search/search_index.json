{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"React UI","text":"<p>React components for your design system.</p> <p>React UI is a themeable, performant, responsive UI library for React apps. Use it simply with no configuration or have full control over your design by tweaking some of the hundreds theming options available.</p>"},{"location":"#key-concepts","title":"Key Concepts","text":"<p>Why another UI library? Because we couldn't find any library that would meet these requirements:</p> <ul> <li> <p>\ud83c\udfa8 Full control over design, from design tokens to components. Hundreds of   CSS custom properties allow you to customize the design of your app without   touching JS.</p> </li> <li> <p>\ud83d\udce6 Zero configuration needed. Create rapid prototypes that look great with   smart defaults and no additional effort.</p> </li> <li> <p>\ud83d\ude80 Small bundle size. Because performance matters.</p> </li> </ul>"},{"location":"#whats-included","title":"What's Included","text":"<p>React UI consists of four building blocks:</p> <ol> <li> <p>Foundation CSS: basic themeable CSS layer. Mandatory ground zero for    components. Learn how to get started quickly.</p> </li> <li> <p>Components: reusable and themeable React components and layouts:    alerts, buttons,    cards, and more.</p> </li> <li> <p>Theme: a collection of CSS custom properties that define the visual    appearance of the UI.    Learn how to create a theme.</p> </li> <li> <p>Helper CSS classes (optional): tiny CSS classes with notation    inspired by Bootstrap. They can handle details like    typography, spacing,    colors, etc.</p> </li> </ol>"},{"location":"#sponsors","title":"Sponsors","text":"<p>Development of React UI is largely supported by RACOM\u2014one of the leading global players in wireless Critical Infrastructure.</p>"},{"location":"components/Alert/","title":"Alert","text":"<p>Alert presents feedback or important information to users.</p>"},{"location":"components/Alert/#basic-usage","title":"Basic Usage","text":"<p>To implement the Alert component, you need to import it first:</p> <pre><code>import { Alert } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;Alert&gt;\n  &lt;strong&gt;Hello!&lt;/strong&gt; This is an alert.\n&lt;/Alert&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/Alert/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Be simple and short and explain to users why you are interrupting them   with an alert. Clearly say what happened or what is going to happen. Provide a   brief title when the message is too long.</p> </li> <li> <p>Use icons to improve the accessibility of alerts because color may not be   enough for everyone. See how.</p> </li> </ul>"},{"location":"components/Alert/#color-variants","title":"Color Variants","text":"<p>To cover all possible needs of your project, Alert is available in colors from Feedback color collection.</p>"},{"location":"components/Alert/#success","title":"Success","text":"<p>Success alerts confirm that an operation has been processed successfully.</p> <pre><code>&lt;Alert color=\"success\"&gt;\n  &lt;strong&gt;Success:&lt;/strong&gt; Settings have been successfully saved.\n  {' '}\n  &lt;TextLink href=\"/\" label=\"Undo\" /&gt;\n&lt;/Alert&gt;</code></pre>"},{"location":"components/Alert/#warning","title":"Warning","text":"<p>Use warning alerts when a potentially unfavourable situation may occur. You may suggest an action to resolve the problem.</p> <pre><code>&lt;Alert color=\"warning\"&gt;\n  &lt;strong&gt;Warning:&lt;/strong&gt; Your credit card is going to expire soon.\n  {' '}\n  &lt;TextLink href=\"/\" label=\"Update my payment options\" /&gt;\n&lt;/Alert&gt;</code></pre>"},{"location":"components/Alert/#danger","title":"Danger","text":"<p>Danger alerts say there is something that block users from continuing that requires their immediate attention. The alert should offer a solution to the problem.</p> <pre><code>&lt;Alert color=\"danger\"&gt;\n  &lt;strong&gt;Error:&lt;/strong&gt; Cannot connect to the server. Is your internet\n  connection working fine?\n  {' '}\n  &lt;TextLink href=\"/\" label=\"Try again\" /&gt;\n&lt;/Alert&gt;</code></pre>"},{"location":"components/Alert/#help","title":"Help","text":"<p>This kind of alert can be used to display helpful information.</p> <pre><code>&lt;Alert color=\"help\"&gt;\n  &lt;strong&gt;Help:&lt;/strong&gt; You should choose a password you don&amp;apos;t use\n  anywhere else.\n  {' '}\n  &lt;TextLink href=\"/\" label=\"Help me choose\" /&gt;\n&lt;/Alert&gt;</code></pre>"},{"location":"components/Alert/#info","title":"Info","text":"<p>Another common, informative alert.</p> <pre><code>&lt;Alert color=\"info\"&gt;\n  &lt;strong&gt;Info:&lt;/strong&gt; This feature depends on user&amp;apos;s OS preferences.\n  {' '}\n  &lt;TextLink href=\"/\" label=\"Open preferences\" /&gt;\n&lt;/Alert&gt;</code></pre>"},{"location":"components/Alert/#note-default","title":"Note (Default)","text":"<p>Neutral informative alert.</p> <pre><code>&lt;Alert&gt;\n  &lt;strong&gt;Note:&lt;/strong&gt; This feature may not be available in all regions.\n  {' '}\n  &lt;TextLink href=\"/\" label=\"Show list of regions\" /&gt;\n&lt;/Alert&gt;</code></pre>"},{"location":"components/Alert/#alerts-with-icons","title":"Alerts with Icons","text":"<p>An icon can (and should) accompany the message.</p> <p>\ud83d\udc49 Please note there are no icons pre-packed in React UI. Visit Icons to see how it works.</p> <pre><code>&lt;Alert color=\"success\" icon={&lt;rui-icon icon=\"success\" /&gt;}&gt;\n  &lt;strong&gt;Success:&lt;/strong&gt; Settings have been successfully saved.\n&lt;/Alert&gt;</code></pre>"},{"location":"components/Alert/#dismissible-alerts","title":"Dismissible Alerts","text":"<p>You can make an alert dismissible by providing a function that closes it on click on the close button:</p> <pre><code>React.createElement(() =&gt; {\n  const [isAlertVisible, setIsAlertVisible] = React.useState(true);\n\n  if (isAlertVisible) {\n    return (\n      &lt;Alert\n        color=\"success\"\n        icon={&lt;rui-icon icon=\"success\" /&gt;}\n        onClose={() =&gt; setIsAlertVisible(false)}\n      &gt;\n        &lt;strong&gt;Success:&lt;/strong&gt; Settings have been successfully saved.\n      &lt;/Alert&gt;\n    );\n  }\n\n  return (\n    &lt;Button\n      label=\"Bring the alert back!\"\n      onClick={() =&gt; setIsAlertVisible(true)}\n    /&gt;\n  );\n});</code></pre>"},{"location":"components/Alert/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the root <code>&lt;div&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;div&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/Alert/#api","title":"API","text":""},{"location":"components/Alert/#theming","title":"Theming","text":""},{"location":"components/Alert/#common-theming-options","title":"Common Theming Options","text":"Custom Property Description <code>--rui-Alert__padding</code> Padding between border and message <code>--rui-Alert__font-weight</code> Message font weight <code>--rui-Alert__border-width</code> Border width <code>--rui-Alert__border-radius</code> Corner radius <code>--rui-Alert__emphasis__font-weight</code> Font weight of text emphasised with <code>&lt;strong&gt;</code> <code>--rui-Alert__stripe__width</code> Width of the border at the start of the Alert"},{"location":"components/Alert/#theming-variants","title":"Theming Variants","text":"<p>It's possible to adjust the theme of specific alert color variant. Naming convention looks as follows:</p> <p><code>--rui-Alert--&lt;COLOR&gt;__&lt;PROPERTY&gt;</code></p> <p>Where:</p> <ul> <li><code>&lt;COLOR&gt;</code> is a value from supported   color collections   (check color variants and API to see which   collections are supported),</li> <li><code>&lt;PROPERTY&gt;</code> is one of <code>color</code> (color of text), <code>foreground-color</code> (color of   border, icon, links, and emphasis), or <code>background-color</code>.</li> </ul>"},{"location":"components/Badge/","title":"Badge","text":""},{"location":"components/Badge/#basic-usage","title":"Basic Usage","text":"<p>To implement the Badge component, you need to import it first:</p> <pre><code>import { Badge } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;Badge label=\"Hello!\" /&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/Badge/#general-guidelines","title":"General Guidelines","text":"<p>Use badges to highlight content with a short and brief additional information: a number, a word, but no more than two words.</p>"},{"location":"components/Badge/#priorities","title":"Priorities","text":"<p>There are two visual priorities of badges to choose from, from highest to lowest:</p> <ol> <li>filled</li> <li>outline</li> </ol> <p>All priorities are available in colors from supported color collections. Check API to see which collections are supported.</p>"},{"location":"components/Badge/#filled","title":"Filled","text":"<p>High-emphasis priority to draw user's attention.</p> <pre><code>&lt;Badge label=\"3\" color=\"success\" /&gt;\n&lt;Badge label=\"4\" color=\"warning\" /&gt;\n&lt;Badge label=\"5\" color=\"danger\" /&gt;\n&lt;Badge label=\"10\" color=\"help\" /&gt;\n&lt;Badge label=\"34\" color=\"info\" /&gt;\n&lt;Badge label=\"99+\" /&gt;\n&lt;Badge label=\"365\" color=\"light\" /&gt;\n&lt;Badge label=\"999+\" color=\"dark\" /&gt;</code></pre> <pre><code>&lt;Badge label=\"Success\" color=\"success\" /&gt;\n&lt;Badge label=\"Warning\" color=\"warning\" /&gt;\n&lt;Badge label=\"Danger\" color=\"danger\" /&gt;\n&lt;Badge label=\"Help\" color=\"help\" /&gt;\n&lt;Badge label=\"Info\" color=\"info\" /&gt;\n&lt;Badge label=\"Note\" /&gt;\n&lt;Badge label=\"Light\" color=\"light\" /&gt;\n&lt;Badge label=\"Dark\" color=\"dark\" /&gt;</code></pre>"},{"location":"components/Badge/#outline","title":"Outline","text":"<p>Medium-emphasis priority to provide additional context in an unobtrusive way.</p> <pre><code>&lt;Badge priority=\"outline\" label=\"3\" color=\"success\" /&gt;\n&lt;Badge priority=\"outline\" label=\"4\" color=\"warning\" /&gt;\n&lt;Badge priority=\"outline\" label=\"5\" color=\"danger\" /&gt;\n&lt;Badge priority=\"outline\" label=\"10\" color=\"help\" /&gt;\n&lt;Badge priority=\"outline\" label=\"34\" color=\"info\" /&gt;\n&lt;Badge priority=\"outline\" label=\"99+\" /&gt;\n&lt;Badge priority=\"outline\" label=\"365\" color=\"light\" /&gt;\n&lt;Badge priority=\"outline\" label=\"999+\" color=\"dark\" /&gt;</code></pre> <pre><code>&lt;Badge priority=\"outline\" label=\"Success\" color=\"success\" /&gt;\n&lt;Badge priority=\"outline\" label=\"Warning\" color=\"warning\" /&gt;\n&lt;Badge priority=\"outline\" label=\"Danger\" color=\"danger\" /&gt;\n&lt;Badge priority=\"outline\" label=\"Help\" color=\"help\" /&gt;\n&lt;Badge priority=\"outline\" label=\"Info\" color=\"info\" /&gt;\n&lt;Badge priority=\"outline\" label=\"Note\" /&gt;\n&lt;Badge priority=\"outline\" label=\"Light\" color=\"light\" /&gt;\n&lt;Badge priority=\"outline\" label=\"Dark\" color=\"dark\" /&gt;</code></pre>"},{"location":"components/Badge/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the root <code>&lt;div&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;div&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/Badge/#api","title":"API","text":""},{"location":"components/Badge/#theming","title":"Theming","text":"<p>It's possible to adjust the theme of specific badge color variant. Naming convention looks as follows:</p> <p><code>--rui-Badge--&lt;PRIORITY&gt;--&lt;COLOR&gt;__&lt;PROPERTY&gt;</code></p> <p>Where:</p> <ul> <li><code>&lt;PRIORITY&gt;</code> is one of <code>filled</code> or <code>outline</code>,</li> <li><code>&lt;COLOR&gt;</code> is a value from supported   color collections   (check API to see which collections are supported),</li> <li><code>&lt;PROPERTY&gt;</code> is one of <code>color</code> (color of text) or <code>background-color</code> for the   filled priority, or just <code>color</code> for the outline priority.</li> </ul>"},{"location":"components/Button/","title":"Button","text":"<p>Buttons allow users to take actions.</p>"},{"location":"components/Button/#basic-usage","title":"Basic Usage","text":"<p>To implement the Button component, you need to import it first:</p> <pre><code>import { Button } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;Button label=\"My button\" /&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/Button/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Use short yet comprehensible labels to make buttons fit small screens.</p> </li> <li> <p>Since buttons are there to take actions, use a verb to make it obvious     what your buttons do.</p> </li> <li> <p>Don't overwhelm your UI with too many high-emphasis actions. There should     always be one but chances are that having more of them is not necessary.</p> </li> <li> <p>Ensure the button action is well recognazible across your target audience.     This is especially important when using the button with an icon only.</p> </li> </ul>"},{"location":"components/Button/#priorities","title":"Priorities","text":"<p>There are three visual priorities of buttons to choose from, from highest to lowest:</p> <ol> <li>filled</li> <li>outline</li> <li>flat</li> </ol> <p>All priorities are available in colors from supported color collections. Check API to see which collections are supported.</p>"},{"location":"components/Button/#filled","title":"Filled","text":"<p>The default, high-emphasis priority should be used for primary actions of your app. Use it sparingly but remember there should always be one on a screen.</p> <pre><code>&lt;Button label=\"Primary\" /&gt;\n&lt;Button label=\"Secondary\" color=\"secondary\" /&gt;\n&lt;Button label=\"Selected\" color=\"selected\" /&gt;\n&lt;Button label=\"Success\" color=\"success\" /&gt;\n&lt;Button label=\"Warning\" color=\"warning\" /&gt;\n&lt;Button label=\"Danger\" color=\"danger\" /&gt;\n&lt;Button label=\"Help\" color=\"help\" /&gt;\n&lt;Button label=\"Info\" color=\"info\" /&gt;\n&lt;Button label=\"Note\" color=\"note\" /&gt;\n&lt;docoff-placeholder dark inline&gt;\n  &lt;Button label=\"Light\" color=\"light\" /&gt;\n&lt;/docoff-placeholder&gt;\n&lt;Button label=\"Dark\" color=\"dark\" /&gt;</code></pre> <p>Default, unconfigured button comes in medium size, filled visual priority, and primary color variant.</p>"},{"location":"components/Button/#outline","title":"Outline","text":"<p>Medium-emphasis buttons. They are designed to contain actions that are important but not primary in your app.</p> <pre><code>&lt;Button priority=\"outline\" label=\"Primary\" /&gt;\n&lt;Button priority=\"outline\" label=\"Secondary\" color=\"secondary\" /&gt;\n&lt;Button priority=\"outline\" label=\"Selected\" color=\"selected\" /&gt;\n&lt;Button priority=\"outline\" label=\"Success\" color=\"success\" /&gt;\n&lt;Button priority=\"outline\" label=\"Warning\" color=\"warning\" /&gt;\n&lt;Button priority=\"outline\" label=\"Danger\" color=\"danger\" /&gt;\n&lt;Button priority=\"outline\" label=\"Help\" color=\"help\" /&gt;\n&lt;Button priority=\"outline\" label=\"Info\" color=\"info\" /&gt;\n&lt;Button priority=\"outline\" label=\"Note\" color=\"note\" /&gt;\n&lt;docoff-placeholder dark inline&gt;\n  &lt;Button priority=\"outline\" label=\"Light\" color=\"light\" /&gt;\n&lt;/docoff-placeholder&gt;\n&lt;Button priority=\"outline\" label=\"Dark\" color=\"dark\" /&gt;</code></pre>"},{"location":"components/Button/#flat","title":"Flat","text":"<p>Flat buttons are designed for less pronounced actions to help maintain focus on the content.</p> <pre><code>&lt;Button priority=\"flat\" label=\"Primary\" /&gt;\n&lt;Button priority=\"flat\" label=\"Secondary\" color=\"secondary\" /&gt;\n&lt;Button priority=\"flat\" label=\"Selected\" color=\"selected\" /&gt;\n&lt;Button priority=\"flat\" label=\"Success\" color=\"success\" /&gt;\n&lt;Button priority=\"flat\" label=\"Warning\" color=\"warning\" /&gt;\n&lt;Button priority=\"flat\" label=\"Danger\" color=\"danger\" /&gt;\n&lt;Button priority=\"flat\" label=\"Help\" color=\"help\" /&gt;\n&lt;Button priority=\"flat\" label=\"Info\" color=\"info\" /&gt;\n&lt;Button priority=\"flat\" label=\"Note\" color=\"note\" /&gt;\n&lt;docoff-placeholder dark inline&gt;\n  &lt;Button priority=\"flat\" label=\"Light\" color=\"light\" /&gt;\n&lt;/docoff-placeholder&gt;\n&lt;Button priority=\"flat\" label=\"Dark\" color=\"dark\" /&gt;</code></pre>"},{"location":"components/Button/#sizes","title":"Sizes","text":"<p>Aside from the default (medium) size, two additional sizes are available: small and large.</p> <pre><code>&lt;Button label=\"Small\" size=\"small\" /&gt;\n&lt;Button label=\"Medium\" /&gt;\n&lt;Button label=\"Large\" size=\"large\" /&gt;</code></pre> <p>Block buttons span the full width of a parent:</p> <pre><code>&lt;Button label=\"Block button\" block /&gt;</code></pre>"},{"location":"components/Button/#buttons-with-icons","title":"Buttons with Icons","text":"<p>To improve clarity or to draw attention to the action, icons can be added before or after the button's label.</p> <p>\ud83d\udc49 Please note there are no icons pre-packed in React UI. Visit Icons to see how to include them.</p> <pre><code>&lt;Button\n  label=\"Icon before label\"\n  beforeLabel={&lt;rui-icon icon=\"star\" /&gt;}\n/&gt;\n&lt;Button\n  label=\"Icon after label\"\n  afterLabel={&lt;rui-icon icon=\"star\" /&gt;}\n/&gt;</code></pre>"},{"location":"components/Button/#icon-buttons","title":"Icon Buttons","text":"<p>With a common and well-known icon, buttons can visually consist just of an icon. Label remains mandatory to keep the button accessible when using assistive technologies.</p> <p>\ud83d\udc49 Use <code>labelVisibility=\"xs\"</code> to make label always visible.</p> <pre><code>  &lt;Button\n    label=\"Icon button\"\n    labelVisibility=\"none\"\n    beforeLabel={&lt;rui-icon icon=\"pencil\" /&gt;}\n  /&gt;</code></pre> <p>Icon buttons can optionally enhance on a breakpoint of your choice and display label once you know there is enough room for it.</p> <p>\ud83d\udcd0 Try resizing your browser to see how label visibility changes.</p> <pre><code>  &lt;Button\n    label=\"Label always visible\"\n    labelVisibility=\"xs\"\n    beforeLabel={&lt;rui-icon icon=\"pencil\" /&gt;}\n  /&gt;\n  &lt;Button\n    label=\"Label visible from sm up\"\n    labelVisibility=\"sm\"\n    beforeLabel={&lt;rui-icon icon=\"pencil\" /&gt;}\n  /&gt;\n  &lt;Button\n    label=\"Label visible from md up\"\n    labelVisibility=\"md\"\n    beforeLabel={&lt;rui-icon icon=\"pencil\" /&gt;}\n  /&gt;\n  &lt;Button\n    label=\"Label visible from lg up\"\n    labelVisibility=\"lg\"\n    beforeLabel={&lt;rui-icon icon=\"pencil\" /&gt;}\n  /&gt;\n  &lt;Button\n    label=\"Label visible from xl up\"\n    labelVisibility=\"xl\"\n    beforeLabel={&lt;rui-icon icon=\"pencil\" /&gt;}\n  /&gt;</code></pre>"},{"location":"components/Button/#buttons-with-badges","title":"Buttons with Badges","text":"<p>A Badge can be added to buttons to provide additional information or to draw user's attention.</p> <pre><code>  &lt;Button\n    label=\"Badge before\"\n    beforeLabel={&lt;Badge label={'3'} priority=\"outline\" color=\"light\" /&gt;}\n  /&gt;\n  &lt;Button\n    label=\"Badge before, on top\"\n    startCorner={&lt;Badge label={'3'} /&gt;}\n  /&gt;\n  &lt;Button\n    label=\"Badge after, on top\"\n    endCorner={&lt;Badge label={'3'} /&gt;}\n    priority=\"outline\"\n  /&gt;\n  &lt;Button\n    label=\"Badge after\"\n    afterLabel={&lt;Badge label=\"new\" color=\"warning\" /&gt;}\n    priority=\"outline\"\n  /&gt;</code></pre>"},{"location":"components/Button/#icon-buttons-with-a-badge","title":"Icon Buttons with a Badge","text":"<p>Badges play nicely with icon buttons, too:</p> <pre><code>&lt;Button\n  label=\"Icon button with badge\"\n  labelVisibility=\"none\"\n  priority=\"outline\"\n  beforeLabel={&lt;rui-icon icon=\"warning-sign\" /&gt;}\n  startCorner={&lt;Badge label={'3'} color=\"warning\" /&gt;}\n/&gt;\n&lt;Button\n  label=\"Icon button with badge\"\n  labelVisibility=\"md\"\n  priority=\"outline\"\n  beforeLabel={&lt;rui-icon icon=\"warning-sign\" /&gt;}\n  startCorner={&lt;Badge label={'3'} color=\"danger\" /&gt;}\n/&gt;</code></pre>"},{"location":"components/Button/#states","title":"States","text":""},{"location":"components/Button/#disabled-state","title":"Disabled State","text":"<p>Disabled state makes the action unavailable.</p> <pre><code>&lt;Button label=\"Disabled filled button\" disabled /&gt;\n&lt;Button label=\"Disabled outline button\" priority=\"outline\" disabled /&gt;\n&lt;Button label=\"Disabled flat button\" priority=\"flat\" disabled /&gt;</code></pre>"},{"location":"components/Button/#feedback-state","title":"Feedback State","text":"<p>When user's action triggers an asynchronous process on background, the button's feedback state (not to be mistaken with feedback colors) can be indicated by showing an icon. The icon replaces button's label while retaining original dimensions of the button. Buttons in feedback state are automatically disabled to prevent unwanted interaction.</p> <p>Filled buttons in feedback state:</p> <pre><code>&lt;Button\n  label=\"Success\"\n  color=\"success\"\n  feedbackIcon={&lt;rui-icon icon=\"success\" /&gt;}\n/&gt;\n&lt;Button\n  label=\"Success\"\n  labelVisibility=\"none\"\n  color=\"success\"\n  feedbackIcon={&lt;rui-icon icon=\"success\" /&gt;}\n  endCorner={&lt;Badge color=\"danger\" label={'3'} /&gt;}\n/&gt;\n&lt;docoff-placeholder dark inline&gt;\n  &lt;Button\n    label=\"Light\"\n    color=\"light\"\n    feedbackIcon={&lt;rui-icon icon=\"success\" /&gt;}\n  /&gt;\n&lt;/docoff-placeholder&gt;\n&lt;Button\n  label=\"Dark\"\n  color=\"dark\"\n  feedbackIcon={&lt;rui-icon icon=\"success\" /&gt;}\n/&gt;\n&lt;Button\n  label=\"Primary\"\n  feedbackIcon={(\n    &lt;span className=\"d-inline-flex animation-spin-counterclockwise\"&gt;\n      &lt;rui-icon icon=\"loading\" /&gt;\n    &lt;/span&gt;\n  )}\n/&gt;</code></pre> <p>Outline buttons in feedback state:</p> <pre><code>&lt;Button\n  label=\"Success\"\n  priority=\"outline\"\n  color=\"success\"\n  feedbackIcon={&lt;rui-icon icon=\"success\" /&gt;}\n/&gt;\n&lt;Button\n  label=\"Success\"\n  labelVisibility=\"none\"\n  priority=\"outline\"\n  color=\"success\"\n  feedbackIcon={&lt;rui-icon icon=\"success\" /&gt;}\n  endCorner={&lt;Badge color=\"danger\" label={'3'} /&gt;}\n/&gt;\n&lt;docoff-placeholder dark inline&gt;\n  &lt;Button\n    label=\"Light\"\n    priority=\"outline\"\n    color=\"light\"\n    feedbackIcon={&lt;rui-icon icon=\"success\" /&gt;}\n  /&gt;\n&lt;/docoff-placeholder&gt;\n&lt;Button\n  label=\"Dark\"\n  priority=\"outline\"\n  color=\"dark\"\n  feedbackIcon={&lt;rui-icon icon=\"success\" /&gt;}\n/&gt;\n&lt;Button\n  label=\"Primary\"\n  priority=\"outline\"\n  feedbackIcon={(\n    &lt;span className=\"d-inline-flex animation-spin-counterclockwise\"&gt;\n      &lt;rui-icon icon=\"loading\" /&gt;\n    &lt;/span&gt;\n  )}\n/&gt;</code></pre> <p>Flat buttons in feedback state:</p> <pre><code>&lt;Button\n  label=\"Success\"\n  priority=\"flat\"\n  color=\"success\"\n  feedbackIcon={&lt;rui-icon icon=\"success\" /&gt;}\n/&gt;\n&lt;Button\n  label=\"Success\"\n  labelVisibility=\"none\"\n  priority=\"flat\"\n  color=\"success\"\n  feedbackIcon={&lt;rui-icon icon=\"success\" /&gt;}\n  endCorner={&lt;Badge color=\"danger\" label={'3'} /&gt;}\n/&gt;\n&lt;docoff-placeholder dark inline&gt;\n  &lt;Button\n    label=\"Light\"\n    priority=\"flat\"\n    color=\"light\"\n    feedbackIcon={&lt;rui-icon icon=\"success\" /&gt;}\n  /&gt;\n&lt;/docoff-placeholder&gt;\n&lt;Button\n  label=\"Dark\"\n  priority=\"flat\"\n  color=\"dark\"\n  feedbackIcon={&lt;rui-icon icon=\"success\" /&gt;}\n/&gt;\n&lt;Button\n  label=\"Primary\"\n  priority=\"flat\"\n  feedbackIcon={(\n    &lt;span className=\"d-inline-flex animation-spin-counterclockwise\"&gt;\n      &lt;rui-icon icon=\"loading\" /&gt;\n    &lt;/span&gt;\n  )}\n/&gt;</code></pre> <p>\ud83d\udc49 Visit the CSS Helpers section to see how the icon animation is made.</p>"},{"location":"components/Button/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the root <code>&lt;button&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;button&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/Button/#forwarding-ref","title":"Forwarding ref","text":"<p>If you provide ref, it is forwarded to the native HTML <code>&lt;button&gt;</code> element.</p>"},{"location":"components/Button/#api","title":"API","text":""},{"location":"components/Button/#theming","title":"Theming","text":""},{"location":"components/Button/#common-theming-options","title":"Common Theming Options","text":"Custom Property Description <code>--rui-Button__font-weight</code> Font weight <code>--rui-Button__text-transform</code> Text transform, e.g. uppercase or small-caps <code>--rui-Button__letter-spacing</code> Spacing between letters <code>--rui-Button__border-width</code> Border width <code>--rui-Button__border-radius</code> Corner radius"},{"location":"components/Button/#theming-priorities-and-color-variants","title":"Theming Priorities and Color Variants","text":"<p>It's possible to adjust the theme for specific priority, color variant, and state. Naming convention looks as follows:</p> <p><code>--rui-Button--&lt;PRIORITY&gt;--&lt;COLOR&gt;--&lt;INTERACTION STATE&gt;__&lt;PROPERTY&gt;</code></p> <p>Where:</p> <ul> <li><code>&lt;PRIORITY&gt;</code> is one of <code>filled</code>, <code>outline</code>, or <code>flat</code> (see   Priorities and API),</li> <li><code>&lt;COLOR&gt;</code> is a value from supported   color collections   (check color variants of each priority and API to see   which collections are supported),</li> <li><code>&lt;INTERACTION STATE&gt;</code> is one of <code>default</code>, <code>hover</code>, <code>active</code>, or <code>disabled</code>   (the last one being optional),</li> <li><code>&lt;PROPERTY&gt;</code> is one of:<ul> <li><code>color</code>, <code>border-color</code>, <code>background</code>, or <code>box-shadow</code> for the <code>filled</code>   priority,</li> <li><code>color</code>, <code>border-color</code>, or <code>background</code> for the <code>outline</code> priority,</li> <li><code>color</code> or <code>background</code> for the <code>flat</code> priority.</li> </ul> </li> </ul>"},{"location":"components/Button/#theming-sizes","title":"Theming Sizes","text":"<p>Available sizes can be adjusted as follows:</p> <p><code>--rui-Button--&lt;SIZE&gt;__&lt;PROPERTY&gt;</code></p> <p>Where:</p> <ul> <li><code>&lt;SIZE&gt;</code> is one of <code>small</code>, <code>medium</code>, or <code>large</code> (see Sizes and   API)</li> <li><code>&lt;PROPERTY&gt;</code> is one of <code>height</code>, <code>padding-x</code>, <code>padding-y</code>, or <code>font-size</code></li> </ul> <p>\ud83d\udc49 Button sizes are linked to box field sizes sizes so they align nicely when placed in row.</p>"},{"location":"components/Button/#example-theme","title":"Example Theme","text":"<pre><code>&lt;style type=\"text/css\"&gt;\n  {`\n  .example {\n    margin: 0;\n  }\n\n  .example &gt; * {\n    margin: 4px;\n  }\n\n  .example--themed-buttons {\n    --rui-Button__font-weight: bold;\n    --rui-Button__letter-spacing: 0.05em;\n    --rui-Button__text-transform: uppercase;\n    --rui-Button__border-radius: 0;\n    --rui-Button--filled--primary--default__box-shadow:\n      0.1em 0.1em 0.5em rgba(0, 0, 0, 0.3);\n    --rui-Button--medium__height: 3rem;\n    --rui-Button--medium__padding-x: 1.25rem;\n    --rui-Button--medium__padding-y: 0.25rem;\n  }\n  `}\n&lt;/style&gt;\n&lt;Button label=\"Default filled button\" /&gt;\n&lt;Button label=\"Default outline button\" priority=\"outline\" /&gt;\n&lt;div className=\"example example--themed-buttons\"&gt;\n  &lt;Button label=\"Themed filled button\" /&gt;\n  &lt;Button label=\"Themed outline button\" priority=\"outline\" /&gt;\n&lt;/div&gt;</code></pre>"},{"location":"components/Button/#theming-disabled-state","title":"Theming Disabled State","text":"<p>The <code>disabled</code> state offers a bit more of design flexibility compared to other interaction states. Firstly, there are a few common options for this state:</p> Custom Property Description <code>--rui-Button--disabled__opacity</code> Opacity of disabled buttons <code>--rui-Button--disabled__cursor</code> Cursor to show on hovering disabled buttons <p>Secondly, it can be further adjusted using priority and color variant specific options for the disabled state:</p> <p><code>--rui-Button--&lt;PRIORITY&gt;--&lt;COLOR&gt;--disabled__&lt;PROPERTY&gt;</code></p> <p>Undefined theming options are inherited from the <code>default</code> interaction state.</p> <p>Example:</p> <pre><code>&lt;style type=\"text/css\"&gt;\n  {`\n  .example {\n    margin: 0;\n  }\n\n  .example &gt; * {\n    margin: 4px;\n  }\n\n  .example--themed-disabled-buttons {\n    --rui-Button__border-radius: 0;\n    --rui-Button--disabled__opacity: 0.4;\n    --rui-Button--disabled__cursor: default;\n    --rui-Button--filled--primary--disabled__color: slate;\n    --rui-Button--filled--primary--disabled__border-color: silver;\n    --rui-Button--filled--primary--disabled__background: silver;\n    --rui-Button--filled--success--disabled__color: slate;\n    --rui-Button--filled--success--disabled__border-color: silver;\n    --rui-Button--filled--success--disabled__background: silver;\n    --rui-Button--outline--primary--disabled__color: slate;\n    --rui-Button--outline--primary--disabled__border-color: silver;\n  }\n  `}\n&lt;/style&gt;\n&lt;Button\n  label=\"Default filled primary button, disabled\"\n  disabled\n/&gt;\n&lt;Button\n  label=\"Default filled success button, disabled\"\n  color=\"success\"\n  disabled\n/&gt;\n&lt;Button\n  label=\"Default outline primary button, disabled\"\n  priority=\"outline\"\n  disabled\n/&gt;\n&lt;div className=\"example example--themed-disabled-buttons\"&gt;\n  &lt;Button\n    label=\"Themed filled primary button, disabled\"\n    disabled\n  /&gt;\n  &lt;Button\n    label=\"Themed filled success button, disabled\"\n    color=\"success\"\n    disabled\n  /&gt;\n  &lt;Button\n    label=\"Themed outline primary button, disabled\"\n    priority=\"outline\"\n    disabled\n  /&gt;\n&lt;/div&gt;</code></pre>"},{"location":"components/Button/#theming-feedback-state","title":"Theming Feedback State","text":"<p>Similarly to disabled state, opacity and cursor can be set for buttons in feedback state.</p> Custom Property Description <code>--rui-Button--feedback__opacity</code> Opacity of buttons in feedback state <code>--rui-Button--feedback__cursor</code> Cursor to show on hovering buttons in feedback state"},{"location":"components/ButtonGroup/","title":"ButtonGroup","text":"<p>ButtonGroup visually groups related buttons together.</p>"},{"location":"components/ButtonGroup/#basic-usage","title":"Basic Usage","text":"<p>To implement the ButtonGroup component, you need to import it first:</p> <pre><code>import { ButtonGroup } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;ButtonGroup&gt;\n  &lt;Button label=\"Week\" /&gt;\n  &lt;Button label=\"Month\" /&gt;\n  &lt;Button label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/ButtonGroup/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Use button group to group related actions that a user can take. Buttons   should not be grouped just to save space on the screen.</p> </li> <li> <p>Mixing multiple button priorities and some other properties within a   button group is not allowed. The priority can only be   set for all buttons in the group at once.</p> </li> <li> <p>In most use cases, secondary action color is probably the best option for   buttons in a group as it works good with the colors of the selected state.</p> </li> <li> <p>Use short labels or icons so the buttons can fit small screens.</p> </li> <li> <p>For toggling between on/off states, use rather the   Toggle component.</p> </li> <li> <p>For switching between options in a form that needs to be submitted, use rather   the SelectField or   Radio components.</p> </li> <li> <p>In the background, ButtonGroup uses the <code>fieldset</code> element. Not   only it improves the accessibility of the group, it also allows you to make   use of its built-in features like disabling all nested inputs or pairing the   group with a form outside. Consult the MDN docs to learn more.</p> </li> <li> <p>Be careful with using <code>startCorner</code> and <code>endCorner</code> options for grouped   buttons. Overflowing elements may cause undesired interaction problems.</p> </li> </ul>"},{"location":"components/ButtonGroup/#shared-properties","title":"Shared Properties","text":"<p>You can set the following properties directly on ButtonGroup to be shared for all buttons inside the group:</p> <ul> <li><code>size</code>,</li> <li><code>priority</code>,</li> <li><code>disabled</code> state,</li> <li>and <code>block</code> width.</li> </ul> <p>These properties are then passed over to individual buttons. At the same time, they cannot be overridden on the buttons' level. While (in theory) technically possible, from the design point of view it's undesirable to group buttons of totally different types or sizes.</p>"},{"location":"components/ButtonGroup/#priorities","title":"Priorities","text":"<p>There are three visual priorities of buttons which exactly copy the priorities of the Button component:</p> <ol> <li>filled</li> <li>outline</li> <li>flat</li> </ol> <p>\ud83d\udc49 To avoid undesired combinations, the visual priority of the button group cannot be overridden on the Button level.</p>"},{"location":"components/ButtonGroup/#filled","title":"Filled","text":"<p>The default, high-emphasis priority should be used for primary actions of your app.</p> <pre><code>&lt;ButtonGroup&gt;\n  &lt;Button color=\"secondary\" label=\"Week\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;</code></pre>"},{"location":"components/ButtonGroup/#outline","title":"Outline","text":"<p>Medium-emphasis buttons to contain actions that are important but not primary in your app.</p> <pre><code>&lt;ButtonGroup priority=\"outline\"&gt;\n  &lt;Button color=\"secondary\" label=\"Week\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;</code></pre>"},{"location":"components/ButtonGroup/#flat","title":"Flat","text":"<p>Flat buttons are designed for less pronounced actions to help maintain focus on the content.</p> <pre><code>&lt;ButtonGroup priority=\"flat\"&gt;\n  &lt;Button color=\"secondary\" label=\"Week\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;</code></pre>"},{"location":"components/ButtonGroup/#sizes","title":"Sizes","text":"<p>All existing button sizes are also available on the button group level: small, medium, and large.</p> <pre><code>&lt;ButtonGroup size=\"small\"&gt;\n  &lt;Button color=\"secondary\" label=\"Week\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;\n&lt;ButtonGroup&gt;\n  &lt;Button color=\"secondary\" label=\"Week\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;\n&lt;ButtonGroup size=\"large\"&gt;\n  &lt;Button color=\"secondary\" label=\"Week\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;</code></pre> <p>Block button groups span the full width of a parent:</p> <pre><code>&lt;ButtonGroup block&gt;\n  &lt;Button color=\"secondary\" label=\"Week\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;</code></pre>"},{"location":"components/ButtonGroup/#states","title":"States","text":""},{"location":"components/ButtonGroup/#disabled-state","title":"Disabled State","text":"<p>Disables all buttons inside the group.</p> <pre><code>&lt;ButtonGroup disabled&gt;\n  &lt;Button color=\"secondary\" label=\"Week\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;\n&lt;ButtonGroup priority=\"outline\" disabled&gt;\n  &lt;Button color=\"secondary\" label=\"Week\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;\n&lt;ButtonGroup priority=\"flat\" disabled&gt;\n  &lt;Button color=\"secondary\" label=\"Week\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;</code></pre>"},{"location":"components/ButtonGroup/#feedback-state","title":"Feedback State","text":"<p>When user's action triggers an asynchronous process on background, feedback state of individual buttons can be indicated by showing an icon.</p> <pre><code>&lt;ButtonGroup&gt;\n  &lt;Button\n    color=\"success\"\n    label=\"Week\"\n    feedbackIcon={&lt;rui-icon icon=\"success\" /&gt;}\n  /&gt;\n  &lt;Button color=\"secondary\"label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\"label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;\n&lt;ButtonGroup priority=\"outline\"&gt;\n  &lt;Button\n    color=\"success\"\n    label=\"Week\"\n    feedbackIcon={&lt;rui-icon icon=\"success\" /&gt;}\n  /&gt;\n  &lt;Button color=\"secondary\"label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\"label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;\n&lt;ButtonGroup priority=\"flat\"&gt;\n  &lt;Button\n    color=\"success\"\n    label=\"Week\"\n    feedbackIcon={&lt;rui-icon icon=\"success\" /&gt;}\n  /&gt;\n  &lt;Button color=\"secondary\"label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\"label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;</code></pre>"},{"location":"components/ButtonGroup/#selected-state","title":"Selected State","text":"<p>To highlight the selected option, just apply the selected color variant for the desired item.</p> <pre><code>&lt;ButtonGroup&gt;\n  &lt;Button color=\"selected\" label=\"Week\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;\n&lt;ButtonGroup priority=\"outline\"&gt;\n  &lt;Button color=\"selected\" label=\"Week\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;\n&lt;ButtonGroup priority=\"flat\"&gt;\n  &lt;Button color=\"selected\" label=\"Week\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Month\" /&gt;\n  &lt;Button color=\"secondary\" label=\"Year\" /&gt;\n&lt;/ButtonGroup&gt;</code></pre>"},{"location":"components/ButtonGroup/#accessibility","title":"Accessibility","text":"<p>You can improve the accessibility of your ButtonGroup by linking it to a label and communicating the state of individual options.</p> <pre><code>&lt;span id=\"period-label\"&gt;Period:&lt;/span&gt;\n&lt;ButtonGroup aria-labelledby=\"period-label\"&gt;\n  &lt;Button color=\"selected\" label=\"Week\" aria-pressed /&gt;\n  &lt;Button color=\"secondary\" label=\"Month\" aria-pressed={false} /&gt;\n  &lt;Button color=\"secondary\" label=\"Year\" aria-pressed={false} /&gt;\n&lt;/ButtonGroup&gt;</code></pre>"},{"location":"components/ButtonGroup/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the root <code>&lt;div&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;div&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/ButtonGroup/#api","title":"API","text":""},{"location":"components/ButtonGroup/#theming","title":"Theming","text":"Custom Property Description <code>--rui-ButtonGroup__inner-border-radius</code> Inner border radius of buttons <code>--rui-ButtonGroup--filled__gap</code> Gap between <code>filled</code> buttons <code>--rui-ButtonGroup--filled__separator__width</code> Separator width for <code>filled</code> buttons <code>--rui-ButtonGroup--filled__separator__color</code> Separator color for <code>filled</code> buttons <code>--rui-ButtonGroup--outline__gap</code> Gap between <code>outline</code> buttons <code>--rui-ButtonGroup--outline__separator__width</code> Separator width for <code>outline</code> buttons <code>--rui-ButtonGroup--outline__separator__color</code> Separator color for <code>outline</code> buttons <code>--rui-ButtonGroup--flat__gap</code> Gap between <code>flat</code> buttons <code>--rui-ButtonGroup--flat__separator__width</code> Separator width for <code>flat</code> buttons <code>--rui-ButtonGroup--flat__separator__color</code> Separator color for <code>flat</code> buttons"},{"location":"components/Card/","title":"Card","text":"<p>Cards contain content and actions about a single subject.</p>"},{"location":"components/Card/#basic-usage","title":"Basic Usage","text":"<p>To implement the Card component, you need to import at least Card and CardBody components:</p> <pre><code>import { Card, CardBody } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;Card&gt;\n  &lt;CardBody&gt;\n    Hello!\n  &lt;/CardBody&gt;\n&lt;/Card&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/Card/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Default card is designed for non-white background. You may want to either   use the raised variant or   customize the default appearance to make the   card stand out on white surfaces.</p> </li> <li> <p>Use optional CardBody and CardFooter components to   provide your content with expected spacing.</p> </li> <li> <p>Use medium or low-emphasis buttons when there are more cards, e.g. in a   grid. It will help you keep the UI clean and easy to scan.</p> </li> <li> <p>Card, or Paper? Card is a versatile surface for displaying content.   However, there is also the Paper component. While Card   is designed for displaying items (and also supports more visual options),   Paper is usually used to hold larger content areas like lists, grids, or   forms.</p> </li> </ul>"},{"location":"components/Card/#composition","title":"Composition","text":"<p>Card is decomposed into the following components:</p> <ul> <li>Card<ul> <li>CardBody</li> <li>CardFooter</li> </ul> </li> </ul> <p>Aside from the CardBody element, you can add a CardFooter to better separate your card's actions from the rest of the content.</p> <p>Import all necessary components:</p> <pre><code>import { Card, CardBody, CardFooter } from '@react-ui-org/react-ui';</code></pre> <p>And use them:</p> <pre><code>&lt;Card&gt;\n  &lt;CardBody&gt;\n    Hello! I&amp;apos;m card with footer.\n  &lt;/CardBody&gt;\n  &lt;CardFooter&gt;\n    &lt;Button label=\"Read more\" priority=\"outline\" /&gt;\n  &lt;/CardFooter&gt;\n&lt;/Card&gt;</code></pre> <p>\ud83d\udc49 CardFooter is required in case you need to align the actions of multiple cards with varying height of content.</p>"},{"location":"components/Card/#raised-card","title":"Raised Card","text":"<p>Add optional shadow to lift the card above surface.</p> <pre><code>&lt;Card raised&gt;\n  &lt;CardBody&gt;\n    Hello! I&amp;apos;m raised card with footer.\n  &lt;/CardBody&gt;\n  &lt;CardFooter&gt;\n    &lt;Button label=\"Read more\" priority=\"outline\" /&gt;\n  &lt;/CardFooter&gt;\n&lt;/Card&gt;</code></pre>"},{"location":"components/Card/#dense-card","title":"Dense Card","text":"<p>Use a dense card when you need to save space on screen. Other elements in the card should be also smaller to keep the card contained and easy to scan.</p> <pre><code>&lt;Card dense raised&gt;\n  &lt;CardBody&gt;\n    &lt;small&gt;Hello! I&amp;apos;m dense card. Everything is smaller here.&lt;/small&gt;\n  &lt;/CardBody&gt;\n  &lt;CardFooter&gt;\n    &lt;Button label=\"Read more\" priority=\"outline\" size=\"small\" /&gt;\n  &lt;/CardFooter&gt;\n&lt;/Card&gt;</code></pre>"},{"location":"components/Card/#scrollable-card","title":"Scrollable Card","text":"<p>Combine Card with ScrollView to enable scrolling for card content.</p> <pre><code>&lt;div\n  style={{\n    display: 'flex',\n    height: '200px',\n  }}\n&gt;\n  &lt;Card raised&gt;\n    &lt;ScrollView&gt;\n      &lt;CardBody&gt;\n        Hello! I&amp;apos;m scrollable card.\n        Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo\n        ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis\n        dis parturient montes, nascetur ridiculus mus. Donec quam felis,\n        ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa\n        quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget,\n        arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.\n        Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras\n        dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend\n        tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac,\n        enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus.\n        Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean\n        imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper\n        ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus\n        eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing\n        sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar,\n        hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus.\n      &lt;/CardBody&gt;\n    &lt;/ScrollView&gt;\n  &lt;/Card&gt;\n&lt;/div&gt;</code></pre>"},{"location":"components/Card/#color-variants","title":"Color Variants","text":"<p>To cover all possible needs of your project, Card is available in colors from Feedback color collection.</p> <pre><code>&lt;Card color=\"success\"&gt;\n  &lt;CardBody&gt;\n    Hello! I&amp;apos;m success variant of card.\n    {' '}\n    &lt;TextLink href=\"/\" label=\"This is a link\" /&gt;\n  &lt;/CardBody&gt;\n  &lt;CardFooter&gt;\n    &lt;Button label=\"Read more\" priority=\"outline\" color=\"success\" /&gt;\n  &lt;/CardFooter&gt;\n&lt;/Card&gt;\n&lt;Card color=\"warning\"&gt;\n  &lt;CardBody&gt;\n    Hello! I&amp;apos;m warning variant of card.\n    {' '}\n    &lt;TextLink href=\"/\" label=\"This is a link\" /&gt;\n  &lt;/CardBody&gt;\n  &lt;CardFooter&gt;\n    &lt;Button label=\"Read more\" priority=\"outline\" color=\"warning\" /&gt;\n  &lt;/CardFooter&gt;\n&lt;/Card&gt;\n&lt;Card color=\"danger\"&gt;\n  &lt;CardBody&gt;\n    Hello! I&amp;apos;m danger variant of card.\n    {' '}\n    &lt;TextLink href=\"/\" label=\"This is a link\" /&gt;\n  &lt;/CardBody&gt;\n  &lt;CardFooter&gt;\n    &lt;Button label=\"Read more\" priority=\"outline\" color=\"danger\" /&gt;\n  &lt;/CardFooter&gt;\n&lt;/Card&gt;\n&lt;Card color=\"help\"&gt;\n  &lt;CardBody&gt;\n    Hello! I&amp;apos;m help variant of card.\n    {' '}\n    &lt;TextLink href=\"/\" label=\"This is a link\" /&gt;\n  &lt;/CardBody&gt;\n  &lt;CardFooter&gt;\n    &lt;Button label=\"Read more\" priority=\"outline\" color=\"help\" /&gt;\n  &lt;/CardFooter&gt;\n&lt;/Card&gt;\n&lt;Card color=\"info\"&gt;\n  &lt;CardBody&gt;\n    Hello! I&amp;apos;m info variant of card.\n    {' '}\n    &lt;TextLink href=\"/\" label=\"This is a link\" /&gt;\n  &lt;/CardBody&gt;\n  &lt;CardFooter&gt;\n    &lt;Button label=\"Read more\" priority=\"outline\" color=\"info\" /&gt;\n  &lt;/CardFooter&gt;\n&lt;/Card&gt;\n&lt;Card color=\"note\"&gt;\n  &lt;CardBody&gt;\n    Hello! I&amp;apos;m note variant of card.\n    {' '}\n    &lt;TextLink href=\"/\" label=\"This is a link\" /&gt;\n  &lt;/CardBody&gt;\n  &lt;CardFooter&gt;\n    &lt;Button label=\"Read more\" priority=\"outline\" color=\"note\" /&gt;\n  &lt;/CardFooter&gt;\n&lt;/Card&gt;</code></pre>"},{"location":"components/Card/#states","title":"States","text":""},{"location":"components/Card/#disabled-state","title":"Disabled State","text":"<p>Entire card can appear disabled. However, you'll still need to manually disable its interactive elements to disallow user's interaction.</p> <pre><code>&lt;Card disabled&gt;\n  &lt;CardBody&gt;\n    Hello! I&amp;apos;m a disabled card.\n    {' '}\n    &lt;TextLink href=\"/\" label=\"This is a link\" /&gt;\n  &lt;/CardBody&gt;\n  &lt;CardFooter&gt;\n    &lt;Button label=\"Read more\" priority=\"outline\" disabled /&gt;\n  &lt;/CardFooter&gt;\n&lt;/Card&gt;\n&lt;Card disabled raised&gt;\n  &lt;CardBody&gt;\n    Hello! I&amp;apos;m a disabled raised card.\n    {' '}\n    &lt;TextLink href=\"/\" label=\"This is a link\" /&gt;\n  &lt;/CardBody&gt;\n  &lt;CardFooter&gt;\n    &lt;Button label=\"Read more\" priority=\"outline\" disabled /&gt;\n  &lt;/CardFooter&gt;\n&lt;/Card&gt;\n&lt;Card color=\"success\" disabled&gt;\n  &lt;CardBody&gt;\n    Hello! I&amp;apos;m a disabled success variant of card.\n    {' '}\n    &lt;TextLink href=\"/\" label=\"This is a link\" /&gt;\n  &lt;/CardBody&gt;\n  &lt;CardFooter&gt;\n    &lt;Button label=\"Read more\" priority=\"outline\" color=\"success\" disabled /&gt;\n  &lt;/CardFooter&gt;\n&lt;/Card&gt;</code></pre>"},{"location":"components/Card/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the root <code>&lt;div&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;div&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/Card/#api","title":"API","text":""},{"location":"components/Card/#cardbody","title":"CardBody","text":"<p>Space your content with CardBody. See Composition for all details.</p> <p></p>"},{"location":"components/Card/#cardfooter","title":"CardFooter","text":"<p>Separate your card actions with CardFooter. See Composition for all details.</p> <p></p>"},{"location":"components/Card/#theming","title":"Theming","text":""},{"location":"components/Card/#common-theming-options","title":"Common Theming Options","text":"Custom Property Description <code>--rui-Card__padding</code> Padding shared by card header, body and footer <code>--rui-Card__border-width</code> Border width <code>--rui-Card__border-color</code> Border color <code>--rui-Card__border-radius</code> Corner radius <code>--rui-Card__background-color</code> Card background color <code>--rui-Card--dense__padding</code> Padding of dense card <code>--rui-Card--raised__box-shadow</code> Box shadow of raised card <code>--rui-Card--disabled__background-color</code> Card background color in disabled state <code>--rui-Card--disabled__opacity</code> Card opacity in disabled state <code>--rui-Card--disabled__border-width</code> Card border width in disabled state <code>--rui-Card--disabled__border-color</code> Card border color in disabled state"},{"location":"components/Card/#theming-variants","title":"Theming Variants","text":"<p>It's possible to adjust the theme of specific color variant. Naming convention looks as follows:</p> <p><code>--rui-Card--&lt;COLOR&gt;__&lt;PROPERTY&gt;</code></p> <p>Where:</p> <ul> <li><code>&lt;COLOR&gt;</code> is a value from supported   color collections   (check color variants and API to see which   collections are supported),</li> <li><code>&lt;PROPERTY&gt;</code> is one of <code>color</code> (color of text), <code>border-color</code>, or   <code>background-color</code>.</li> </ul>"},{"location":"components/CheckboxField/","title":"CheckboxField","text":"<p>CheckboxField allows users to select one or more options from a set.</p>"},{"location":"components/CheckboxField/#basic-usage","title":"Basic Usage","text":"<p>To implement the CheckboxField component, you need to import it first:</p> <pre><code>import { CheckboxField } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>React.createElement(() =&gt; {\n  const [agree, setAgree] = React.useState(true);\n  return (\n    &lt;CheckboxField\n      checked={agree}\n      label={(\n          &lt;&gt;\n            I have read and agree with\n            {' '}\n            &lt;TextLink href=\"#\" label=\"terms and conditions\" /&gt;\n          &lt;/&gt;\n        )}\n      onChange={() =&gt; setAgree(!agree)}\n    /&gt;\n  );\n});</code></pre> <p>See API for all available options.</p>"},{"location":"components/CheckboxField/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Use the CheckboxField when there are lists of options and the user may   select any number of choices, including zero, one, or several. For   selecting just a single option from the list, use either the   Radio or SelectField   component.</p> </li> <li> <p>Use the CheckboxField for boolean (true/false) input in forms that require   to be confirmed by a button to become active. To toggle things on or off   with an immediate effect (without confirmation), use rather the   Toggle component.</p> </li> <li> <p>Use positive wording for the checkbox label, so that it's clear what will   happen when the user turns on the checkbox. Avoid negations such as \u201cDon't   send me any emails\u201d which would mean that the user needs to turn the   checkbox on in order for something not to happen.</p> </li> <li> <p>Use text labels unless it is necessary to wrap text label into   Popover-like to component to provide additional info about the field.</p> </li> <li> <p>Only make the CheckboxField's label invisible when there is another visual   clue to guide users through toggling the input.</p> </li> <li> <p>When a short label is not enough, use help texts to guide users before   they enter anything.</p> </li> <li> <p>Use clear, calm error messages when there's a problem with what they   entered.</p> </li> <li> <p>Visually present groups of choices as groups, and clearly separate them   from other groups on the same page.</p> </li> </ul> <p>\ud83d\udcd6 Read more about checkboxes and radios at Nielsen Norman Group.</p>"},{"location":"components/CheckboxField/#help-text","title":"Help Text","text":"<p>You may provide an additional help text to clarify what will be the impact of turning the checkbox on or off.</p> <pre><code>React.createElement(() =&gt; {\n  const [getNewsletter, setGetNewsletter] = React.useState(true);\n  return (\n    &lt;CheckboxField\n      checked={getNewsletter}\n      helpText=\"We will not bother you more than once a month, we promise!\"\n      label=\"Send me newsletter\"\n      onChange={() =&gt; setGetNewsletter(!getNewsletter)}\n    /&gt;\n  );\n});</code></pre>"},{"location":"components/CheckboxField/#label-options","title":"Label Options","text":"<p>In some cases, it may be convenient to visually hide the checkbox label. The label remains accessible to assistive technologies.</p> <pre><code>React.createElement(() =&gt; {\n  const [checked, setChecked] = React.useState(true);\n  return (\n    &lt;CheckboxField\n      checked={checked}\n      isLabelVisible={false}\n      label=\"You cannot see this\"\n      onChange={() =&gt; setChecked(!checked)}\n    /&gt;\n  );\n});</code></pre> <p>It's also possible to display label before input:</p> <pre><code>React.createElement(() =&gt; {\n  const [checked, setChecked] = React.useState(true);\n  return (\n    &lt;CheckboxField\n      checked={checked}\n      label=\"Label precedes input\"\n      labelPosition=\"before\"\n      onChange={() =&gt; setChecked(!checked)}\n    /&gt;\n  );\n});</code></pre>"},{"location":"components/CheckboxField/#states","title":"States","text":""},{"location":"components/CheckboxField/#validation-states","title":"Validation States","text":"<p>Validation states visually present the result of validation of the input. You should always provide validation message for states other than valid so users know what happened and what action they should take or what options they have.</p> <pre><code>React.createElement(() =&gt; {\n  const [agree, setAgree] = React.useState(true);\n  return (\n    &lt;&gt;\n      &lt;CheckboxField\n        checked={agree}\n        label={(\n          &lt;&gt;\n            I have read and agree with\n            {' '}\n            &lt;TextLink href=\"#\" label=\"terms and conditions\" /&gt;\n          &lt;/&gt;\n        )}\n        onChange={() =&gt; setAgree(!agree)}\n        validationState=\"valid\"\n      /&gt;\n      &lt;CheckboxField\n        checked={agree}\n        label={(\n          &lt;&gt;\n            I have read and agree with\n            {' '}\n            &lt;TextLink href=\"#\" label=\"terms and conditions\" /&gt;\n          &lt;/&gt;\n        )}\n        onChange={() =&gt; setAgree(!agree)}\n        validationState=\"warning\"\n        validationText={(\n          &lt;&gt;\n            Please wait 10 minutes until we verify your data.\n            {' '}\n            &lt;TextLink href=\"#\" label=\"Cancel\" /&gt;\n          &lt;/&gt;\n        )}\n      /&gt;\n      &lt;CheckboxField\n        checked={agree}\n        label={(\n          &lt;&gt;\n            I have read and agree with\n            {' '}\n            &lt;TextLink href=\"#\" label=\"terms and conditions\" /&gt;\n          &lt;/&gt;\n        )}\n        onChange={() =&gt; setAgree(!agree)}\n        required\n        validationState=\"invalid\"\n        validationText=\"You must agree to be able to proceed.\"\n      /&gt;\n    &lt;/&gt;\n  );\n});</code></pre>"},{"location":"components/CheckboxField/#required-state","title":"Required State","text":"<p>The required state indicates that the input is mandatory. Required fields display an asterisk <code>*</code> after the label by default.</p> <pre><code>React.createElement(() =&gt; {\n  const [agree, setAgree] = React.useState(true);\n  return (\n    &lt;CheckboxField\n      checked={agree}\n      label=\"I agree\"\n      onChange={() =&gt; setAgree(!agree)}\n      required\n    /&gt;\n  );\n});</code></pre>"},{"location":"components/CheckboxField/#styling-the-required-state","title":"Styling the Required State","text":"<p>All form fields in React UI can be styled to indicate the required state.</p> <p>However, you may find yourself in a situation where a form field is valid in both checked and unchecked states, for example to turn on or off a feature. If your project uses the label color as the primary means to indicate the required state of input fields and the usual asterisk <code>*</code> is omitted, you may want to keep the label color consistent for both states to avoid confusion.</p> <p>For this edge case, there is the <code>renderAsRequired</code> prop:</p> <pre><code>React.createElement(() =&gt; {\n  const [optional, setOptional] = React.useState(false);\n  const [renderAsRequired, setRenderAsRequired] = React.useState(false);\n  return (\n    &lt;React.Fragment&gt;\n      &lt;style&gt;\n      {`\n        .example {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 1rem 0.5rem;\n        }\n\n        .example--themed-form-fields {\n          --rui-FormField__label__color: var(--rui-color-text-secondary);\n          --rui-FormField--required__label__color: var(--rui-color-text-primary);\n          --rui-FormField--required__sign: '';\n        }\n      `}\n      &lt;/style&gt;\n      &lt;div class=\"example example--themed-form-fields\"&gt;\n        &lt;CheckboxField\n          checked={optional}\n          label=\"This field is optional\"\n          onChange={() =&gt; setOptional(!optional)}\n        /&gt;\n        &lt;CheckboxField\n          checked={renderAsRequired}\n          label=\"This field is optional but looks like required\"\n          onChange={() =&gt; setRenderAsRequired(!renderAsRequired)}\n          renderAsRequired\n        /&gt;\n      &lt;/div&gt;\n    &lt;/React.Fragment&gt;\n  );\n});</code></pre> <p>It renders the field as if it was required, but doesn't add the <code>required</code> attribute to the actual input.</p>"},{"location":"components/CheckboxField/#disabled-state","title":"Disabled State","text":"<p>Disabled state makes the input unavailable.</p> <pre><code>&lt;CheckboxField\n  disabled\n  label=\"Disabled checkbox\"\n/&gt;\n&lt;CheckboxField\n  checked\n  disabled\n  label=\"Disabled checkbox, checked\"\n/&gt;</code></pre>"},{"location":"components/CheckboxField/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the <code>&lt;input&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;input type=\"checkbox\" /&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/CheckboxField/#forwarding-ref","title":"Forwarding ref","text":"<p>If you provide ref, it is forwarded to the native HTML <code>&lt;input&gt;</code> element.</p>"},{"location":"components/CheckboxField/#api","title":"API","text":""},{"location":"components/CheckboxField/#theming","title":"Theming","text":"<p>Head to Forms Theming to see shared form theming options. On top of that, the following options are available for CheckboxField.</p> Custom Property Description <code>--rui-FormField--check__input--checkbox__border-radius</code> Input corner radius <code>--rui-FormField--check__input--checkbox--checked__background-image</code> Background image of checked input"},{"location":"components/FileInputField/","title":"FileInputField","text":"<p>FileInputField allows users to select files to upload.</p>"},{"location":"components/FileInputField/#basic-usage","title":"Basic Usage","text":"<p>To implement the FileInputField component, you need to import it first:</p> <pre><code>import { FileInputField } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;FileInputField id=\"my-file\" label=\"Attachment\" onFilesChanged={() =&gt; {}} /&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/FileInputField/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Apply native HTML attributes to control what   and how many files users can select.</p> </li> <li> <p>Use short and descriptive labels, ideally nouns rather than seemingly   polite phrases like Please attach your file here. Short labels will help   your users accomplish their task faster.</p> </li> <li> <p>Use text labels unless it is necessary to wrap text label into   Popover-like to component to provide additional info about the field.</p> </li> <li> <p>Only make the FileInputField's label invisible when there is another visual   clue to guide users through filling the input.</p> </li> <li> <p>When a short label is not enough, use help texts to guide users before   they enter anything.</p> </li> <li> <p>Use clear, calm error messages when there's a problem with what they   entered. Be positive and focus on solutions to make the error message helpful.</p> </li> </ul> <p>\ud83d\udc49 FileInputField implements native HTML <code>input type=\"file\"</code>. Therefore, it is not possible to affect neither its translations (they depend on a browser), nor appearance. Custom translations and appearance are considered to be implemented at some point in the future. However, from the layout perspective, FileInputFields work just like any other form fields.</p>"},{"location":"components/FileInputField/#sizes","title":"Sizes","text":"<p>Aside from the default (medium) size, two additional sizes are available: small and large.</p> <pre><code>&lt;FileInputField\n  id=\"my-file-small\"\n  label=\"Attachment\"\n  onFilesChanged={() =&gt; {}}\n  size=\"small\"\n/&gt;\n&lt;FileInputField\n  id=\"my-file-medium\"\n  label=\"Attachment\"\n  onFilesChanged={() =&gt; {}}\n/&gt;\n&lt;FileInputField\n  id=\"my-file-large\"\n  label=\"Attachment\"\n  onFilesChanged={() =&gt; {}}\n  size=\"large\"\n/&gt;</code></pre> <p>Full-width fields span the full width of a parent:</p> <pre><code>&lt;FileInputField\n  fullWidth\n  id=\"my-file\"\n  label=\"First name\"\n  onFilesChanged={() =&gt; {}}\n/&gt;</code></pre>"},{"location":"components/FileInputField/#invisible-label","title":"Invisible Label","text":"<p>In some cases, it may be convenient to visually hide the field label. The label remains accessible to assistive technologies.</p> <p>While it may be acceptable for simple forms with just a few fields, it's dangerous to hide labels from users in most cases. Keep in mind you should provide another visual clue so users know what to fill into the input.</p> <pre><code>&lt;FileInputField\n  id=\"my-file\"\n  isLabelVisible={false}\n  label=\"Attachment\"\n  onFilesChanged={() =&gt; {}}\n/&gt;</code></pre>"},{"location":"components/FileInputField/#horizontal-layout","title":"Horizontal Layout","text":"<p>The default vertical layout is very easy to use and work with. However, there are situations where horizontal layout suits better \u2014 and that's why React UI supports this kind of layout as well.</p> <pre><code>&lt;FileInputField\n  id=\"my-file-horizontal\"\n  label=\"Attachment\"\n  layout=\"horizontal\"\n  onFilesChanged={() =&gt; {}}\n/&gt;\n&lt;FileInputField\n  fullWidth\n  id=\"my-file-horizontal-full-width\"\n  isLabelVisible={false}\n  label=\"Attachment\"\n  layout=\"horizontal\"\n  onFilesChanged={() =&gt; {}}\n/&gt;</code></pre>"},{"location":"components/FileInputField/#help-text","title":"Help Text","text":"<p>You may provide an additional help text to clarify how the input should be filled.</p> <pre><code>&lt;FileInputField\n  helpText=\"Choose one or more files to upload.\"\n  id=\"my-file-help-text\"\n  label=\"Attachment\"\n  onFilesChanged={() =&gt; {}}\n/&gt;\n&lt;FileInputField\n  helpText=\"Choose one or more files to upload.\"\n  id=\"my-file-help-text-horizontal\"\n  label=\"Attachment\"\n  layout=\"horizontal\"\n  onFilesChanged={() =&gt; {}}\n/&gt;\n&lt;FileInputField\n  fullWidth\n  helpText=\"Choose one or more files to upload.\"\n  id=\"my-file-help-text-horizontal-full-width\"\n  label=\"Attachment\"\n  layout=\"horizontal\"\n  onFilesChanged={() =&gt; {}}\n/&gt;</code></pre>"},{"location":"components/FileInputField/#states","title":"States","text":""},{"location":"components/FileInputField/#validation-states","title":"Validation States","text":"<p>Validation states visually present the result of validation of the input. You should always provide a validation message for states other than valid so users know what happened and what action they should take or what options they have.</p> <pre><code>&lt;FileInputField\n  id=\"my-file-valid\"\n  label=\"Attachment\"\n  onFilesChanged={() =&gt; {}}\n  validationState=\"valid\"\n  validationText=\"Looks good!\"\n/&gt;\n&lt;FileInputField\n  id=\"my-file-invalid\"\n  label=\"Attachment\"\n  onFilesChanged={() =&gt; {}}\n  validationState=\"invalid\"\n  validationText=\"Your file is too big. Please select something smaller.\"\n/&gt;\n&lt;FileInputField\n  id=\"my-file-warning\"\n  label=\"Attachment\"\n  onFilesChanged={() =&gt; {}}\n  validationState=\"warning\"\n  validationText={`\n    You selected more than 10 files.\n    It may take some time before we process them.\n  `}\n/&gt;</code></pre>"},{"location":"components/FileInputField/#disabled-state","title":"Disabled State","text":"<p>It's possible to disable the whole input.</p> <pre><code>&lt;FileInputField\n  disabled\n  id=\"my-file\"\n  label=\"Attachment\"\n  onFilesChanged={() =&gt; {}}\n/&gt;</code></pre>"},{"location":"components/FileInputField/#handling-files","title":"Handling Files","text":"<p>Files selected by the user are handled by providing a custom function to the <code>onFilesChanged</code> prop. The <code>onFilesChanged</code> function is then called on the <code>change</code> event of the <code>input</code> element and on the <code>drop</code> event of the root <code>div</code> element.</p> <pre><code>&lt;FileInputField\n  id=\"my-file\"\n  label=\"Attachment\"\n  onFilesChanged={(files, event) =&gt; {\n    // Do something with the files\u2026\n    console.log('Files selected:', files);\n  }}\n/&gt;</code></pre>"},{"location":"components/FileInputField/#multiple-files","title":"Multiple Files","text":"<p>By default, users can select only one file. To allow selecting multiple files, set the <code>multiple</code> prop to <code>true</code>.</p> <pre><code>&lt;FileInputField\n  id=\"my-files\"\n  label=\"Attachment\"\n  multiple\n  onFilesChanged={(files, event) =&gt; {\n    // Do something with the files\u2026\n    console.log('Files selected:', files);\n  }}\n/&gt;</code></pre>"},{"location":"components/FileInputField/#resetting-input-state","title":"Resetting Input State","text":"<p>If you need to reset the input state, you can do it by calling the <code>resetState</code> method on the component's ref.</p> <pre><code>React.createElement(() =&gt; {\n  const fileInputRef = React.useRef();\n\n  return (\n    &lt;Toolbar align=\"bottom\"&gt;\n      &lt;ToolbarItem&gt;\n        &lt;FileInputField\n          id=\"my-file\"\n          label=\"Attachment\"\n          onFilesChanged={() =&gt; {}}\n          ref={fileInputRef}\n        /&gt;\n      &lt;/ToolbarItem&gt;\n      &lt;ToolbarItem&gt;\n        &lt;Button\n          label=\"Reset file input state\"\n          onClick={() =&gt; {\n            if (!fileInputRef.current) {\n              return;\n            }\n            fileInputRef.current.resetState();\n          }}\n        /&gt;\n      &lt;/ToolbarItem&gt;\n    &lt;/Toolbar&gt;\n  );\n});</code></pre> <p>You can also reset the input state by clicking the button with the <code>reset</code> type inside a form.</p>"},{"location":"components/FileInputField/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the <code>&lt;input&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <pre><code>&lt;FileInputField\n  accept=\".pdf,.jpg,.jpeg,.png\"\n  helpText={`\n    Choose up to 10 files. Allowed extensions are .pdf, .jpg, .jpeg, or .png.\n    Size limit is 10 MB.\n  `}\n  id=\"my-file\"\n  label=\"Attachment\"\n  onFilesChanged={() =&gt; {}}\n/&gt;</code></pre> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;input type=\"file\" /&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/FileInputField/#forwarding-ref","title":"Forwarding ref","text":"<p>If you provide ref, it is forwarded to the native HTML <code>&lt;input&gt;</code> element.</p>"},{"location":"components/FileInputField/#api","title":"API","text":""},{"location":"components/FileInputField/#theming","title":"Theming","text":"<p>Head to Forms Theming to see shared form theming options.</p>"},{"location":"components/FormLayout/","title":"FormLayout","text":"<p>The FormLayout aligns form fields into an organized grid.</p>"},{"location":"components/FormLayout/#basic-usage","title":"Basic Usage","text":"<p>To implement the FormLayout component, you need to import it first:</p> <pre><code>import { FormLayout } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;FormLayout&gt;\n  &lt;TextField label=\"A form element\" /&gt;\n&lt;/FormLayout&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/FormLayout/#general-guidelines","title":"General Guidelines","text":"<p>Since all form fields in React UI are styled as inline blocks, they queue up one after another in a row by default. The FormLayout component is there to make building vertical and horizontal forms easy. It uses the right tool for the job: the CSS grid layout.</p> <ul> <li> <p>Put only form field components from React UI inside the FormLayout and   make sure they are direct descendants of it (React fragments are   supported!). All React UI form components are ready for this use case and   don't need to be wrapped in any <code>div</code>s. Namely, the FormLayout supports the   following React UI components:   CheckboxField,   Radio, SelectField,   TextArea, TextField,   and Toggle.</p> </li> <li> <p>Use the FormLayoutCustomField component when you need to   place any custom content inside the FormLayout. This layout helper ensures   your content is properly spaced and aligned with other FormLayout elements.   Do not try to put any custom HTML or React components directly into   FormLayout without wrapping it with the FormLayoutCustomField first.</p> </li> </ul> <p>\ud83d\udc49 For usage in auto-width Modal, you may need to turn on the <code>autoWidth</code> option for your FormLayout. This prevents FormLayout from unexpectedly growing in browsers that don't support CSS subgrid in cases when there are longer validation messages or help texts.</p>"},{"location":"components/FormLayout/#vertical-layout","title":"Vertical Layout","text":"<p>Vertical FormLayout works similar to single-column Grid layout while it also forces vertical layout mode on form fields. To use this layout, simply wrap your form fields with the FormLayout component:</p> <pre><code>&lt;FormLayout&gt;\n  &lt;TextField label=\"A form element\" /&gt;\n  &lt;TextField label=\"Another form element\" /&gt;\n  &lt;TextField label=\"Yet another one\" /&gt;\n&lt;/FormLayout&gt;</code></pre>"},{"location":"components/FormLayout/#horizontal-layout","title":"Horizontal Layout","text":"<p>Horizontal FormLayout is designed for horizontal form fields: it nicely aligns labels and inputs in an organized grid. It is applied starting from the <code>md</code> viewport size onward and it forces the horizontal layout on the fields.</p> <pre><code>&lt;FormLayout fieldLayout=\"horizontal\"&gt;\n  &lt;TextField label=\"A form element\" /&gt;\n  &lt;TextField label=\"Another form element\" /&gt;\n  &lt;TextField label=\"Yet another one\" /&gt;\n&lt;/FormLayout&gt;</code></pre>"},{"location":"components/FormLayout/#label-width","title":"Label Width","text":"<p>In the horizontal layout mode, it's possible to fine-tune the way how the form will be aligned through the <code>labelWidth</code> option to cover various design requirements. It comes with three globally shared options: default width, auto width, and limited width. For cases where an individual manual width works better, there is the local custom width mode which enables setting a width that is applied just for the current FormLayout.</p> <p>\ud83d\udc49 All global label width options can be easily customized with CSS custom properties.</p>"},{"location":"components/FormLayout/#label-width-options","title":"Label Width Options","text":"<ul> <li> <p>The <code>default</code> mode (global) sets the width of all labels to a global default   value which is 10 em.</p> </li> <li> <p>The <code>auto</code> mode (global) aligns the form according to the longest label.</p> </li> <li> <p>The <code>limited</code> mode (global) works as <code>auto</code> except it's intended for values   that set a limit for the label width. Its default value is   <code>fitcontent(50%)</code> which also aligns the form according to the longest label   like <code>auto</code>, but with the difference that the labels cannot be wider than   50 % of the FormLayout.</p> </li> <li> <p>The <code>custom</code> mode (local) allows you to enter any custom label width for   individual FormLayouts.</p> </li> </ul> <pre><code>React.createElement(() =&gt; {\n  const [labelWidth, setLabelWidth] = React.useState('default');\n  const [customLabelWidth, setCustomLabelWidth] = React.useState('20em');\n  return (\n    &lt;div&gt;\n      &lt;Toolbar align=\"baseline\"&gt;\n        &lt;ToolbarItem&gt;\n          &lt;span id=\"label-width-options-label\"&gt;Label width:&lt;/span&gt;\n        &lt;/ToolbarItem&gt;\n        &lt;ToolbarItem&gt;\n          &lt;ButtonGroup aria-labelledby=\"label-width-options-label\"&gt;\n            &lt;Button\n              color={labelWidth === 'default' ? 'selected' : 'secondary'}\n              label=\"default\"\n              onClick={() =&gt; setLabelWidth('default')}\n            /&gt;\n            &lt;Button\n              color={labelWidth === 'auto' ? 'selected' : 'secondary'}\n              label=\"auto\"\n              onClick={() =&gt; setLabelWidth('auto')}\n            /&gt;\n            &lt;Button\n              color={labelWidth === 'limited' ? 'selected' : 'secondary'}\n              label=\"limited\"\n              onClick={() =&gt; setLabelWidth('limited')}\n            /&gt;\n            &lt;Button\n              color={labelWidth === 'custom' ? 'selected' : 'secondary'}\n              label=\"custom\"\n              onClick={() =&gt; setLabelWidth('custom')}\n            /&gt;\n          &lt;/ButtonGroup&gt;\n        &lt;/ToolbarItem&gt;\n        {labelWidth === 'custom' &amp;&amp; (\n          &lt;ToolbarItem&gt;\n            &lt;TextField\n              inputSize={5}\n              isLabelVisible={false}\n              label=\"Custom label width\"\n              layout=\"horizontal\"\n              onChange={(e) =&gt; setCustomLabelWidth(e.target.value)}\n              value={customLabelWidth}\n            /&gt;\n          &lt;/ToolbarItem&gt;\n        )}\n      &lt;/Toolbar&gt;\n      &lt;FormLayout\n        fieldLayout=\"horizontal\"\n        labelWidth={labelWidth === 'custom' ? customLabelWidth : labelWidth}\n      &gt;\n        &lt;TextField label=\"A form element\" /&gt;\n        &lt;TextField\n          label={'Another form element with a very long label that is so '\n            + 'long that in the auto mode, it should make the label column '\n            + 'grow until the inputs reach the end of the line, but it will '\n            + 'not exceed 50 % of the FormLayout width in the limited label '\n            + 'width mode'}\n        /&gt;\n        &lt;TextField label=\"Yet another one\" /&gt;\n      &lt;/FormLayout&gt;\n    &lt;/div&gt;\n  );\n});</code></pre>"},{"location":"components/FormLayout/#limitations","title":"Limitations","text":""},{"location":"components/FormLayout/#label-position","title":"Label Position","text":"<p>Label position of inline form fields (CheckboxField, Toggle) is ignored in horizontal FormLayout.</p>"},{"location":"components/FormLayout/#modals","title":"Modals","text":"<p>Please note the <code>auto</code> and <code>limited</code> label width options may not function correctly in combination with other auto layout mechanisms, e.g. the auto-width Modal. It's just too much of magic that does not quite work together yet \ud83c\udfa9.</p>"},{"location":"components/FormLayout/#custom-fields","title":"Custom Fields","text":"<p>You can even place any content you need into the FormLayout \u2014 just wrap it with the FormLayoutCustomField component. This layout helper ensures your content is properly spaced and aligned with to other FormLayout elements. FormLayoutCustomFields are designed to work solely inside the FormLayout component.</p> <pre><code>&lt;FormLayout fieldLayout=\"horizontal\" labelWidth=\"auto\"&gt;\n  &lt;TextField label=\"A form element\" /&gt;\n  &lt;FormLayoutCustomField label=\"Optional custom field label\"&gt;\n    &lt;docoff-placeholder bordered&gt;Custom field content&lt;/docoff-placeholder&gt;\n  &lt;/FormLayoutCustomField&gt;\n  &lt;TextField label=\"Another form element\" /&gt;\n&lt;/FormLayout&gt;</code></pre> <p>\ud83d\udc49 While you can set FormLayoutCustomField as <code>disabled</code>, <code>valid</code> or <code>required</code> and its styles may affect contained form fields through CSS cascade, don't forget to mirror the aforementioned properties to the contained form fields too as API options as such are not inherited.</p>"},{"location":"components/FormLayout/#label-alignment","title":"Label Alignment","text":"<p>If you are in a situation with one or more box form fields inside your FormLayoutCustomField, you may want to have its label aligned with the fields inside. Since it's not quite possible to do this automatically due to limited browser support, there is <code>innerFieldSize</code> option which accepts any of existing box field sizes (small, medium, or large) and is intended right for this task.</p> <pre><code>&lt;FormLayout fieldLayout=\"horizontal\" labelWidth=\"auto\"&gt;\n  &lt;TextField label=\"A form element\" /&gt;\n  &lt;FormLayoutCustomField\n    innerFieldSize=\"medium\"\n    label=\"Custom field label aligned to inner text input\"\n  &gt;\n    &lt;TextField\n      isLabelVisible={false}\n      label=\"A form element\"\n      placeholder=\"Text field with invisible label\"\n    /&gt;\n  &lt;/FormLayoutCustomField&gt;\n  &lt;TextField label=\"Another form element\" /&gt;\n&lt;/FormLayout&gt;</code></pre>"},{"location":"components/FormLayout/#validation-states","title":"Validation States","text":"<p>Custom fields support the same validation states as regular form fields to provide labels with optional feedback style.</p> <pre><code>&lt;FormLayout fieldLayout=\"horizontal\" labelWidth=\"auto\"&gt;\n  &lt;TextField label=\"A form element\" /&gt;\n  &lt;FormLayoutCustomField\n    label=\"Custom field label in valid state\"\n    validationState=\"valid\"\n  &gt;\n    &lt;docoff-placeholder bordered&gt;Custom field content&lt;/docoff-placeholder&gt;\n  &lt;/FormLayoutCustomField&gt;\n  &lt;TextField label=\"Another form element\" /&gt;\n&lt;/FormLayout&gt;</code></pre>"},{"location":"components/FormLayout/#accessibility","title":"Accessibility","text":"<p>If possible, use the <code>labelForId</code> option to provide ID of contained form field so the field remains accessible via custom field label.</p> <p>You can also specify size of contained form field so custom field label is properly vertically aligned.</p> <pre><code>React.createElement(() =&gt; {\n  const [isChecked, setIsChecked] = React.useState(false);\n  return (\n    &lt;FormLayout fieldLayout=\"horizontal\" labelWidth=\"auto\"&gt;\n      &lt;TextField label=\"A form element\" /&gt;\n      &lt;FormLayoutCustomField\n        fullWidth\n        label=\"Custom field label aligned with medium form field\"\n        labelForId=\"my-text-field-custom-accessibility-2\"\n        innerFieldSize=\"medium\"\n      &gt;\n        &lt;Toolbar align=\"middle\" dense&gt;\n          &lt;ToolbarItem&gt;\n            &lt;TextField\n              isLabelVisible={false}\n              label=\"A form element\"\n              placeholder=\"Text field with invisible label\"\n            /&gt;\n          &lt;/ToolbarItem&gt;\n          &lt;ToolbarItem&gt;\n            &lt;CheckboxField\n              checked={isChecked}\n              label=\"Another form field\"\n              onChange={() =&gt; setIsChecked(!isChecked)}\n            /&gt;\n          &lt;/ToolbarItem&gt;\n        &lt;/Toolbar&gt;\n      &lt;/FormLayoutCustomField&gt;\n      &lt;TextField label=\"Another form element\" /&gt;\n    &lt;/FormLayout&gt;\n  )\n});</code></pre>"},{"location":"components/FormLayout/#full-example","title":"Full Example","text":"<p>This is a demo of all components supported by FormLayout.</p> <pre><code>React.createElement(() =&gt; {\n  const [fieldLayout, setFieldLayout] = React.useState('horizontal');\n  const [fruit, setFruit] = React.useState('apple');\n  const [isDeliveryAddress, setIsDeliveryAddress] = React.useState(true);\n  const [receiveNewsletter, setReceiveNewsletter] = React.useState(true);\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n    &lt;div&gt;\n      &lt;Toolbar&gt;\n        &lt;ToolbarItem&gt;\n          &lt;ButtonGroup&gt;\n            &lt;Button\n              color={fieldLayout === 'horizontal' ? 'selected' : 'secondary'}\n              label=\"Horizontal layout\"\n              onClick={() =&gt; setFieldLayout('horizontal')}\n            /&gt;\n            &lt;Button\n              color={fieldLayout === 'vertical' ? 'selected' : 'secondary'}\n              label=\"Vertical layout\"\n              onClick={() =&gt; setFieldLayout('vertical')}\n            /&gt;\n          &lt;/ButtonGroup&gt;\n        &lt;/ToolbarItem&gt;\n      &lt;/Toolbar&gt;\n      &lt;FormLayout fieldLayout={fieldLayout} labelWidth=\"auto\"&gt;\n        &lt;&gt;\n          &lt;TextField\n            label=\"First Name\"\n          /&gt;\n          &lt;TextField\n            label=\"Last Name\"\n          /&gt;\n        &lt;/&gt;\n        &lt;TextField\n          helpText=\"Optional\"\n          label=\"Email address\"\n          type=\"email\"\n        /&gt;\n        &lt;&gt;\n          &lt;TextField\n            label=\"Address\"\n            placeholder=\"Address line 1\"\n          /&gt;\n          &lt;TextField\n            isLabelVisible={false}\n            label=\"Address 2\"\n            placeholder=\"Address line 2\"\n          /&gt;\n          &lt;TextField\n            inputSize={6}\n            label=\"ZIP\"\n            validationState=\"invalid\"\n            validationText=\"ZIP should be 5 to 6 digits long code.\"\n          /&gt;\n          &lt;FormLayoutCustomField label=\"Country\"&gt;\n            &lt;span&gt;Czech Republic&lt;/span&gt;\n          &lt;/FormLayoutCustomField&gt;\n          &lt;CheckboxField\n            checked={isDeliveryAddress}\n            helpText=\"Uncheck if you wish to deliver to a different address.\"\n            label=\"This is my delivery address\"\n            onChange={() =&gt; setIsDeliveryAddress(!isDeliveryAddress)}\n          /&gt;\n        &lt;/&gt;\n        &lt;SelectField\n          label=\"Your favourite fruit\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={options}\n          value={fruit}\n        /&gt;\n        &lt;TextArea\n          fullWidth\n          label=\"Message\"\n          rows={3}\n        /&gt;\n        &lt;FileInputField\n          id=\"my-file\"\n          label=\"Attachment\"\n          onFilesChanged={() =&gt; {}}\n        /&gt;\n        &lt;Toggle\n          checked={receiveNewsletter}\n          helpText=\"Only once per week!\"\n          label=\"Receive weekly newsletter\"\n          onChange={() =&gt; setReceiveNewsletter(!receiveNewsletter)}\n          required\n        /&gt;\n        &lt;Radio\n          label=\"And fruit again!\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={options}\n          value={fruit}\n        /&gt;\n        &lt;InputGroup label=\"Promo code\"&gt;\n          &lt;TextField label=\"Code\" /&gt;\n          &lt;Button label=\"Apply\" color=\"secondary\" priority=\"outline\" /&gt;\n        &lt;/InputGroup&gt;\n      &lt;/FormLayout&gt;\n    &lt;/div&gt;\n  )\n});</code></pre>"},{"location":"components/FormLayout/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the root <code>&lt;div&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;div&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/FormLayout/#api","title":"API","text":""},{"location":"components/FormLayout/#formlayoutcustomfield-api","title":"FormLayoutCustomField API","text":"<p>A place for custom content inside FormLayout.</p> <p></p>"},{"location":"components/FormLayout/#theming","title":"Theming","text":"Custom Property Description <code>--rui-FormLayout__row-gap</code> Gap between individual rows <code>--rui-FormLayout--horizontal__label__width</code> Default label width <code>--rui-FormLayout--horizontal__label__width--auto</code> Label width in automatic layout <code>--rui-FormLayout--horizontal__label__width--limited</code> Label width in limited-width layout"},{"location":"components/FormLayout/#formlayoutcustomfield-theming","title":"FormLayoutCustomField Theming","text":"<p>FormLayoutCustomField can be styled using a small subset of other form fields theming options.</p> Custom Property Description <code>--rui-FormField--custom--default__surrounding-text-color</code> Custom field label color in default state <code>--rui-FormField--custom--disabled__surrounding-text-color</code> Custom field label color in disabled-like state"},{"location":"components/Grid/","title":"Grid","text":"<p>The responsive Grid layout aligns content into an organized grid.</p>"},{"location":"components/Grid/#basic-usage","title":"Basic Usage","text":"<p>To implement the Grid component, you need to import it first:</p> <pre><code>import { Grid } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;Grid&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n&lt;/Grid&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/Grid/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>This component implements the native CSS grid layout, a   powerful tool for two-dimensional layouts. You may use any value accepted by   grid-template-columns, grid-template-rows, grid-auto-flow,   align-content, align-items, justify-content, justify-items, and CSS   properties in corresponding API options of the component.</p> </li> <li> <p>To align your items in the grid, simply wrap them with the Grid   component. Unlike other grid frameworks and UI libraries, no additional   markup like GridItem or Cell is necessary for your items. But it's there   when you really need it\u2014see Advanced Layouts.</p> </li> <li> <p>For forms, use rather the FormLayout component   which is designed specifically for that purpose.</p> </li> <li> <p>The Grid component is so powerful that it enables you to build even very   advanced layouts without having to write a single line of custom CSS.   See Advanced Layouts for more.</p> </li> </ul> <p>\ud83d\udc49 Vertical margin of items inside Grid is reset to zero.</p>"},{"location":"components/Grid/#columns","title":"Columns","text":"<p>Stack is the default outcome of Grid. Use the <code>columns</code> option to organize your items into a grid.</p> <pre><code>&lt;Grid columns=\"1fr 1fr 1fr\"&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n&lt;/Grid&gt;</code></pre> <p>You can use the <code>repeat()</code> function to specify a recurring pattern.</p> <pre><code>&lt;Grid columns=\"repeat(3, 1fr)\"&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n&lt;/Grid&gt;</code></pre> <p>Combine <code>repeat()</code> with <code>auto-fit</code> and <code>minmax()</code> to build automatic responsive layouts.</p> <pre><code>&lt;Grid columns=\"repeat(auto-fit, minmax(200px, auto))\"&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n&lt;/Grid&gt;</code></pre> <p>\ud83d\udc49 If you need your items to have equal height even with the content of varying lengths, it may be necessary to set <code>height: 100%</code> on them.</p>"},{"location":"components/Grid/#rows","title":"Rows","text":"<p>Use <code>columns</code> and <code>rows</code> to specify a more complicated grid layout.</p> <pre><code>&lt;Grid columns=\"1fr 2fr\" rows=\"auto 200px auto\"&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n&lt;/Grid&gt;</code></pre>"},{"location":"components/Grid/#gaps","title":"Gaps","text":"<p>Both column and row gaps can be customized. The value must correspond to any of available spacings.</p> <pre><code>&lt;Grid columns=\"repeat(3, 1fr)\" columnGap={2} rowGap={6}&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n&lt;/Grid&gt;</code></pre>"},{"location":"components/Grid/#alignment","title":"Alignment","text":"<p>Individual items and the entire grid content can be aligned along both axes.</p> <pre><code>&lt;Grid\n  columns=\"repeat(3, 10em)\"\n  alignItems=\"center\"\n  justifyItems=\"center\"\n  justifyContent=\"center\"\n&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;br /&gt; with two lines&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n&lt;/Grid&gt;</code></pre>"},{"location":"components/Grid/#custom-html-tag","title":"Custom HTML Tag","text":"<p>To render as a list, for example, just change the output <code>tag</code> to <code>ul</code> or <code>ol</code> and wrap your items with <code>&lt;li&gt;</code>.</p> <pre><code>&lt;Grid tag=\"ul\"&gt;\n  &lt;li&gt;\n    &lt;docoff-placeholder bordered&gt;List item&lt;/docoff-placeholder&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;docoff-placeholder bordered&gt;List item&lt;/docoff-placeholder&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n    &lt;docoff-placeholder bordered&gt;List item&lt;/docoff-placeholder&gt;\n  &lt;/li&gt;\n&lt;/Grid&gt;</code></pre>"},{"location":"components/Grid/#media-queries","title":"Media Queries","text":"<p>If you need to build more complicated layouts, you have full control over the grid definition. Just specify your grid layout for breakpoints where a change of layout is needed. The Grid component is written with the mobile-first approach so values for small breakpoints are used until they're overridden by a bigger breakpoint.</p> <p>\ud83d\udc49 With this syntax there are no defaults for individual breakpoints.</p> <p>\ud83d\udcd0 Try resizing your browser to see how it works.</p> <pre><code>&lt;Grid\n  columns={{\n    xs: '1fr',\n    md: '1fr 2fr',\n  }}\n  columnGap={{\n    xs: 4,\n    md: 2,\n    lg: 4,\n  }}\n  rows={{\n    xs: 'auto auto 200px 200px',\n    md: 'auto 200px auto',\n  }}\n  rowGap={{\n    xs: 3,\n    md: 4,\n  }}\n&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n&lt;/Grid&gt;</code></pre>"},{"location":"components/Grid/#advanced-layouts","title":"Advanced Layouts","text":"<p>Wrap your content with the GridSpan component to span it over multiple columns or rows. Use the <code>autoFlow</code> option to control the layout when combined with responsive columns and rows.</p> <pre><code>&lt;Grid\n  autoFlow={{\n    xs: 'row dense',\n    sm: 'column',\n  }}\n  columns={{\n    xs: 'repeat(2, 1fr)',\n    sm: 'repeat(4, 1fr)',\n  }}\n  rows={{\n    xs: 'repeat(8, 50px)',\n    sm: 'auto 100px auto auto',\n  }}\n&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item 1&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item 2&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item 3&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item 4&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item 5&lt;/docoff-placeholder&gt;\n  &lt;GridSpan columns={2} rows={2}&gt;\n    &lt;docoff-placeholder bordered height=\"100%\"&gt;\n      Grid item spanning over two lines and two rows\n    &lt;/docoff-placeholder&gt;\n  &lt;/GridSpan&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item 6&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item 7&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item 8&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item 9&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item 10&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item 11&lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;Grid item 12&lt;/docoff-placeholder&gt;\n&lt;/Grid&gt;</code></pre> <p>\ud83d\udc49 <code>autoFlow</code> (used in the example above) implements the <code>grid-auto-flow</code> CSS property. Check MDN to fully understand available options.</p>"},{"location":"components/Grid/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the root HTML element of your choice provided by <code>tag</code>, which is <code>&lt;div&gt;</code> by default. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;div&gt;</code> HTML element attributes</li> <li>any other HTML element</li> <li>React common props</li> </ul>"},{"location":"components/Grid/#api","title":"API","text":""},{"location":"components/Grid/#gridspan-api","title":"GridSpan API","text":"<p>Wrapper for content that should span multiple rows or columns.</p> <p></p>"},{"location":"components/InputGroup/","title":"InputGroup","text":"<p>InputGroup visually groups related form fields and actions together.</p>"},{"location":"components/InputGroup/#basic-usage","title":"Basic Usage","text":"<p>To implement the InputGroup component, you need to import it first:</p> <pre><code>import { InputGroup } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Pear',\n      value: 'pear',\n    },\n    {\n      label: 'Cherry',\n      value: 'cherry',\n    },\n  ];\n  return (\n    &lt;InputGroup label=\"Your favourite fruit\"&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      /&gt;\n      &lt;TextField\n        label=\"Variety\"\n        placeholder=\"Eg. Golden delicious\"\n      /&gt;\n      &lt;Button label=\"Submit\" /&gt;\n    &lt;/InputGroup&gt;\n  );\n})</code></pre> <p>See API for all available options.</p>"},{"location":"components/InputGroup/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Use input group to group related fields and actions that a user can take.   Input fields and buttons should not be grouped just to save space on the   screen.</p> </li> <li> <p>While the number of child inputs is not limited, keep in mind the layout of   InputGroup is currently not responsive: the inputs do not shrink nor wrap.   Make sure your inputs fit their container, especially on small screens.</p> </li> <li> <p>In the background, InputGroup uses the <code>fieldset</code> element. Not   only it improves the accessibility of the group, it also allows you to make   use of its built-in features like disabling all nested inputs or pairing the   group with a form outside. Consult the MDN docs to learn more.</p> </li> <li> <p>InputGroup currently supports grouping of TextField, SelectField,   and Button components.</p> </li> <li> <p>To group Buttons only, use the   ButtonGroup component which is designed   specifically for that purpose.</p> </li> </ul>"},{"location":"components/InputGroup/#sizes","title":"Sizes","text":"<p>All existing field and button sizes are also available on the input group level: small, medium, and large.</p> <pre><code>&lt;InputGroup\n  label=\"Small size\"\n  size=\"small\"\n&gt;\n  &lt;TextField label=\"Input\" /&gt;\n  &lt;Button label=\"Submit\" /&gt;\n&lt;/InputGroup&gt;\n&lt;InputGroup label=\"Medium size\"&gt;\n  &lt;TextField label=\"Input\" /&gt;\n  &lt;Button label=\"Submit\" /&gt;\n&lt;/InputGroup&gt;\n&lt;InputGroup\n  label=\"Large size\"\n  size=\"large\"\n&gt;\n  &lt;TextField label=\"Input\" /&gt;\n  &lt;Button label=\"Submit\" /&gt;\n&lt;/InputGroup&gt;</code></pre>"},{"location":"components/InputGroup/#shared-property","title":"Shared Property","text":"<p>You can set the <code>size</code> property directly on InputGroup to be shared for all fields and buttons inside the group. This property is then passed over to individual elements. At the same time, it cannot be overridden on the fields' or buttons' level. While technically possible, from the design point of view it's undesirable to group elements of totally different types or sizes.</p>"},{"location":"components/InputGroup/#invisible-label","title":"Invisible Label","text":"<p>In some cases, it may be convenient to visually hide the group label. The label remains accessible to assistive technologies. Labels of individual inputs are always visually hidden.</p> <p>While it may be acceptable for login screens with just a few fields or for other simple forms, it's dangerous to hide labels from users in most cases. Keep in mind you should provide another visual clue so users know what to fill into the input.</p> <pre><code>&lt;InputGroup\n  isLabelVisible={false}\n  label=\"First and last name\"\n&gt;\n  &lt;TextField\n    label=\"First name\"\n    placeholder=\"Eg. John\"\n  /&gt;\n  &lt;TextField\n    label=\"Last name\"\n    placeholder=\"Eg. Doe\"\n  /&gt;\n  &lt;Button label=\"Submit\" /&gt;\n&lt;/InputGroup&gt;</code></pre>"},{"location":"components/InputGroup/#horizontal-layout","title":"Horizontal layout","text":"<p>The default vertical layout is very easy to use and work with. However, there are situations where horizontal layout suits better \u2014 and that's why React UI supports this kind of layout as well.</p> <pre><code>&lt;InputGroup\n  label=\"Horizontal layout\"\n  layout=\"horizontal\"\n&gt;\n  &lt;FileInputField id=\"my-file\" label=\"Attachment\" onFilesChanged={() =&gt; {}} /&gt;\n  &lt;Button label=\"Submit\" /&gt;\n&lt;/InputGroup&gt;</code></pre>"},{"location":"components/InputGroup/#states","title":"States","text":""},{"location":"components/InputGroup/#disabled-state","title":"Disabled State","text":"<p>Disables all fields and buttons inside the group.</p> <pre><code>&lt;InputGroup disabled label=\"Disabled group\"&gt;\n  &lt;TextField label=\"Label\" /&gt;\n  &lt;Button label=\"Submit\" /&gt;\n&lt;/InputGroup&gt;</code></pre>"},{"location":"components/InputGroup/#validation-states","title":"Validation States","text":"<p>Validation states visually present the result of validation of the grouped inputs. Input group's validation state is taken from its child inputs. You should always provide validation messages for states other than valid directly through <code>validationTexts</code> prop so users know what happened and what action they should take or what options they have. These messages are not semantically tied to the <code>children</code> elements, the connection should be expressed in textual form in the actual message. The individual <code>children</code> elements must not show any <code>validationText</code>, they only show their respective <code>validationState</code>. Validation messages passed to input elements' <code>validationText</code> prop will be ignored.</p> <p>\ud83d\udc49 While there is a <code>required</code> property to visually denote the whole input group is required, there is no functional effect as there is no such HTML attribute for the underlying <code>&lt;fieldset&gt;</code> element.</p> <pre><code>&lt;InputGroup\n  label=\"First and last name\"\n  required\n  validationTexts={[\n    \"First name must be filled in.\",\n    \"Last name must be filled in.\",\n  ]}\n&gt;\n  &lt;TextField\n    label=\"First name\"\n    placeholder=\"Eg. John\"\n    required\n    validationState=\"invalid\"\n  /&gt;\n  &lt;TextField\n    label=\"Last name\"\n    placeholder=\"Eg. Doe\"\n    required\n    validationState=\"invalid\"\n  /&gt;\n  &lt;Button label=\"Submit\" /&gt;\n&lt;/InputGroup&gt;\n&lt;InputGroup\n  label=\"First and last name\"\n  required\n  validationTexts={[\n    \"Last name should not include any digits.\",\n  ]}\n&gt;\n  &lt;TextField\n    label=\"First name\"\n    placeholder=\"Eg. John\"\n    required\n    value=\"John\"\n  /&gt;\n  &lt;TextField\n    label=\"Last name\"\n    placeholder=\"Eg. Doe\"\n    required\n    validationState=\"warning\"\n    value=\"123Doe\"\n  /&gt;\n  &lt;Button label=\"Submit\" /&gt;\n&lt;/InputGroup&gt;\n&lt;InputGroup\n  label=\"First and last name\"\n  required\n&gt;\n  &lt;TextField\n    label=\"First name\"\n    placeholder=\"Eg. John\"\n    required\n    validationState=\"valid\"\n    value=\"John\"\n  /&gt;\n  &lt;TextField\n    label=\"Last name\"\n    placeholder=\"Eg. Doe\"\n    required\n    validationState=\"valid\"\n    value=\"Doe\"\n  /&gt;\n  &lt;Button label=\"Submit\" /&gt;\n&lt;/InputGroup&gt;</code></pre>"},{"location":"components/InputGroup/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the root <code>&lt;fieldset&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;fieldset&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/InputGroup/#api","title":"API","text":""},{"location":"components/InputGroup/#theming","title":"Theming","text":"Custom Property Description <code>--rui-InputGroup__gap</code> Gap between elements <code>--rui-InputGroup__inner-border-radius</code> Inner border radius of elements"},{"location":"components/Modal/","title":"Modal","text":"<p>Modal allows prompting users to take or complete an action.</p>"},{"location":"components/Modal/#basic-usage","title":"Basic Usage","text":"<p>To implement the Modal component, you need to import it first:</p> <pre><code>import {\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalTitle,\n} from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>React.createElement(() =&gt; {\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const modalPrimaryButtonRef = React.useRef();\n  const modalCloseButtonRef = React.useRef();\n  {/*\n    The `preventScrollUnderneath` feature is necessary for Modals to work in\n    React UI docs. You may not need it in your application.\n  */}\n  return (\n    &lt;GlobalPropsProvider globalProps={{\n      Modal: { preventScrollUnderneath: window.document.documentElement }\n    }}&gt;\n      &lt;Button\n        label=\"Launch modal\"\n        onClick={() =&gt; setModalOpen(true)}\n      /&gt;\n      &lt;div&gt;\n        {modalOpen &amp;&amp; (\n          &lt;Modal\n            closeButtonRef={modalCloseButtonRef}\n            primaryButtonRef={modalPrimaryButtonRef}\n          &gt;\n            &lt;ModalHeader&gt;\n              &lt;ModalTitle&gt;Delete the user?&lt;/ModalTitle&gt;\n              &lt;ModalCloseButton onClick={() =&gt; setModalOpen(false)} /&gt;\n            &lt;/ModalHeader&gt;\n            &lt;ModalBody&gt;\n              &lt;ModalContent&gt;\n                &lt;p&gt;\n                  Do you really want to delete the user &lt;code&gt;admin&lt;/code&gt;?\n                  This cannot be undone.\n                &lt;/p&gt;\n              &lt;/ModalContent&gt;\n            &lt;/ModalBody&gt;\n            &lt;ModalFooter&gt;\n              &lt;Button\n                color=\"danger\"\n                label=\"Delete\"\n                onClick={() =&gt; setModalOpen(false)}\n                ref={modalPrimaryButtonRef}\n              /&gt;\n              &lt;Button\n                label=\"Close\"\n                onClick={() =&gt; setModalOpen(false)}\n                priority=\"outline\"\n                ref={modalCloseButtonRef}\n              /&gt;\n            &lt;/ModalFooter&gt;\n          &lt;/Modal&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/GlobalPropsProvider&gt;\n  );\n});</code></pre> <p>See API for all available options.</p>"},{"location":"components/Modal/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Use modals to confirm an action, display a blocking alert, or reveal   contextual options or settings that cannot be displayed in line with the   parent content.</p> </li> <li> <p>The title should communicate the purpose of the modal rather than a   generic text. For example \u201cDelete the user?\u201d tells more than \u201cAre you sure?\u201d or   \u201cWarning\u201d.</p> </li> <li> <p>Modal actions should correspond to the modal purpose, too. E.g. \u201cDelete\u201d   tells better what happens rather than \u201cOK\u201d.</p> </li> <li> <p>While native <code>&lt;dialog&gt;</code> (that is used under the hood) can be present in DOM,   modal is a more feature-rich component that provides more control over the   modal behavior and shall be removed from DOM when closed.</p> </li> <li> <p>Modal automatically focuses the first non-disabled form field by default.   When no field is found then the primary button (in the footer) is focused. To turn   this feature off, set the <code>autofocus</code> prop to <code>false</code>.</p> </li> <li> <p>Modal submits the form when the user presses the <code>Enter</code> key . A click is   programmatically triggered on the primary button in this case. To turn this   feature off, set the <code>allowPrimaryActionOnEnterKey</code> prop to <code>false</code>.</p> </li> <li> <p>Modal closes when the user presses the <code>Escape</code> key. A click is   programmatically triggered on the close button in this case. To turn this   feature off, set the <code>allowCloseOnEscapeKey</code> prop to <code>false</code>. Modal can be   also closed by clicking on the backdrop. To turn this feature off,   set the <code>allowCloseOnBackdropClick</code> prop to <code>false</code>.</p> </li> <li> <p>Avoid stacking of modals. While it may technically work, the modal is just   not designed for that.</p> </li> </ul>"},{"location":"components/Modal/#composition","title":"Composition","text":"<p>Modal is decomposed into the following components:</p> <ul> <li>Modal<ul> <li>ModalHeader<ul> <li>ModalTitle</li> <li>ModalCloseButton</li> </ul> </li> <li>ModalBody<ul> <li>ModalContent   (may be wrapped with ScrollView)</li> </ul> </li> <li>ModalFooter</li> </ul> </li> </ul> <p>Using different combinations, you can compose different kinds of modals, e.g. dialog modal, modal with form, blocking modal, scrollable modal, etc.</p>"},{"location":"components/Modal/#modalheader","title":"ModalHeader","text":"<p>ModalHeader is an optional part of the Modal which allows you to display the title of the modal and its close button.</p> <p>It is recommended to compose ModalHeader from the following elements. For title, use ModalTitle. For the close button, use ModalCloseButton, however it can be omitted if a close button is part of ModalFooter.</p> <p>There are two ways how to position elements within the ModalHeader:</p> <ol> <li>You can use provided positioning. Place previously mentioned elements into    the ModalHeader and use <code>justify</code> prop to set up the positioning of those    elements.</li> <li>You can customize positioning using another component (e.g.    Toolbar). In that case, set <code>justify</code> to <code>stretch</code> and    position elements on your own.</li> </ol> <pre><code>React.createElement(() =&gt; {\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const [variant, setVariant] = React.useState(null);\n  const modalPrimaryButtonRef = React.useRef();\n  const modalCloseButtonRef = React.useRef();\n  {/*\n    The `preventScrollUnderneath` feature is necessary for Modals to work in\n    React UI docs. You may not need it in your application.\n  */}\n  return (\n    &lt;GlobalPropsProvider globalProps={{\n      Modal: { preventScrollUnderneath: window.document.documentElement }\n    }}&gt;\n      &lt;Button\n        label=\"Launch with close button\"\n        onClick={() =&gt; {\n          setModalOpen(true);\n          setVariant(1);\n        }}\n      /&gt;\n      &lt;Button\n        label=\"Launch without close button\"\n        onClick={() =&gt; {\n          setModalOpen(true);\n          setVariant(2);\n        }}\n      /&gt;\n      &lt;Button\n        label=\"Launch without close button and with centered title\"\n        onClick={() =&gt; {\n          setModalOpen(true);\n          setVariant(3);\n        }}\n      /&gt;\n      &lt;Button\n        label=\"Launch with custom layout\"\n        onClick={() =&gt; {\n          setModalOpen(true);\n          setVariant(4);\n        }}\n      /&gt;\n      &lt;div&gt;\n        {modalOpen &amp;&amp; (\n          &lt;Modal\n            closeButtonRef={modalCloseButtonRef}\n            primaryButtonRef={modalPrimaryButtonRef}\n          &gt;\n            {variant === 1 &amp;&amp; (\n              &lt;ModalHeader&gt;\n                &lt;ModalTitle&gt;Delete the user?&lt;/ModalTitle&gt;\n                &lt;ModalCloseButton onClick={() =&gt; setModalOpen(false)} /&gt;\n              &lt;/ModalHeader&gt;\n            )}\n            {variant === 2 &amp;&amp; (\n              &lt;ModalHeader&gt;\n                &lt;ModalTitle&gt;Delete the user?&lt;/ModalTitle&gt;\n              &lt;/ModalHeader&gt;\n            )}\n            {variant === 3 &amp;&amp; (\n              &lt;ModalHeader justify=\"center\"&gt;\n                &lt;ModalTitle&gt;Delete the user?&lt;/ModalTitle&gt;\n              &lt;/ModalHeader&gt;\n            )}\n            {variant === 4 &amp;&amp; (\n              &lt;ModalHeader justify=\"stretch\"&gt;\n                &lt;Toolbar justify=\"space-between\"&gt;\n                  &lt;ToolbarItem&gt;\n                    {''}\n                  &lt;/ToolbarItem&gt;\n                  &lt;ToolbarItem&gt;\n                    &lt;ModalTitle&gt;Delete the user?&lt;/ModalTitle&gt;\n                  &lt;/ToolbarItem&gt;\n                  &lt;ToolbarItem&gt;\n                    &lt;ModalCloseButton onClick={() =&gt; setModalOpen(false)} /&gt;\n                  &lt;/ToolbarItem&gt;\n                &lt;/Toolbar&gt;\n              &lt;/ModalHeader&gt;\n            )}\n            &lt;ModalBody&gt;\n              &lt;ModalContent&gt;\n                &lt;p&gt;\n                  Do you really want to delete the user &lt;code&gt;admin&lt;/code&gt;?\n                  This cannot be undone.\n                &lt;/p&gt;\n              &lt;/ModalContent&gt;\n            &lt;/ModalBody&gt;\n            &lt;ModalFooter&gt;\n              &lt;Button\n                color=\"danger\"\n                label=\"Delete\"\n                onClick={() =&gt; setModalOpen(false)}\n                ref={modalPrimaryButtonRef}\n              /&gt;\n              &lt;Button\n                label=\"Close\"\n                onClick={() =&gt; setModalOpen(false)}\n                priority=\"outline\"\n                ref={modalCloseButtonRef}\n              /&gt;\n            &lt;/ModalFooter&gt;\n          &lt;/Modal&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/GlobalPropsProvider&gt;\n  );\n});</code></pre>"},{"location":"components/Modal/#modalbody","title":"ModalBody","text":"<p>ModalBody is a mandatory part of the Modal which allows you to display the content of the Modal.</p> <p>Although the ModalBody allows you to display arbitrary content, you should not place content directly into the ModalBody, but wrap it with ModalContent first.</p> <p>In case your content is expected to be long, consider wrapping ModalContent with ScrollView. Check Scrolling Long Content section below.</p>"},{"location":"components/Modal/#modalfooter","title":"ModalFooter","text":"<p>ModalFooter is an optional part of the Modal which allows you to display user actions.</p> <p>There are two ways to position buttons within the ModalFooter:</p> <ol> <li>You can use provided positioning. Place Button component (or any arbitrary    element) and use <code>justify</code> prop to set up the positioning of those elements.</li> <li>You can customize positioning using another component (e.g.    Toolbar). In that case, set <code>justify</code> to <code>stretch</code>    and position elements on your own.</li> </ol> <pre><code>React.createElement(() =&gt; {\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const [modalJustify, setModalJustify] = React.useState('center');\n  const modalPrimaryButtonRef = React.useRef();\n  const modalCloseButtonRef = React.useRef();\n  {/*\n    The `preventScrollUnderneath` feature is necessary for Modals to work in\n    React UI docs. You may not need it in your application.\n  */}\n  return (\n    &lt;GlobalPropsProvider globalProps={{\n      Modal: { preventScrollUnderneath: window.document.documentElement }\n    }}&gt;\n      &lt;Button\n        label=\"Launch modal with footer variants\"\n        onClick={() =&gt; setModalOpen(true)}\n      /&gt;\n      &lt;div&gt;\n        {modalOpen &amp;&amp; (\n          &lt;Modal\n            closeButtonRef={modalCloseButtonRef}\n            primaryButtonRef={modalPrimaryButtonRef}\n          &gt;\n            &lt;ModalHeader&gt;\n              &lt;ModalTitle&gt;Footer justification&lt;/ModalTitle&gt;\n              &lt;ModalCloseButton onClick={() =&gt; setModalOpen(false)} /&gt;\n            &lt;/ModalHeader&gt;\n            &lt;ModalBody&gt;\n              &lt;ModalContent&gt;\n                &lt;Radio\n                  label=\"Footer justification\"\n                  onChange={(e) =&gt; setModalJustify(e.target.value)}\n                  options={[\n                    {\n                      label: 'start',\n                      value: 'start',\n                    },\n                    {\n                      label: 'center',\n                      value: 'center',\n                    },\n                    {\n                      label: 'end',\n                      value: 'end',\n                    },\n                    {\n                      label: 'space-between',\n                      value: 'space-between',\n                    },\n                    {\n                      label: 'stretch (with a custom layout)',\n                      value: 'stretch',\n                    },\n                  ]}\n                  value={modalJustify}\n                /&gt;\n              &lt;/ModalContent&gt;\n            &lt;/ModalBody&gt;\n            &lt;ModalFooter justify={modalJustify}&gt;\n              {\n                modalJustify === 'stretch'\n                  ? (\n                    &lt;Toolbar justify=\"space-between\"&gt;\n                        &lt;ToolbarGroup&gt;\n                          &lt;ToolbarItem&gt;\n                            &lt;Button\n                              color=\"danger\"\n                              label=\"Delete\"\n                              onClick={() =&gt; setModalOpen(false)}\n                              ref={modalPrimaryButtonRef}\n                            /&gt;\n                          &lt;/ToolbarItem&gt;\n                          &lt;ToolbarItem&gt;\n                            &lt;Button\n                              color=\"warning\"\n                              label=\"Archive\"\n                              onClick={() =&gt; setModalOpen(false)}\n                              ref={modalPrimaryButtonRef}\n                            /&gt;\n                          &lt;/ToolbarItem&gt;\n                        &lt;/ToolbarGroup&gt;\n                      &lt;ToolbarItem&gt;\n                        &lt;Button\n                          color=\"secondary\"\n                          label=\"Close\"\n                          onClick={() =&gt; setModalOpen(false)}\n                          priority=\"outline\"\n                          ref={modalCloseButtonRef}\n                        /&gt;\n                      &lt;/ToolbarItem&gt;\n                    &lt;/Toolbar&gt;\n                  ) : (\n                    &lt;&gt;\n                      &lt;Button\n                        label=\"OK\"\n                        onClick={() =&gt; setModalOpen(false)}\n                        ref={modalPrimaryButtonRef}\n                      /&gt;\n                      &lt;Button\n                        color=\"secondary\"\n                        label=\"Close\"\n                        onClick={() =&gt; setModalOpen(false)}\n                        priority=\"outline\"\n                        ref={modalCloseButtonRef}\n                      /&gt;\n                    &lt;/&gt;\n                  )\n              }\n            &lt;/ModalFooter&gt;\n          &lt;/Modal&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/GlobalPropsProvider&gt;\n  );\n});</code></pre>"},{"location":"components/Modal/#sizes","title":"Sizes","text":"<p>Modal is available in three fixed-width sizes: small, medium, large and fullscreen. Modals of any size automatically shrink when they cannot fit the screen width.</p> <pre><code>React.createElement(() =&gt; {\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const [modalSize, setModalSize] = React.useState('small');\n  const modalPrimaryButtonRef = React.useRef();\n  const modalCloseButtonRef = React.useRef();\n  {/*\n    The `preventScrollUnderneath` feature is necessary for Modals to work in\n    React UI docs. You may not need it in your application.\n  */}\n  return (\n    &lt;GlobalPropsProvider globalProps={{\n      Modal: { preventScrollUnderneath: window.document.documentElement }\n    }}&gt;\n      &lt;Button\n        label=\"Launch small modal\"\n        onClick={() =&gt; {\n          setModalSize('small');\n          setModalOpen(true);\n        }}\n      /&gt;\n      &lt;Button\n        label=\"Launch medium modal\"\n        onClick={() =&gt; {\n          setModalSize('medium');\n          setModalOpen(true);\n        }}\n      /&gt;\n      &lt;Button\n        label=\"Launch large modal\"\n        onClick={() =&gt; {\n          setModalSize('large');\n          setModalOpen(true);\n        }}\n      /&gt;\n      &lt;Button\n        label=\"Launch fullscreen modal\"\n        onClick={() =&gt; {\n          setModalSize('fullscreen');\n          setModalOpen(true);\n        }}\n      /&gt;\n      &lt;div&gt;\n        {modalOpen &amp;&amp; (\n          &lt;Modal\n            closeButtonRef={modalCloseButtonRef}\n            primaryButtonRef={modalPrimaryButtonRef}\n            size={modalSize}\n          &gt;\n            &lt;ModalHeader&gt;\n              &lt;ModalTitle&gt;Delete the user?&lt;/ModalTitle&gt;\n              &lt;ModalCloseButton onClick={() =&gt; setModalOpen(false)} /&gt;\n            &lt;/ModalHeader&gt;\n            &lt;ModalBody&gt;\n              &lt;ModalContent&gt;\n                &lt;p&gt;\n                  Do you really want to delete the user &lt;code&gt;admin&lt;/code&gt;?\n                  This cannot be undone.\n                &lt;/p&gt;\n              &lt;/ModalContent&gt;\n            &lt;/ModalBody&gt;\n            &lt;ModalFooter&gt;\n              &lt;Button\n                color=\"danger\"\n                label=\"Delete\"\n                onClick={() =&gt; setModalOpen(false)}\n                ref={modalPrimaryButtonRef}\n              /&gt;\n              &lt;Button\n                label=\"Close\"\n                onClick={() =&gt; setModalOpen(false)}\n                priority=\"outline\"\n                ref={modalCloseButtonRef}\n              /&gt;\n            &lt;/ModalFooter&gt;\n          &lt;/Modal&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/GlobalPropsProvider&gt;\n  );\n});</code></pre> <p>On top of that, the modal can adjust to the width of its content.</p> <pre><code>React.createElement(() =&gt; {\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const modalPrimaryButtonRef = React.useRef();\n  const modalCloseButtonRef = React.useRef();\n  {/*\n    The `preventScrollUnderneath` feature is necessary for Modals to work in\n    React UI docs. You may not need it in your application.\n  */}\n  return (\n    &lt;GlobalPropsProvider globalProps={{\n      Modal: { preventScrollUnderneath: window.document.documentElement }\n    }}&gt;\n      &lt;Button\n        label=\"Launch auto-width modal\"\n        onClick={() =&gt; setModalOpen(true)}\n      /&gt;\n      &lt;div&gt;\n        {modalOpen &amp;&amp; (\n          &lt;Modal\n            closeButtonRef={modalCloseButtonRef}\n            primaryButtonRef={modalPrimaryButtonRef}\n            size=\"auto\"\n          &gt;\n            &lt;ModalHeader&gt;\n              &lt;ModalTitle&gt;Delete the user?&lt;/ModalTitle&gt;\n              &lt;ModalCloseButton onClick={() =&gt; setModalOpen(false)} /&gt;\n            &lt;/ModalHeader&gt;\n            &lt;ModalBody&gt;\n              &lt;ModalContent&gt;\n                &lt;p&gt;\n                  Do you really want to delete the user &lt;code&gt;admin&lt;/code&gt;?\n                  This cannot be undone.\n                &lt;/p&gt;\n              &lt;/ModalContent&gt;\n            &lt;/ModalBody&gt;\n            &lt;ModalFooter&gt;\n              &lt;Button\n                color=\"danger\"\n                label=\"Delete\"\n                onClick={() =&gt; setModalOpen(false)}\n                ref={modalPrimaryButtonRef}\n              /&gt;\n              &lt;Button\n                label=\"Close\"\n                onClick={() =&gt; setModalOpen(false)}\n                priority=\"outline\"\n                ref={modalCloseButtonRef}\n              /&gt;\n            &lt;/ModalFooter&gt;\n          &lt;/Modal&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/GlobalPropsProvider&gt;\n  );\n});</code></pre> <p>\ud83d\udc49 Please note the auto width may not function correctly in combination with other auto-layout mechanisms, e.g. the auto-width FormLayout. It's just too much magic that doesn't work together (yet?) \ud83c\udfa9.</p> <p>\ud83d\udc49 Beware of horizontal FormLayout inside <code>small</code> modals. While automatic overflow handling comes to the rescue in this kind of scenario, you will be better off with the combination of auto-sized modal and horizontal FormLayout with a fixed label width (i.e. any other than <code>auto</code>, see the previous note).</p> <pre><code>React.createElement(() =&gt; {\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const modalPrimaryButtonRef = React.useRef();\n  const modalCloseButtonRef = React.useRef();\n  {/*\n    The `preventScrollUnderneath` feature is necessary for Modals to work in\n    React UI docs. You may not need it in your application.\n  */}\n  return (\n    &lt;GlobalPropsProvider globalProps={{\n      Modal: { preventScrollUnderneath: window.document.documentElement }\n    }}&gt;\n      &lt;Button\n        label=\"Launch auto-with modal with a form\"\n        onClick={() =&gt; setModalOpen(true)}\n      /&gt;\n      &lt;div&gt;\n        {modalOpen &amp;&amp; (\n          &lt;Modal\n            closeButtonRef={modalCloseButtonRef}\n            primaryButtonRef={modalPrimaryButtonRef}\n            size=\"auto\"\n          &gt;\n            &lt;ModalHeader&gt;\n              &lt;ModalTitle&gt;Form inside modal&lt;/ModalTitle&gt;\n              &lt;ModalCloseButton onClick={() =&gt; setModalOpen(false)} /&gt;\n            &lt;/ModalHeader&gt;\n            &lt;ModalBody&gt;\n              &lt;ModalContent&gt;\n                &lt;FormLayout fieldLayout=\"horizontal\"&gt;\n                  &lt;TextField label=\"A form element\" /&gt;\n                  &lt;TextField label=\"Another form element\" /&gt;\n                  &lt;TextField label=\"Yet another one\" /&gt;\n                &lt;/FormLayout&gt;\n              &lt;/ModalContent&gt;\n            &lt;/ModalBody&gt;\n            &lt;ModalFooter&gt;\n              &lt;Button\n                color=\"primary\"\n                label=\"Save\"\n                onClick={() =&gt; setModalOpen(false)}\n                ref={modalPrimaryButtonRef}\n              /&gt;\n              &lt;Button\n                label=\"Cancel\"\n                onClick={() =&gt; setModalOpen(false)}\n                priority=\"outline\"\n                ref={modalCloseButtonRef}\n              /&gt;\n            &lt;/ModalFooter&gt;\n          &lt;/Modal&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/GlobalPropsProvider&gt;\n  );\n});</code></pre>"},{"location":"components/Modal/#position","title":"Position","text":"<p>Modal can be aligned either to the top or center of the screen.</p> <pre><code>React.createElement(() =&gt; {\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const [modalPosition, setModalPosition] = React.useState('center');\n  const modalPrimaryButtonRef = React.useRef();\n  const modalCloseButtonRef = React.useRef();\n  {/*\n    The `preventScrollUnderneath` feature is necessary for Modals to work in\n    React UI docs. You may not need it in your application.\n  */}\n  return (\n    &lt;GlobalPropsProvider globalProps={{\n      Modal: { preventScrollUnderneath: window.document.documentElement }\n    }}&gt;\n      &lt;Button\n        label=\"Launch modal at center\"\n        onClick={() =&gt; {\n          setModalPosition('center');\n          setModalOpen(true);\n        }}\n      /&gt;\n      &lt;Button\n        label=\"Launch modal at top\"\n        onClick={() =&gt; {\n          setModalPosition('top');\n          setModalOpen(true);\n        }}\n      /&gt;\n      &lt;div&gt;\n        {modalOpen &amp;&amp; (\n          &lt;Modal\n            closeButtonRef={modalCloseButtonRef}\n            position={modalPosition}\n            primaryButtonRef={modalPrimaryButtonRef}\n          &gt;\n            &lt;ModalHeader&gt;\n              &lt;ModalTitle&gt;Delete the user?&lt;/ModalTitle&gt;\n              &lt;ModalCloseButton onClick={() =&gt; setModalOpen(false)} /&gt;\n            &lt;/ModalHeader&gt;\n            &lt;ModalBody&gt;\n              &lt;ModalContent&gt;\n                &lt;p&gt;\n                  Do you really want to delete the user &lt;code&gt;admin&lt;/code&gt;?\n                  This cannot be undone.\n                &lt;/p&gt;\n              &lt;/ModalContent&gt;\n            &lt;/ModalBody&gt;\n            &lt;ModalFooter&gt;\n              &lt;Button\n                color=\"danger\"\n                label=\"Delete\"\n                onClick={() =&gt; setModalOpen(false)}\n                ref={modalPrimaryButtonRef}\n              /&gt;\n              &lt;Button\n                label=\"Close\"\n                onClick={() =&gt; setModalOpen(false)}\n                priority=\"outline\"\n                ref={modalCloseButtonRef}\n              /&gt;\n            &lt;/ModalFooter&gt;\n          &lt;/Modal&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/GlobalPropsProvider&gt;\n  );\n});</code></pre>"},{"location":"components/Modal/#color-variants","title":"Color Variants","text":"<p>Modal can be colored using the <code>color</code> prop. The <code>color</code> prop implements the Feedback color collection and is applied to the border of the modal and the modal footer.</p> <pre><code>React.createElement(() =&gt; {\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const [modalColor, setModalColor] = React.useState('success');\n  const modalCloseButtonRef = React.useRef();\n  {/*\n    The `preventScrollUnderneath` feature is necessary for Modals to work in\n    React UI docs. You may not need it in your application.\n  */}\n  return (\n    &lt;GlobalPropsProvider globalProps={{\n      Modal: { preventScrollUnderneath: window.document.documentElement }\n    }}&gt;\n      &lt;Button\n        label=\"Launch modal with color options\"\n        onClick={() =&gt; setModalOpen(true)}\n      /&gt;\n      &lt;div&gt;\n        {modalOpen &amp;&amp; (\n          &lt;Modal\n            closeButtonRef={modalCloseButtonRef}\n            color={modalColor}\n          &gt;\n            &lt;ModalHeader&gt;\n              &lt;ModalTitle&gt;Modal color&lt;/ModalTitle&gt;\n              &lt;ModalCloseButton onClick={() =&gt; setModalOpen(false)} /&gt;\n            &lt;/ModalHeader&gt;\n            &lt;ModalBody&gt;\n              &lt;ModalContent&gt;\n                &lt;Radio\n                  label=\"Modal color\"\n                  onChange={(e) =&gt; setModalColor(e.target.value)}\n                  options={[\n                    {\n                      label: 'success',\n                      value: 'success',\n                    },\n                    {\n                      label: 'warning',\n                      value: 'warning',\n                    },\n                    {\n                      label: 'danger',\n                      value: 'danger',\n                    },\n                    {\n                      label: 'info',\n                      value: 'info',\n                    },\n                    {\n                      label: 'help',\n                      value: 'help',\n                    },\n                    {\n                      label: 'note',\n                      value: 'note',\n                    },\n                  ]}\n                  value={modalColor}\n                /&gt;\n              &lt;/ModalContent&gt;\n            &lt;/ModalBody&gt;\n            &lt;ModalFooter&gt;\n              &lt;Button\n                color={modalColor}\n                label=\"Close\"\n                onClick={() =&gt; setModalOpen(false)}\n                ref={modalCloseButtonRef}\n              /&gt;\n            &lt;/ModalFooter&gt;\n          &lt;/Modal&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/GlobalPropsProvider&gt;\n  );\n});</code></pre>"},{"location":"components/Modal/#mouse-and-keyboard-control","title":"Mouse and Keyboard Control","text":"<p>Modal can be controlled either by mouse or keyboard. To enhance user experience, primary action can be fired by pressing <code>Enter</code> key and the modal can be closed by pressing the <code>Escape</code> key. Modal can be also closed by clicking on the backdrop.</p> <p>To enable it, you just need to pass a reference to the buttons using <code>primaryButtonRef</code> and <code>closeButtonRef</code> props on Modal. The advantage of passing a reference to the button is that if the button is disabled, the key press or the mouse click will not fire the event.</p> <p>As <code>primaryButtonRef</code> and <code>closeButtonRef</code> are used for more than just actions mentioned above, you can explicitly disable the default behavior by changing <code>allowCloseOnBackdropClick</code>, <code>allowCloseOnEscapeKey</code> or <code>allowPrimaryActionOnEnterKey</code> to <code>false</code>.</p> <p>\ud83d\udc49 We strongly recommend using this feature together with Autofocus for a better user experience.</p>"},{"location":"components/Modal/#autofocus","title":"Autofocus","text":"<p>Autofocus is implemented to enhance the user experience by automatically focussing an element within the modal.</p> <p>How does it work? It tries to find <code>input</code>, <code>textarea</code>, and <code>select</code> elements inside of Modal and moves focus onto the first non-disabled one. If none is found and the <code>primaryButtonRef</code> prop on Modal is set, then the primary button is focused.</p> <p>Autofocus is enabled by default, so if you want to control the focus of elements manually, set the <code>autoFocus</code> prop on Modal to <code>false</code>.</p>"},{"location":"components/Modal/#use-cases","title":"Use Cases","text":""},{"location":"components/Modal/#interaction-blocking","title":"Interaction blocking","text":"<p>Modal can be used to block user interaction while an action is being performed.</p> <pre><code>React.createElement(() =&gt; {\n  const [modalOpen, setModalOpen] = React.useState(null);\n  const modalPrimaryButtonRef = React.useRef();\n  const modalCloseButtonRef = React.useRef();\n  {/*\n    The `preventScrollUnderneath` feature is necessary for Modals to work in\n    React UI docs. You may not need it in your application.\n  */}\n  return (\n    &lt;GlobalPropsProvider globalProps={{\n      Modal: { preventScrollUnderneath: window.document.documentElement }\n    }}&gt;\n      &lt;Button\n        label=\"Launch blocking modal without title\"\n        onClick={() =&gt; {\n          setModalOpen(1);\n          setTimeout(() =&gt; setModalOpen(null), 2500);\n        }}\n      /&gt;\n      &lt;Button\n        label=\"Launch blocking modal with title\"\n        onClick={() =&gt; {\n          setModalOpen(2);\n          setTimeout(() =&gt; setModalOpen(null), 3500);\n        }}\n      /&gt;\n      &lt;div&gt;\n        {modalOpen === 1 &amp;&amp; (\n          &lt;Modal&gt;\n            &lt;ModalBody&gt;\n              &lt;ModalContent&gt;\n                &lt;p className=\"text-center\"&gt;\n                  Application is being loaded.\n                  &lt;span className=\"d-inline-flex align-items-center animation-spin-counterclockwise\"&gt;\n                    &lt;rui-icon icon=\"loading\" /&gt;\n                  &lt;/span&gt;\n                &lt;/p&gt;\n              &lt;/ModalContent&gt;\n            &lt;/ModalBody&gt;\n          &lt;/Modal&gt;\n        )}\n        {modalOpen === 2 &amp;&amp; (\n          &lt;Modal&gt;\n            &lt;ModalHeader&gt;\n              &lt;ModalTitle&gt;Action finished&lt;/ModalTitle&gt;\n            &lt;/ModalHeader&gt;\n            &lt;ModalBody&gt;\n              &lt;ModalContent&gt;\n                &lt;p&gt;\n                  Action has been successfully finished.\n                  You will be redirected within a few seconds.\n                &lt;/p&gt;\n              &lt;/ModalContent&gt;\n            &lt;/ModalBody&gt;\n          &lt;/Modal&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/GlobalPropsProvider&gt;\n  );\n});</code></pre>"},{"location":"components/Modal/#forms","title":"Forms","text":"<p>Modal can be used to display forms. It is recommended to use FormLayout component to layout form fields.</p> <p>While we support only controlled components, and we encourage you to use them, it is possible to use native form and its functionality inside the modal. This might be useful when you need to use native form features like validation, submission, etc.</p> <p>To do so, you need to set <code>allowPrimaryActionOnEnterKey</code> to <code>false</code> and remove <code>onClick</code> from the primary button. Then, you need to set <code>form</code> attribute on the primary button to the <code>id</code> of the form to connect it with the form.</p> <pre><code>React.createElement(() =&gt; {\n  const [modalOpen, setModalOpen] = React.useState(null);\n  const modalPrimaryButtonRef = React.useRef();\n  const modalCloseButtonRef = React.useRef();\n  {/*\n    The `preventScrollUnderneath` feature is necessary for Modals to work in\n    React UI docs. You may not need it in your application.\n  */}\n  return (\n    &lt;GlobalPropsProvider globalProps={{\n      Modal: { preventScrollUnderneath: window.document.documentElement }\n    }}&gt;\n      &lt;Button\n        label=\"Launch modal as form\"\n        onClick={() =&gt; setModalOpen(1)}\n      /&gt;\n      &lt;Button\n        label=\"Launch modal as native form\"\n        onClick={() =&gt; setModalOpen(2)}\n      /&gt;\n      &lt;div&gt;\n        {modalOpen === 1 &amp;&amp; (\n          &lt;Modal\n            closeButtonRef={modalCloseButtonRef}\n            primaryButtonRef={modalPrimaryButtonRef}\n          &gt;\n            &lt;ModalHeader&gt;\n              &lt;ModalTitle&gt;Add new user&lt;/ModalTitle&gt;\n              &lt;ModalCloseButton onClick={() =&gt; setModalOpen(false)} /&gt;\n            &lt;/ModalHeader&gt;\n            &lt;ModalBody&gt;\n              &lt;ModalContent&gt;\n                &lt;FormLayout fieldLayout=\"horizontal\" labelWidth=\"limited\"&gt;\n                  &lt;Toggle\n                    label=\"Enabled\"\n                  /&gt;\n                  &lt;TextField label=\"Username\" required /&gt;\n                  &lt;TextField label=\"Password\" type=\"password\" /&gt;\n                  &lt;CheckboxField label=\"Force password on login\" /&gt;\n                  &lt;Radio\n                    label=\"Type of collaboration\"\n                    options={[\n                      { label: 'Internal', value: 'internal'},\n                      { label: 'External', value: 'external'},\n                    ]}\n                  /&gt;\n                  &lt;SelectField\n                    label=\"Role\"\n                    options={[\n                      { label: 'Programmer', value: 'programmer' },\n                      { label: 'Team leader', value: 'team-leader' },\n                      { label: 'Project manager', value: 'project-manager' },\n                    ]}\n                  /&gt;\n                  &lt;FileInputField label=\"Photo\" onFilesChanged={() =&gt; {}} /&gt;\n                  &lt;TextArea\n                    label=\"Additional info\"\n                    helpText={&lt;p&gt;Enter key is used for new line,&lt;br /&gt;so &lt;strong&gt;Enter won't submit the form&lt;/strong&gt;.&lt;/p&gt;}\n                  /&gt;\n                &lt;/FormLayout&gt;\n              &lt;/ModalContent&gt;\n            &lt;/ModalBody&gt;\n            &lt;ModalFooter&gt;\n              &lt;Button\n                label=\"Save\"\n                onClick={() =&gt; setModalOpen(false)}\n                ref={modalPrimaryButtonRef}\n              /&gt;\n              &lt;Button\n                label=\"Close\"\n                onClick={() =&gt; setModalOpen(false)}\n                priority=\"outline\"\n                ref={modalCloseButtonRef}\n              /&gt;\n            &lt;/ModalFooter&gt;\n          &lt;/Modal&gt;\n        )}\n        {modalOpen === 2 &amp;&amp; (\n          &lt;Modal\n            allowPrimaryActionOnEnterKey={false}\n            closeButtonRef={modalCloseButtonRef}\n            onCancel={(e) =&gt; {\n                console.log('cancel', e);\n            }}\n            onClose={(e) =&gt; {\n                console.log('close', e);\n            }}\n            primaryButtonRef={modalPrimaryButtonRef}\n          &gt;\n            &lt;ModalHeader&gt;\n              &lt;ModalTitle&gt;Add new user using native form&lt;/ModalTitle&gt;\n              &lt;ModalCloseButton onClick={() =&gt; setModalOpen(false)} /&gt;\n            &lt;/ModalHeader&gt;\n            &lt;ModalBody&gt;\n              &lt;ModalContent&gt;\n                &lt;form method=\"dialog\" id=\"native-form\"&gt;\n                  &lt;FormLayout fieldLayout=\"horizontal\" labelWidth=\"limited\"&gt;\n                    &lt;Toggle\n                      label=\"Enabled\"\n                    /&gt;\n                    &lt;TextField label=\"Username\" required /&gt;\n                    &lt;TextField label=\"Password\" type=\"password\" /&gt;\n                    &lt;CheckboxField label=\"Force password on login\" /&gt;\n                    &lt;Radio\n                      label=\"Type of collaboration\"\n                      options={[\n                        { label: 'Internal', value: 'internal'},\n                        { label: 'External', value: 'external'},\n                      ]}\n                    /&gt;\n                    &lt;SelectField\n                      label=\"Role\"\n                      options={[\n                        { label: 'Programmer', value: 'programmer' },\n                        { label: 'Team leader', value: 'team-leader' },\n                        { label: 'Project manager', value: 'project-manager' },\n                      ]}\n                    /&gt;\n                    &lt;FileInputField label=\"Photo\" /&gt;\n                    &lt;TextArea\n                      label=\"Additional info\"\n                      helpText={&lt;p&gt;Enter key is used for new line,&lt;br /&gt;so &lt;strong&gt;Enter won't submit the form&lt;/strong&gt;.&lt;/p&gt;}\n                    /&gt;\n                  &lt;/FormLayout&gt;\n                &lt;/form&gt;\n              &lt;/ModalContent&gt;\n            &lt;/ModalBody&gt;\n            &lt;ModalFooter&gt;\n              &lt;Button\n                form=\"native-form\"\n                label=\"Save\"\n                ref={modalPrimaryButtonRef}\n                type=\"submit\"\n              /&gt;\n              &lt;Button\n                label=\"Close\"\n                onClick={() =&gt; setModalOpen(false)}\n                priority=\"outline\"\n                ref={modalCloseButtonRef}\n              /&gt;\n            &lt;/ModalFooter&gt;\n          &lt;/Modal&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/GlobalPropsProvider&gt;\n  );\n});</code></pre>"},{"location":"components/Modal/#scrolling-long-content","title":"Scrolling Long Content","text":"<p>When modals become too long for the user's viewport or device, they scroll independent of the page itself. This can be done in three ways using the <code>scrolling</code> option of the ModalBody component:</p> <ul> <li><code>auto</code> (default) \u2014 ModalBody is responsible for scrolling,</li> <li><code>custom</code> \u2014 you must provide a custom component to handle scrolling,    typically an instance of ScrollView wrapping    ModalContent,</li> <li><code>none</code> \u2014 entire Modal is responsible for scrolling.</li> </ul> <pre><code>React.createElement(() =&gt; {\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const [modalScrolling, setModalScrolling] = React.useState('auto');\n  const modalCloseButtonRef = React.useRef();\n  const modalPrimaryButtonRef = React.useRef();\n  const modalContent = (\n    &lt;ModalContent&gt;\n      &lt;p&gt;\n        Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n        commodo ligula eget dolor. Aenean massa.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Cum sociis natoque penatibus et magnis dis parturient montes,\n        nascetur ridiculus mus. Donec quam felis, ultricies nec,\n        pellentesque eu, pretium quis, sem.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Nulla consequat massa quis enim. Donec pede justo, fringilla\n        vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\n        ut, imperdiet a, venenatis vitae, justo.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n        commodo ligula eget dolor. Aenean massa.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Cum sociis natoque penatibus et magnis dis parturient montes,\n        nascetur ridiculus mus. Donec quam felis, ultricies nec,\n        pellentesque eu, pretium quis, sem.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Nulla consequat massa quis enim. Donec pede justo, fringilla\n        vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\n        ut, imperdiet a, venenatis vitae, justo.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n        commodo ligula eget dolor. Aenean massa.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Cum sociis natoque penatibus et magnis dis parturient montes,\n        nascetur ridiculus mus. Donec quam felis, ultricies nec,\n        pellentesque eu, pretium quis, sem.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Nulla consequat massa quis enim. Donec pede justo, fringilla\n        vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\n        ut, imperdiet a, venenatis vitae, justo.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n        commodo ligula eget dolor. Aenean massa.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Cum sociis natoque penatibus et magnis dis parturient montes,\n        nascetur ridiculus mus. Donec quam felis, ultricies nec,\n        pellentesque eu, pretium quis, sem.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Nulla consequat massa quis enim. Donec pede justo, fringilla\n        vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\n        ut, imperdiet a, venenatis vitae, justo.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n        commodo ligula eget dolor. Aenean massa.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Cum sociis natoque penatibus et magnis dis parturient montes,\n        nascetur ridiculus mus. Donec quam felis, ultricies nec,\n        pellentesque eu, pretium quis, sem.\n      &lt;/p&gt;\n      &lt;p&gt;\n        Nulla consequat massa quis enim. Donec pede justo, fringilla\n        vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus\n        ut, imperdiet a, venenatis vitae, justo.\n      &lt;/p&gt;\n    &lt;/ModalContent&gt;\n  );\n  {/*\n    The `preventScrollUnderneath` feature is necessary for Modals to work in\n    React UI docs. You may not need it in your application.\n  */}\n  return (\n    &lt;GlobalPropsProvider globalProps={{\n      Modal: { preventScrollUnderneath: window.document.documentElement }\n    }}&gt;\n      &lt;Button\n        label=\"Launch modal with scrolling body\"\n        onClick={() =&gt; {\n          setModalScrolling('auto');\n          setModalOpen(true);\n        }}\n      /&gt;\n      &lt;Button\n        label=\"Launch modal with ScrollView\"\n        onClick={() =&gt; {\n          setModalScrolling('custom');\n          setModalOpen(true);\n        }}\n      /&gt;\n      &lt;Button\n        label=\"Launch modal with non-scrolling body\"\n        onClick={() =&gt; {\n          setModalScrolling('none');\n          setModalOpen(true);\n        }}\n      /&gt;\n      &lt;div&gt;\n        {modalOpen &amp;&amp; (\n          &lt;Modal\n            autoFocus={false}\n            closeButtonRef={modalCloseButtonRef}\n            primaryButtonRef={modalPrimaryButtonRef}\n            size=\"small\"\n          &gt;\n            &lt;ModalHeader&gt;\n              &lt;ModalTitle&gt;Modal with long content&lt;/ModalTitle&gt;\n              &lt;ModalCloseButton onClick={() =&gt; setModalOpen(false)} /&gt;\n            &lt;/ModalHeader&gt;\n            &lt;ModalBody scrolling={modalScrolling}&gt;\n              {\n                modalScrolling === 'custom'\n                  ? (\n                    &lt;ScrollView&gt;\n                      {modalContent}\n                    &lt;/ScrollView&gt;\n                  )\n                  : modalContent\n              }\n            &lt;/ModalBody&gt;\n            &lt;ModalFooter&gt;\n              &lt;Button\n                label=\"OK\"\n                onClick={() =&gt; setModalOpen(false)}\n                ref={modalPrimaryButtonRef}\n              /&gt;\n              &lt;Button\n                label=\"Close\"\n                onClick={() =&gt; setModalOpen(false)}\n                priority=\"outline\"\n                ref={modalCloseButtonRef}\n              /&gt;\n            &lt;/ModalFooter&gt;\n          &lt;/Modal&gt;\n        )}\n      &lt;/div&gt;\n    &lt;/GlobalPropsProvider&gt;\n  );\n});</code></pre>"},{"location":"components/Modal/#long-content-and-autofocus","title":"Long Content and Autofocus","text":"<p>\ud83d\udc49 If you wrap ModalContent with ScrollView, you may want to turn <code>autoFocus</code> off to prevent the modal from scrolling to the end immediately after being opened.</p>"},{"location":"components/Modal/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to:</p> <ul> <li>the <code>&lt;dialog&gt;</code> HTML element in case of the <code>Modal</code> component.</li> <li>the root <code>&lt;div&gt;</code> HTML element in case of <code>ModalHeader</code>, <code>ModalBody</code>, <code>ModalContent</code>   and <code>ModalFooter</code> components.</li> <li>the heading (e.g. <code>&lt;h1&gt;</code>) HTML element in case of the <code>ModalTitle</code> component.</li> <li>the native HTML <code>&lt;button&gt;</code> in case of the <code>ModalCloseButton</code> component.</li> </ul> <p>This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;dialog&gt;</code> HTML element attributes</li> <li><code>&lt;div&gt;</code> HTML element attributes</li> <li><code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code> HTML element attributes</li> <li><code>&lt;button&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/Modal/#api","title":"API","text":""},{"location":"components/Modal/#modalheader_1","title":"ModalHeader","text":""},{"location":"components/Modal/#modaltitle","title":"ModalTitle","text":""},{"location":"components/Modal/#modalclosebutton","title":"ModalCloseButton","text":""},{"location":"components/Modal/#modalbody_1","title":"ModalBody","text":""},{"location":"components/Modal/#modalcontent","title":"ModalContent","text":""},{"location":"components/Modal/#modalfooter_1","title":"ModalFooter","text":""},{"location":"components/Modal/#theming","title":"Theming","text":"Custom Property Description <code>--rui-Modal__padding-x</code> Inline padding of individual modal components <code>--rui-Modal__padding-y</code> Block padding of individual modal components <code>--rui-Modal__background</code> Modal background (including <code>url()</code> or gradient) <code>--rui-Modal__box-shadow</code> Modal box shadow <code>--rui-Modal__separator__width</code> Width of separator between modal header, body, and footer <code>--rui-Modal__separator__color</code> Color of separator between modal header, body, and footer <code>--rui-Modal__outer-spacing-xs</code> Spacing around modal, <code>xs</code> screen size <code>--rui-Modal__outer-spacing-sm</code> Spacing around modal, <code>sm</code> screen size and bigger <code>--rui-Modal__header__gap</code> Modal header gap between children <code>--rui-Modal__footer__background</code> Modal footer background (including <code>url()</code> or gradient) <code>--rui-Modal__footer__gap</code> Modal footer gap between children <code>--rui-Modal__backdrop__background</code> Modal backdrop background (including <code>url()</code> or gradient) <code>--rui-Modal--auto__min-width</code> Min width of auto-sized modal (when enough screen estate) <code>--rui-Modal--auto__max-width</code> Max width of auto-sized modal (when enough screen estate) <code>--rui-Modal--small__width</code> Width of small modal <code>--rui-Modal--medium__width</code> Width of medium modal <code>--rui-Modal--large__width</code> Width of large modal <code>--rui-Modal--fullscreen__width</code> Width of fullscreen modal <code>--rui-Modal--fullscreen__height</code> Height of fullscreen modal <code>--rui-Modal__animation__duration</code> Duration of animation used (when opening modal)"},{"location":"components/Modal/#theming-variants","title":"Theming Variants","text":"<p>It's possible to adjust the theme of specific color variant. Naming convention looks as follows:</p> <p><code>--rui-Modal--&lt;COLOR&gt;__&lt;PROPERTY&gt;</code></p> <p>Where:</p> <ul> <li><code>&lt;COLOR&gt;</code> is a value from supported   color collections   (check color variants and API to see which   collections are supported),</li> <li><code>&lt;PROPERTY&gt;</code> is one of <code>border-color</code> or <code>background-color</code>.</li> </ul>"},{"location":"components/Paper/","title":"Paper","text":"<p>Paper is a basic surface to hold content.</p>"},{"location":"components/Paper/#basic-usage","title":"Basic Usage","text":"<p>To implement the Paper component, you need to import it first:</p> <pre><code>import { Paper } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;Paper&gt;\n  Hello!\n&lt;/Paper&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/Paper/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Paper is designed for non-white background. You may want to either use its   raised variant or customize   the default appearance to make it stand out on white background.</p> </li> <li> <p>Paper, or Card? Paper is a basic surface to put content on. However,   there is also the Card component. While Paper is   usually used to hold larger content areas like lists, grids, or forms, Card is   designed for displaying items. Card also supports more visual options.</p> </li> </ul>"},{"location":"components/Paper/#raised-paper","title":"Raised Paper","text":"<p>Add optional shadow to lift the paper above background.</p> <pre><code>&lt;Paper raised&gt;\n  Hello! I&amp;apos;m paper and I&amp;apos;m raised.\n&lt;/Paper&gt;</code></pre>"},{"location":"components/Paper/#muted-paper","title":"Muted Paper","text":"<p>Dim background and add transparency to visually suppress the Paper.</p> <pre><code>&lt;Paper muted&gt;\n  Sssh! I&amp;apos;m paper and I&amp;apos;m muted.\n&lt;/Paper&gt;</code></pre>"},{"location":"components/Paper/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the root <code>&lt;div&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;div&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/Paper/#api","title":"API","text":""},{"location":"components/Paper/#theming","title":"Theming","text":"Custom Property Description <code>--rui-Paper__padding</code> Padding of Paper <code>--rui-Paper__border-width</code> Border width <code>--rui-Paper__border-color</code> Border color <code>--rui-Paper__border-radius</code> Corner radius <code>--rui-Paper__background-color</code> Paper background color <code>--rui-Paper--muted__background-color</code> Background color of muted paper <code>--rui-Paper--muted__opacity</code> Opacity of muted paper <code>--rui-Paper--raised__box-shadow</code> Box shadow of raised paper"},{"location":"components/Popover/","title":"Popover","text":"<p>Popover displays additional information without interrupting user flow.</p>"},{"location":"components/Popover/#basic-usage","title":"Basic Usage","text":"<p>To implement the Popover component, you need to import it first:</p> <pre><code>import { Popover, PopoverWrapper } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>React.createElement(() =&gt; {\n  const [isPopoverOpen, setIsPopoverOpen] = React.useState(false);\n  // All inline styles in this example are for demonstration purposes only.\n  return (\n    &lt;div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n        minWidth: '20rem',\n        minHeight: '10rem',\n      }}\n    &gt;\n      &lt;PopoverWrapper&gt;\n        &lt;Button\n          aria-describedby={isPopoverOpen ? 'my-popover' : undefined}\n          label=\"Want to see a popover? Click me!\"\n          onClick={() =&gt; setIsPopoverOpen(!isPopoverOpen)}\n        /&gt;\n        {isPopoverOpen &amp;&amp; (\n          &lt;Popover id=\"my-popover\"&gt;\n            Hello there!\n          &lt;/Popover&gt;\n        )}\n      &lt;/PopoverWrapper&gt;\n    &lt;/div&gt;\n  );\n});</code></pre> <p>See API for all available options.</p>"},{"location":"components/Popover/#placement","title":"Placement","text":"<p>Available placements are: top, right, bottom, and left. Additionally, all basic placements can be aligned to the center (default, no suffix), start (e.g. <code>top-start</code>), or end (e.g. <code>bottom-end</code>). Check Popover API for the complete list of accepted values.</p> <pre><code>React.createElement(() =&gt; {\n  const [align, setAlign] = React.useState('');\n  // All inline styles in this example are for demonstration purposes only.\n  return (\n    &lt;&gt;\n      &lt;Toolbar align=\"baseline\"&gt;\n        &lt;ToolbarItem&gt;\n          &lt;span id=\"alignment-options-label\"&gt;Alignment:&lt;/span&gt;\n        &lt;/ToolbarItem&gt;\n        &lt;ToolbarItem&gt;\n          &lt;ButtonGroup aria-labelledby=\"alignment-options-label\" priority=\"outline\"&gt;\n            &lt;Button\n              aria-pressed={align === '-start'}\n              color={align === '-start' ? 'selected' : 'secondary'}\n              label=\"start\"\n              onClick={() =&gt; setAlign('-start')}\n            /&gt;\n            &lt;Button\n              aria-pressed={align === ''}\n              color={align === '' ? 'selected' : 'secondary'}\n              label=\"center\"\n              onClick={() =&gt; setAlign('')}\n            /&gt;\n            &lt;Button\n              aria-pressed={align === '-end'}\n              color={align === '-end' ? 'selected' : 'secondary'}\n              label=\"end\"\n              onClick={() =&gt; setAlign('-end')}\n            /&gt;\n          &lt;/ButtonGroup&gt;\n        &lt;/ToolbarItem&gt;\n      &lt;/Toolbar&gt;\n      &lt;div\n        style={{\n          display: 'grid',\n          placeContent: 'center',\n          minWidth: '20rem',\n          minHeight: '15rem',\n        }}\n      &gt;\n        &lt;PopoverWrapper&gt;\n          &lt;docoff-placeholder bordered aria-describedby=\"my-popover-top\"&gt;\n            Popovers\n            &lt;br /&gt;\n            all day long\u2026\n          &lt;/docoff-placeholder&gt;\n          &lt;Popover id=\"my-popover-top\" placement={`top${align}`}&gt;\n            Top side\n          &lt;/Popover&gt;\n          &lt;Popover id=\"my-popover-right\" placement={`right${align}`}&gt;\n            Right side\n          &lt;/Popover&gt;\n          &lt;Popover id=\"my-popover-bottom\" placement={`bottom${align}`}&gt;\n            Bottom side\n          &lt;/Popover&gt;\n          &lt;Popover id=\"my-popover-left\" placement={`left${align}`}&gt;\n            Left side\n          &lt;/Popover&gt;\n        &lt;/PopoverWrapper&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n});</code></pre>"},{"location":"components/Popover/#popoverwrapper","title":"PopoverWrapper","text":"<p>PopoverWrapper is an optional wrapper to make positioning of Popover even easier.</p> <p>By default, Popover is placed relative to the closest parent element with <code>position: relative</code> or <code>position: absolute</code>. Maybe you already have one of these in your CSS. PopoverWrapper is here for situations when you don't.</p> <pre><code>&lt;PopoverWrapper&gt;\n  &lt;Button\n    aria-describedby={isPopoverOpen ? 'my-popover' : undefined}\n    label=\"Want to see a popover? Click me!\"\n    onClick={() =&gt; setIsPopoverOpen(!isPopoverOpen)}\n  /&gt;\n  {isPopoverOpen &amp;&amp; &lt;Popover id=\"my-popover\"&gt;Hello there!&lt;/Popover&gt;}\n&lt;/PopoverWrapper&gt;</code></pre> <p>How do you know you may need PopoverWrapper?</p> <ul> <li>You are not rendering Popover in a React portal.</li> <li>You are using Popover in a complex layout and it does not pop up where you   need it.</li> <li>You are using Floating UI with <code>absolute</code> positioning strategy (see   Advanced Positioning below) and your Popover keeps to   be misplaced.</li> <li>You have no idea what CSS <code>position</code> is and just want to get it working.</li> </ul> <p>To sum it up, usually you will need either PopoverWrapper around your content or <code>position: [ relative | absolute ]</code> somewhere in your CSS (but you never need both!). Nevertheless, in the simplest situations, like in a single-column page layout, you may not need either of these at all.</p> <p>Head to PopoverWrapper API for all available options.</p>"},{"location":"components/Popover/#advanced-positioning","title":"Advanced Positioning","text":"<p>While the basic setup can be sufficient in some scenarios, dropping a Popover usually won't be so easy. To handle all tricky situations and edge cases automatically, including smart position updates to ensure Popover visibility, we recommend to involve an external library designed specifically for this purpose.</p> <p>To position the popover, you need to provide the <code>placementStyle</code> prop with the style you want to apply to the popover. This prop should only be used to position the popover. The allowed props are:</p> <ul> <li><code>position</code></li> <li><code>inset</code></li> <li><code>inset-inline-start</code></li> <li><code>inset-inline-end</code></li> <li><code>inset-block-start</code></li> <li><code>inset-block-end</code></li> <li><code>top</code></li> <li><code>right</code></li> <li><code>bottom</code></li> <li><code>left</code></li> <li><code>translate</code></li> <li><code>transform-origin</code></li> </ul> <p>\u26a0\ufe0f <code>inset</code> is a shorthand for <code>top right bottom left</code>, not for <code>inset-*</code> properties.</p> <p>As opposed to <code>top right bottom left</code> and the <code>inset</code> shorthand, <code>inset-*</code> properties are writing-direction aware.</p> <p>\u2139\ufe0f The following example is using external library Floating UI. To use Floating UI, install it first:</p> <pre><code>npm install --save @floating-ui/react-dom</code></pre> <p>And import it along with Popover, e.g.:</p> <pre><code>import FloatingUIReactDOM from '@floating-ui/react-dom';\nimport { Popover } from '@react-ui-org/react-ui';</code></pre> <p>As opposed to the basic setup, Popover will be placed according to its triggering component (<code>reference</code>), but still recognizing the closest parent element with <code>position: relative</code> or <code>position: absolute</code> if there is any.</p> <p>Popover reacts on the <code>ref</code> option, necessary for advanced positioning: when <code>ref</code> is set, Popover resets its built-in positioning and relies on provided <code>style</code>.</p> <p>\ud83d\udc49 Please consult Floating UI documentation to understand how it works and to get an idea of all possible cases you may need to cover.</p> <p>\ud83d\uddb1 Try scrolling the example to see how Popover placement is updated.</p> <pre><code>React.createElement(() =&gt; {\n  const [isPopoverOpen, setIsPopoverOpen] = React.useState(false);\n  const [placement, setPlacement] = React.useState('top');\n  const {\n    x,\n    y,\n    reference,\n    floating,\n    placement: finalPlacement,\n    strategy,\n  } = FloatingUIReactDOM.useFloating({\n    placement,\n    middleware: [FloatingUIReactDOM.flip()],\n    whileElementsMounted: FloatingUIReactDOM.autoUpdate,\n  });\n  const placementOptions = [\n    'top',\n    'top-start',\n    'top-end',\n    'right',\n    'right-start',\n    'right-end',\n    'bottom',\n    'bottom-start',\n    'bottom-end',\n    'left',\n    'left-start',\n    'left-end',\n  ];\n  // All inline styles in this example EXCEPT Popover `style` are for\n  // demonstration purposes only.\n  return (\n    &lt;&gt;\n      &lt;Toolbar&gt;\n        &lt;ToolbarItem&gt;\n          &lt;SelectField\n            label=\"Suggested placement:\"\n            onChange={e =&gt; setPlacement(e.target.value)}\n            options={placementOptions.map((el) =&gt; ({\n              label: el,\n              value: el,\n            }))}\n            value={placement}\n          /&gt;\n        &lt;/ToolbarItem&gt;\n        &lt;ToolbarItem&gt;\n          &lt;div className=\"mb-2\"&gt;Final placement:&lt;/div&gt;\n          &lt;code&gt;{finalPlacement}&lt;/code&gt;\n        &lt;/ToolbarItem&gt;\n      &lt;/Toolbar&gt;\n      &lt;div\n        style={{\n          width: '40rem',\n          maxWidth: '100%',\n          height: '10rem',\n          overflow: 'auto',\n        }}\n      &gt;\n        &lt;div\n          style={{\n            position: 'relative',\n            width: '60rem',\n            height: '20rem',\n            paddingBlock: '7rem',\n            textAlign: 'center',\n          }}\n        &gt;\n          &lt;Button\n            aria-describedby={isPopoverOpen ? 'my-advanced-popover' : undefined}\n            label=\"Trigger Popover\"\n            onClick={() =&gt; setIsPopoverOpen(!isPopoverOpen)}\n            ref={reference}\n          /&gt;\n          {isPopoverOpen &amp;&amp; (\n            &lt;Popover\n              id=\"my-advanced-popover\"\n              placement={finalPlacement}\n              placementStyle={{\n                position: strategy,\n                top: `${y}px`,\n                left: `${x}px`,\n              }}\n              ref={floating}\n            &gt;\n              Auto-flipping Popover\n            &lt;/Popover&gt;\n          )}\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/&gt;\n  );\n});</code></pre>"},{"location":"components/Popover/#controlled-popover","title":"Controlled Popover","text":"<p>Popover API can be used to control visibility of Popover component. You need to set <code>id</code> on the trigger element and matching <code>popoverTargetId</code> attribute on the Popover component. This leverages the browser's Popover API to control the popover, automatically closing it when the trigger or the backdrop is pressed.</p> <pre><code>React.createElement(() =&gt; {\n  // All inline styles in this example are for demonstration purposes only.\n  return (\n    &lt;div\n      style={{\n        display: 'grid',\n        placeContent: 'center',\n        minWidth: '20rem',\n        minHeight: '10rem',\n      }}\n    &gt;\n      &lt;PopoverWrapper&gt;\n        &lt;Button\n          label=\"Want to see a popover? Click me!\"\n          popovertarget=\"my-popover-helper\"\n        /&gt;\n        &lt;Popover id=\"my-popover\" popoverTargetId=\"my-popover-helper\"&gt;\n            Hello there!\n        &lt;/Popover&gt;\n      &lt;/PopoverWrapper&gt;\n    &lt;/div&gt;\n  );\n});</code></pre>"},{"location":"components/Popover/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the root <code>&lt;div&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;div&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/Popover/#forwarding-ref","title":"Forwarding ref","text":"<p>If you provide ref, it is forwarded to the root native HTML <code>&lt;div&gt;</code> element, which enables Advanced Positioning.</p>"},{"location":"components/Popover/#api","title":"API","text":""},{"location":"components/Popover/#popoverwrapper-api","title":"PopoverWrapper API","text":""},{"location":"components/Popover/#theming","title":"Theming","text":"Custom Property Description <code>--rui-Popover__width</code> Popover width <code>--rui-Popover__padding</code> Popover padding <code>--rui-Popover__border-width</code> Border width <code>--rui-Popover__border-color</code> Border color <code>--rui-Popover__border-radius</code> Corner radius <code>--rui-Popover__color</code> Text color <code>--rui-Popover__background-color</code> Background color <code>--rui-Popover__box-shadow</code> Popover box shadow"},{"location":"components/Radio/","title":"Radio","text":"<p>Radio allows users to select one option from a set.</p>"},{"location":"components/Radio/#basic-usage","title":"Basic Usage","text":"<p>To implement the Radio component, you need to import it first:</p> <pre><code>import { Radio } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  return (\n    &lt;Radio\n      label=\"Your favourite fruit\"\n      onChange={(e) =&gt; setFruit(e.target.value)}\n      options={[\n        {\n          label: 'Apple',\n          value: 'apple',\n        },\n        {\n          label: 'Banana',\n          value: 'banana',\n        },\n        {\n          label: 'Grapefruit',\n          value: 'grapefruit',\n        },\n      ]}\n      value={fruit}\n    /&gt;\n  );\n})</code></pre> <p>See API for all available options.</p>"},{"location":"components/Radio/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Use Radio for just a few options. For larger sets of many options (say 4   and more) consider using the SelectField   component. This will help keep your UI clean and uncluttered and prevent your   users from being overwhelmed by too many options.</p> </li> <li> <p>Don't use for boolean (true/false) selection or to toggle things on and   off. CheckboxField and   Toggle are more suitable for such cases.</p> </li> <li> <p>Use short and descriptive labels, ideally nouns rather than seemingly   polite phrases like Please select your favourite fruit. Short labels will   help your users accomplish their task faster.</p> </li> <li> <p>Use text labels unless it is necessary to wrap text label into   Popover-like to component to provide additional info about the field.</p> </li> <li> <p>Only make the Radio's label invisible when there is another visual   clue to guide users through filling the input.</p> </li> <li> <p>When a short label is not enough, use help texts to guide users before   they enter anything.</p> </li> <li> <p>Use clear, calm error messages when there's a problem with what they   entered.</p> </li> <li> <p>In the background, Radio uses the <code>fieldset</code> element. Not only it   improves the accessibility of the group, it also allows you to make use of   its built-in features like disabling all nested inputs or pairing the group   with a form outside. Consult the MDN docs to learn more.</p> </li> </ul> <p>\ud83d\udcd6 Read more about checkboxes and radios at Nielsen Norman Group.</p>"},{"location":"components/Radio/#invisible-label","title":"Invisible Label","text":"<p>While it may be acceptable for login screens with just a few fields or for other simple forms, it's dangerous to hide labels from users in most cases. Keep in mind you should provide another visual clue so users know what to fill into the input.</p> <pre><code>React.createElement(() =&gt; {\n  const [frequency, setFrequency] = React.useState('weekly');\n  return (\n    &lt;Radio\n      isLabelVisible={false}\n      label=\"Newsletter frequency\"\n      onChange={(e) =&gt; setFrequency(e.target.value)}\n      options={[\n        {\n          label: 'I want to subscribe to the weekly newsletter',\n          value: 'weekly',\n        },\n        {\n          label: 'I want to subscribe to the monthly newsletter',\n          value: 'monthly',\n        },\n        {\n          label: \"I don't wish to receive anything\",\n          value: 'never',\n        },\n      ]}\n      value={frequency}\n    /&gt;\n  );\n})</code></pre>"},{"location":"components/Radio/#horizontal-layout","title":"Horizontal Layout","text":"<p>The default vertical layout is very easy to use and work with. However, there are situations where horizontal layout suits better \u2014 and that's why React UI supports this kind of layout as well.</p> <pre><code>React.createElement(() =&gt; {\n  const [frequency, setFrequency] = React.useState('weekly');\n  return (\n    &lt;Radio\n      label=\"Newsletter frequency\"\n      layout=\"horizontal\"\n      onChange={(e) =&gt; setFrequency(e.target.value)}\n      options={[\n        {\n          label: 'I want to subscribe to the weekly newsletter',\n          value: 'weekly',\n        },\n        {\n          label: 'I want to subscribe to the monthly newsletter',\n          value: 'monthly',\n        },\n        {\n          label: \"I don't wish to receive anything\",\n          value: 'never',\n        },\n      ]}\n      value={frequency}\n    /&gt;\n  );\n})</code></pre>"},{"location":"components/Radio/#help-text","title":"Help Text","text":"<p>You may provide an additional help text to clarify how the input should be filled.</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  return (\n    &lt;Radio\n      helpText=\"What do you prefer?\"\n      label=\"Your favourite fruit\"\n      onChange={(e) =&gt; setFruit(e.target.value)}\n      options={[\n        {\n          label: 'Apple',\n          value: 'apple',\n        },\n        {\n          label: 'Banana',\n          value: 'banana',\n        },\n        {\n          label: 'Grapefruit',\n          value: 'grapefruit',\n        },\n      ]}\n      value={fruit}\n    /&gt;\n  );\n})</code></pre>"},{"location":"components/Radio/#states","title":"States","text":""},{"location":"components/Radio/#validation-states","title":"Validation States","text":"<p>Validation states visually present the result of validation of the input. You should always provide a validation message for states other than valid so users know what happened and what action they should take or what options they have.</p> <pre><code>  React.createElement(() =&gt; {\n    const [fruit, setFruit] = React.useState('apple');\n    const options = [\n      {\n        label: 'Apple',\n        value: 'apple',\n      },\n      {\n        label: 'Banana',\n        value: 'banana',\n      },\n      {\n        label: 'Grapefruit',\n        value: 'grapefruit',\n      },\n    ];\n    return (\n      &lt;&gt;\n        &lt;Radio\n          label=\"Your favourite fruit\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={options}\n          required\n          validationState=\"valid\"\n          validationText=\"Great, they're in stock!\"\n          value={fruit}\n        /&gt;\n        &lt;Radio\n          label=\"Your favourite fruit\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={options}\n          required\n          validationState=\"warning\"\n          validationText=\"Oh, really?\"\n          value={fruit}\n        /&gt;\n        &lt;Radio\n          label=\"Your favourite fruit\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={options}\n          required\n          validationState=\"invalid\"\n          validationText=\"You must select one kind of fruit.\"\n          value={fruit}\n        /&gt;\n      &lt;/&gt;\n    );\n  })</code></pre>"},{"location":"components/Radio/#required-state","title":"Required State","text":"<p>The required state indicates that the input is mandatory.</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  return (\n    &lt;Radio\n      label=\"Your favourite fruit\"\n      onChange={(e) =&gt; setFruit(e.target.value)}\n      options={[\n        {\n          label: 'Apple',\n          value: 'apple',\n        },\n        {\n          label: 'Banana',\n          value: 'banana',\n        },\n        {\n          label: 'Grapefruit',\n          value: 'grapefruit',\n        },\n      ]}\n      value={fruit}\n      required\n    /&gt;\n  );\n})</code></pre>"},{"location":"components/Radio/#styling-the-required-state","title":"Styling the Required State","text":"<p>All form fields in React UI can be styled to indicate the required state.</p> <p>However, you may find yourself in a situation where a form field is valid in both selected and unselected states, for example to turn on or off a feature. If your project uses the label color as the primary means to indicate the required state of input fields and the usual asterisk <code>*</code> is omitted, you may want to keep the label color consistent for both states to avoid confusion.</p> <p>For this edge case, there is the <code>renderAsRequired</code> prop:</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n   &lt;React.Fragment&gt;\n      &lt;style&gt;\n      {`\n        .example {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 1rem 0.5rem;\n        }\n\n        .example--themed-form-fields {\n          --rui-FormField__label__color: var(--rui-color-text-secondary);\n          --rui-FormField--required__label__color: var(--rui-color-text-primary);\n          --rui-FormField--required__sign: '';\n        }\n      `}\n      &lt;/style&gt;\n      &lt;div class=\"example example--themed-form-fields\"&gt;\n        &lt;Radio\n          label=\"This field is optional\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={options}\n          value={fruit}\n        /&gt;\n        &lt;Radio\n          label=\"This field is optional but looks like required\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={options}\n          value={fruit}\n          renderAsRequired\n        /&gt;\n      &lt;/div&gt;\n    &lt;/React.Fragment&gt;\n  );\n})</code></pre> <p>It renders the field as if it was required, but doesn't add the <code>required</code> attribute to the actual input.</p>"},{"location":"components/Radio/#disabled-state","title":"Disabled State","text":"<p>It's possible to disable just some options or the whole set.</p> <pre><code>  React.createElement(() =&gt; {\n    const [fruit, setFruit] = React.useState('apple');\n    const options = [\n      {\n        label: 'Apple',\n        value: 'apple',\n      },\n      {\n        label: 'Banana',\n        value: 'banana',\n      },\n      {\n        disabled: true,\n        label: 'Grapefruit',\n        value: 'grapefruit',\n      },\n    ];\n    return (\n      &lt;&gt;\n        &lt;Radio\n          label=\"Your favourite fruit\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={options}\n          value={fruit}\n        /&gt;\n        &lt;Radio\n          disabled\n          label=\"Your favourite fruit\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={options}\n          value=\"apple\"\n        /&gt;\n      &lt;/&gt;\n    );\n  })</code></pre>"},{"location":"components/Radio/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the <code>&lt;input&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;input type=\"radio\" /&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/Radio/#api","title":"API","text":""},{"location":"components/Radio/#theming","title":"Theming","text":"<p>Head to Forms Theming to see shared form theming options. On top of that, the following options are available for Radio.</p> Custom Property Description <code>--rui-FormField--check__input--radio__border-radius</code> Input corner radius <code>--rui-FormField--check__input--radio--checked__background-image</code> Checked input background image (inline, URL, \u2026)"},{"location":"components/ScrollView/","title":"ScrollView","text":"<p>ScrollView makes long content scrollable.</p> <p>\ud83d\udc49 Please note that HTML is rendered even when no children are provided. This is needed to allow the auto-scroll feature to work.</p>"},{"location":"components/ScrollView/#basic-usage","title":"Basic Usage","text":"<p>To implement the ScrollView component, you need to import it first:</p> <pre><code>import { ScrollView } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;docoff-placeholder height=\"200px\"&gt;\n  &lt;ScrollView&gt;\n    &lt;div&gt;\n      Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo\n      ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis\n      dis parturient montes, nascetur ridiculus mus. Donec quam felis,\n      ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa\n      quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget,\n      arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.\n      Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras\n      dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend\n      tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac,\n      enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus.\n      Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean\n      imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper\n      ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus\n      eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing\n      sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar,\n      hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec\n      vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit\n      amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris\n      sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget\n      bibendum sodales, augue velit cursus nunc.Aenean massa. Cum sociis\n      natoque penatibus et magnis dis parturient montes, nascetur ridiculus\n      mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis,\n      sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel,\n      aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet\n      a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium.\n      Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean\n      vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat\n      vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis,\n      feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet.\n      Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue.\n      Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus.\n      Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper\n      libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit\n      vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante\n      tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus.\n      Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt.\n      Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis\n      magna. Sed consequat, leo eget bibendum sodales, augue velit cursus\n      nunc.\n    &lt;/div&gt;\n  &lt;/ScrollView&gt;\n&lt;/docoff-placeholder&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/ScrollView/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>ScrollView takes up all available horizontal space and expands vertically   according to the length of its content. Depending on your layout, you may need   to restrict the height of its parent to activate scrolling.</p> </li> <li> <p>While arrow controls are optional in the vertical mode, you should always   enable arrows in the horizontal mode when the scrollbar is disabled.   Because if you don't, users without horizontal-scrolling-enabled devices   (like an old-school mouse) might not be able to access your content.</p> </li> <li> <p>For dynamic content such as chat window or console output, consider using the   auto-scroll feature. This will ensure the newest content is always   visible.</p> </li> <li> <p>ScrollView enables scrolling on all screen sizes. If you need to make an   area in your app scrollable based on viewport size, please use custom CSS   with media queries instead.</p> </li> <li> <p>ScrollView only supports scrolling in a single direction at a time. It   crops content that would possibly overflow in the other direction because   additional scrollbars would be unreachable under scrolling shadows. If you   need your content to be ready for bi-directional scrolling, either consider   using just <code>overflow: auto</code> instead of ScrollView, or make your content   scrollable before putting it into ScrollView and make sure its scrollbars   don't collide with scrolling shadows.</p> </li> </ul>"},{"location":"components/ScrollView/#arrows","title":"Arrows","text":"<p>You can suppress the system scrollbar and display arrow controls instead.</p> <pre><code>&lt;docoff-placeholder height=\"200px\"&gt;\n  &lt;ScrollView arrows scrollbar={false}&gt;\n    &lt;div&gt;\n      Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo\n      ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis\n      dis parturient montes, nascetur ridiculus mus. Donec quam felis,\n      ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa\n      quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget,\n      arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.\n      Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras\n      dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend\n      tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac,\n      enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus.\n      Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean\n      imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper\n      ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus\n      eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing\n      sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar,\n      hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec\n      vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit\n      amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris\n      sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget\n      bibendum sodales, augue velit cursus nunc.Aenean massa. Cum sociis\n      natoque penatibus et magnis dis parturient montes, nascetur ridiculus\n      mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis,\n      sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel,\n      aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet\n      a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium.\n      Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean\n      vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat\n      vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis,\n      feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet.\n      Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue.\n      Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus.\n      Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper\n      libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit\n      vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante\n      tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus.\n      Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt.\n      Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis\n      magna. Sed consequat, leo eget bibendum sodales, augue velit cursus\n      nunc.\n    &lt;/div&gt;\n  &lt;/ScrollView&gt;\n&lt;/docoff-placeholder&gt;</code></pre>"},{"location":"components/ScrollView/#horizontal-scrolling","title":"Horizontal Scrolling","text":"<p>The horizontal mode is useful when you have (or expect to have) a lot of horizontal content and you need to make sure it remains accessible on all viewport sizes.</p> <pre><code>&lt;ScrollView direction=\"horizontal\" arrows&gt;\n  &lt;docoff-placeholder&gt;\n    &lt;div style={{ whiteSpace: 'nowrap' }}&gt;\n      Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo\n      ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis\n      dis parturient montes, nascetur ridiculus mus. Donec quam felis,\n      ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa\n      quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget,\n      arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.\n    &lt;/div&gt;\n  &lt;/docoff-placeholder&gt;\n&lt;/ScrollView&gt;</code></pre>"},{"location":"components/ScrollView/#auto-scrolling","title":"Auto Scrolling","text":"<p>ScrollView can watch its content for changes and automatically scroll to the end when the content has changed.</p> <p>\u26a0\ufe0f The auto-scroll functionality requires all children to have the <code>key</code> property defined because it detects changes of these keys.</p> <pre><code>React.createElement(() =&gt; {\n  const generateRandomString = () =&gt; {\n    const texts = [\n      'Lorem ipsum dolor sit amet, consectetuer adipiscing elit.',\n      'Aenean commodo ligula eget dolor. Aenean massa.',\n      'Aenean commodo ligula eget dolor. Aenean massa.',\n      'Cum sociis natoque penatibus et magnis dis parturient montes.',\n      'Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.',\n      'Nulla consequat massa quis enim. Donec pede justo, fringilla vel.',\n      'In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.',\n    ];\n    let text = '';\n    const repeatAmount = Math.floor(Math.random() * 9);\n    for (let i = 0; i &lt; (repeatAmount + 1); i += 1) {\n      text += texts[Math.floor(Math.random() * Math.floor(texts.length - 1))];\n    }\n    return text;\n  }\n  const [autoScroll, setAutoScroll] = React.useState('always');\n  const [direction, setDirection] = React.useState('vertical');\n  const [scrollViewContent, setScrollViewContent] = React.useState(\n    generateRandomString(),\n  );\n  return (\n    &lt;div&gt;\n      &lt;Toolbar&gt;\n        &lt;ToolbarItem&gt;\n          &lt;Radio\n            label=\"Direction:\"\n            onChange={(e) =&gt; setDirection(e.target.value)}\n            options={[\n              {\n                label: 'Vertical',\n                value: 'vertical',\n              },\n              {\n                label: 'Horizontal',\n                value: 'horizontal',\n              },\n            ]}\n            value={direction}\n          /&gt;\n        &lt;/ToolbarItem&gt;\n        &lt;ToolbarItem&gt;\n          &lt;Radio\n            label=\"Autoscroll:\"\n            onChange={(e) =&gt; setAutoScroll(e.target.value)}\n            options={[\n              {\n                label: 'Always',\n                value: 'always',\n              },\n              {\n                label: 'When end is detected',\n                value: 'detectEnd',\n              },\n            ]}\n            value={autoScroll}\n          /&gt;\n        &lt;/ToolbarItem&gt;\n        &lt;ToolbarItem&gt;\n          &lt;Button\n            label=\"Add text\"\n            onClick={\n              () =&gt; setScrollViewContent(\n                `${scrollViewContent} ${generateRandomString()}`,\n              )\n            }\n          /&gt;\n        &lt;/ToolbarItem&gt;\n      &lt;/Toolbar&gt;\n      &lt;docoff-placeholder height={direction === 'vertical' ? '200px' : 'auto'}&gt;\n        &lt;ScrollView arrows autoScroll={autoScroll} direction={direction}&gt;\n          &lt;div\n            key={scrollViewContent.length}\n            style={{\n              whiteSpace: (direction === 'horizontal' ? 'nowrap' : 'normal'),\n            }}\n          &gt;\n            {scrollViewContent}\n          &lt;/div&gt;\n        &lt;/ScrollView&gt;\n      &lt;/docoff-placeholder&gt;\n    &lt;/div&gt;\n  );\n});</code></pre>"},{"location":"components/ScrollView/#customization","title":"Customization","text":"<p>It's possible to entirely customize the arrow controls, including the scroll step, and the scrolling shadows.</p>"},{"location":"components/ScrollView/#custom-arrows","title":"Custom Arrows","text":"<p>You can pass any HTML element or even a custom React component to be used as the arrow control. Furthermore, you can change the scroll step if you need to scroll by smaller or bigger portions.</p> <pre><code>&lt;ScrollView\n  arrows\n  arrowsScrollStep={300}\n  direction=\"horizontal\"\n  nextArrowElement={(&lt;span className=\"typography-size-3\"&gt;\u27a1\ufe0f&lt;/span&gt;)}\n  prevArrowElement={(&lt;span className=\"typography-size-3\"&gt;\u2b05\ufe0f&lt;/span&gt;)}\n  scrollbar={false}\n&gt;\n  &lt;docoff-placeholder&gt;\n    &lt;div style={{ whiteSpace: 'nowrap' }}&gt;\n      Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo\n      ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis\n      dis parturient montes, nascetur ridiculus mus. Donec quam felis,\n      ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa\n      quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget,\n      arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.\n    &lt;/div&gt;\n  &lt;/docoff-placeholder&gt;\n&lt;/ScrollView&gt;</code></pre>"},{"location":"components/ScrollView/#scrolling-shadows","title":"Scrolling Shadows","text":"<p>You can customize the start and end scrolling shadows using <code>startShadow*</code> and <code>endShadow*</code> properties.</p> <pre><code>&lt;docoff-placeholder height=\"200px\"&gt;\n  &lt;ScrollView\n    startShadowBackground={'radial-gradient('\n        + 'farthest-side at center top, '\n        + 'rgba(0, 0, 0, 0.15) 0%, '\n        + 'rgba(0, 0, 0, 0.05) 60%, '\n        + 'rgba(0, 0, 0, 0.02) 85%, '\n        + 'rgba(0, 0, 0, 0) 100%'\n      + ')'\n    }\n    startShadowInitialOffset=\"-5px\"\n    startShadowSize=\"40px\"\n    endShadowBackground={'radial-gradient('\n        + 'farthest-side at center bottom, '\n        + 'rgba(0, 0, 0, 0.15) 0%, '\n        + 'rgba(0, 0, 0, 0.05) 60%, '\n        + 'rgba(0, 0, 0, 0.02) 85%, '\n        + 'rgba(0, 0, 0, 0) 100%'\n      + ')'\n    }\n    endShadowInitialOffset=\"-5px\"\n    endShadowSize=\"40px\"\n  &gt;\n    &lt;div&gt;\n      Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo\n      ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis\n      dis parturient montes, nascetur ridiculus mus. Donec quam felis,\n      ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa\n      quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget,\n      arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.\n      Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras\n      dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend\n      tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend ac,\n      enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus.\n      Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean\n      imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper\n      ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus, tellus\n      eget condimentum rhoncus, sem quam semper libero, sit amet adipiscing\n      sem neque sed ipsum. Nam quam nunc, blandit vel, luctus pulvinar,\n      hendrerit id, lorem. Maecenas nec odio et ante tincidunt tempus. Donec\n      vitae sapien ut libero venenatis faucibus. Nullam quis ante. Etiam sit\n      amet orci eget eros faucibus tincidunt. Duis leo. Sed fringilla mauris\n      sit amet nibh. Donec sodales sagittis magna. Sed consequat, leo eget\n      bibendum sodales, augue velit cursus nunc.Aenean massa. Cum sociis\n      natoque penatibus et magnis dis parturient montes, nascetur ridiculus\n      mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis,\n      sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel,\n      aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet\n      a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium.\n      Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean\n      vulputate eleifend tellus. Aenean leo ligula, porttitor eu, consequat\n      vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis,\n      feugiat a, tellus. Phasellus viverra nulla ut metus varius laoreet.\n      Quisque rutrum. Aenean imperdiet. Etiam ultricies nisi vel augue.\n      Curabitur ullamcorper ultricies nisi. Nam eget dui. Etiam rhoncus.\n      Maecenas tempus, tellus eget condimentum rhoncus, sem quam semper\n      libero, sit amet adipiscing sem neque sed ipsum. Nam quam nunc, blandit\n      vel, luctus pulvinar, hendrerit id, lorem. Maecenas nec odio et ante\n      tincidunt tempus. Donec vitae sapien ut libero venenatis faucibus.\n      Nullam quis ante. Etiam sit amet orci eget eros faucibus tincidunt.\n      Duis leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis\n      magna. Sed consequat, leo eget bibendum sodales, augue velit cursus\n      nunc.\n    &lt;/div&gt;\n  &lt;/ScrollView&gt;\n&lt;/docoff-placeholder&gt;</code></pre>"},{"location":"components/ScrollView/#linear-gradients","title":"Linear Gradients","text":"<p>For easier CSS definition of linear gradients for both vertical and horizontal directions at the same time, there are <code>--rui-local-start-shadow-direction</code> and <code>--rui-local-end-shadow-direction</code> custom properties that can be used inside <code>startShadowBackground</code> and <code>endShadowBackground</code> definitions. The value of the custom properties then reacts to the <code>direction</code> option:</p> Custom property Vertical direction Horizontal direction <code>--rui-local-start-shadow-direction</code> <code>to bottom</code> <code>to right</code> <code>--rui-local-end-shadow-direction</code> <code>to top</code> <code>to left</code> <p>This is useful if you want to create a single definition of linear gradients for scrolling shadows in both directions via global props.</p> <pre><code>React.createElement(() =&gt; {\n  const START_SHADOW_BACKGROUND = `linear-gradient(\n      var(--rui-local-start-shadow-direction),\n      rgba(0 0 0 / 0.5),\n      rgba(0 0 0 / 0)\n    )`;\n  const END_SHADOW_BACKGROUND = `linear-gradient(\n      var(--rui-local-end-shadow-direction),\n      rgba(0 0 0 / 0.5),\n      rgba(0 0 0 / 0)\n    )`\n  const [direction, setDirection] = React.useState('vertical');\n  return(\n    &lt;&gt;\n      &lt;Radio\n        label=\"Direction:\"\n        onChange={(e) =&gt; setDirection(e.target.value)}\n        options={[\n          {\n            label: 'Vertical',\n            value: 'vertical',\n          },\n          {\n            label: 'Horizontal',\n            value: 'horizontal',\n          },\n        ]}\n        value={direction}\n      /&gt;\n      &lt;docoff-placeholder height=\"200px\"&gt;\n        &lt;ScrollView\n          direction={direction}\n          endShadowBackground={END_SHADOW_BACKGROUND}\n          startShadowBackground={START_SHADOW_BACKGROUND}\n        &gt;\n          &lt;div\n            style={{\n              width: (direction === 'horizontal' ? '3000px' : 'auto'),\n            }}\n          &gt;\n            Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n            commodo ligula eget dolor. Aenean massa. Cum sociis natoque\n            penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n            Donec quam felis, ultricies nec, pellentesque eu, pretium quis,\n            sem. Nulla consequat massa quis enim. Donec pede justo, fringilla\n            vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut,\n            imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede\n            mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum\n            semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula,\n            porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem\n            ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus\n            viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean\n            imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper\n            ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus,\n            tellus eget condimentum rhoncus, sem quam semper libero, sit amet\n            adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus\n            pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt\n            tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam\n            quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis\n            leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis\n            magna. Sed consequat, leo eget bibendum sodales, augue velit\n            cursus nunc. Aenean massa. Cum sociis natoque penatibus et magnis\n            dis parturient montes, nascetur ridiculus mus. Donec quam felis,\n            ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat\n            massa quis enim. Donec pede justo, fringilla vel, aliquet nec,\n            vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a,\n            venenatis vitae, justo. Nullam dictum felis eu pede mollis\n            pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper\n            nisi. Aenean vulputate eleifend tellus. Aenean leo ligula,\n            porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem\n            ante, dapibus in, viverra quis, feugiat a, tellus. Phasellus\n            viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean\n            imperdiet. Etiam ultricies nisi vel augue. Curabitur ullamcorper\n            ultricies nisi. Nam eget dui. Etiam rhoncus. Maecenas tempus,\n            tellus eget condimentum rhoncus, sem quam semper libero, sit amet\n            adipiscing sem neque sed ipsum. Nam quam nunc, blandit vel, luctus\n            pulvinar, hendrerit id, lorem. Maecenas nec odio et ante tincidunt\n            tempus. Donec vitae sapien ut libero venenatis faucibus. Nullam\n            quis ante. Etiam sit amet orci eget eros faucibus tincidunt. Duis\n            leo. Sed fringilla mauris sit amet nibh. Donec sodales sagittis\n            magna. Sed consequat, leo eget bibendum sodales, augue velit\n            cursus nunc.\n          &lt;/div&gt;\n        &lt;/ScrollView&gt;\n      &lt;/docoff-placeholder&gt;\n    &lt;/&gt;\n  );\n});</code></pre>"},{"location":"components/ScrollView/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the root <code>&lt;div&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;div&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/ScrollView/#forwarding-ref","title":"Forwarding ref","text":"<p>If you provide ref, it is forwarded to the scrolling viewport native HTML <code>&lt;div&gt;</code> element.</p>"},{"location":"components/ScrollView/#api","title":"API","text":""},{"location":"components/SelectField/","title":"SelectField","text":"<p>SelectField allows users to select one option from a set.</p>"},{"location":"components/SelectField/#basic-usage","title":"Basic Usage","text":"<p>To implement the SelectField component, you need to import it first:</p> <pre><code>import { SelectField } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  return (\n    &lt;SelectField\n      label=\"Your favourite fruit\"\n      onChange={(e) =&gt; setFruit(e.target.value)}\n      options={[\n        {\n          label: 'Apple',\n          value: 'apple',\n        },\n        {\n          label: 'Banana',\n          value: 'banana',\n        },\n        {\n          label: 'Grapefruit',\n          value: 'grapefruit',\n        },\n      ]}\n      value={fruit}\n    /&gt;\n  );\n});</code></pre> <p>See API for all available options.</p>"},{"location":"components/SelectField/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Use SelectField for many options. For sets of just a few options   (say 3 at maximum) consider using the Radio component.   This will help keep your UI clean and uncluttered and prevent your users from   being overwhelmed by too many options.</p> </li> <li> <p>Don't use for boolean (true/false) selection or to toggle things on and   off. CheckboxField and   Toggle are more suitable for such cases.</p> </li> <li> <p>Use short and descriptive labels, ideally nouns rather than seemingly   polite phrases like Please select your favourite fruit. Short labels will   help your users accomplish their task faster.</p> </li> <li> <p>Use text labels unless it is necessary to wrap text label into   Popover-like to component to provide additional info about the field.</p> </li> <li> <p>Only make the SelectField's label invisible when there is another visual   clue to guide users through filling the input. Using the first option as   label is not recommended either \u2014 it disappears once user makes their choice.</p> </li> <li> <p>When a short label is not enough, use help texts to guide users before   they enter anything.</p> </li> <li> <p>Use clear, calm error messages when there's a problem with what they   entered.</p> </li> <li> <p>In case of a large amount of options, consider grouping related items   together by nesting them.</p> </li> </ul> <p>\ud83d\udc49 We use the native <code>select</code> HTML element to improve user experience on mobile devices by using the native select of the platform.</p>"},{"location":"components/SelectField/#design-variants","title":"Design Variants","text":"<p>To satisfy the design requirements of your project, all input fields in React UI come in two design variants to choose from: outline and filled. Both can be further customized with CSS custom properties.</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n    &lt;&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        variant=\"filled\"\n        value={fruit}\n      /&gt;\n    &lt;/&gt;\n  );\n});</code></pre>"},{"location":"components/SelectField/#sizes","title":"Sizes","text":"<p>Aside from the default (medium) size, two additional sizes are available: small and large.</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n    &lt;&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        size=\"small\"\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        size=\"large\"\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        size=\"small\"\n        value={fruit}\n        variant=\"filled\"\n      /&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n        variant=\"filled\"\n      /&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        size=\"large\"\n        value={fruit}\n        variant=\"filled\"\n      /&gt;\n    &lt;/&gt;\n  );\n});</code></pre> <p>Full-width fields span the full width of a parent:</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n    &lt;&gt;\n      &lt;SelectField\n        fullWidth\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        fullWidth\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n        variant=\"filled\"\n      /&gt;\n    &lt;/&gt;\n  );\n});</code></pre>"},{"location":"components/SelectField/#grouping-related-options","title":"Grouping Related Options","text":"<p>For a large amount of options you can group related items together by nesting them (implements the <code>optgroup</code> HTML element).</p> <pre><code>React.createElement(() =&gt; {\n  const [crop, setCrop] = React.useState('apple');\n  const options = [\n    {\n      label: 'Fruits',\n      options: [\n        {\n          label: 'Apple',\n          value: 'apple',\n        },\n        {\n          label: 'Banana',\n          value: 'banana',\n        },\n        {\n          label: 'Grapefruit',\n          value: 'grapefruit',\n        },\n      ],\n    },\n    {\n      label: 'Vegetables',\n      options: [\n        {\n          label: 'Beetroot',\n          value: 'beetroot',\n        },\n        {\n          label: 'Carrot',\n          value: 'carrot',\n        },\n        {\n          label: 'Tomato',\n          value: 'tomato',\n        },\n      ],\n    },\n  ];\n  return (\n    &lt;&gt;\n      &lt;SelectField\n        label=\"Your favourite crop\"\n        onChange={(e) =&gt; setCrop(e.target.value)}\n        options={options}\n        value={crop}\n      /&gt;\n      &lt;SelectField\n        label=\"Your favourite crop\"\n        onChange={(e) =&gt; setCrop(e.target.value)}\n        options={options}\n        value={crop}\n        variant=\"filled\"\n      /&gt;\n    &lt;/&gt;\n  );\n});</code></pre>"},{"location":"components/SelectField/#invisible-label","title":"Invisible Label","text":"<p>While it may be acceptable for login screens with just a few fields or for other simple forms, it's dangerous to hide labels from users in most cases. Keep in mind you should provide another visual clue so users know what to fill into the input.</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n    &lt;&gt;\n      &lt;SelectField\n        isLabelVisible={false}\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        isLabelVisible={false}\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n        variant=\"filled\"\n      /&gt;\n    &lt;/&gt;\n  );\n});</code></pre>"},{"location":"components/SelectField/#horizontal-layout","title":"Horizontal Layout","text":"<p>The default vertical layout is very easy to use and work with. However, there are situations where horizontal layout suits better \u2014 and that's why React UI supports this kind of layout as well.</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n    &lt;&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        layout=\"horizontal\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        layout=\"horizontal\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n        variant=\"filled\"\n      /&gt;\n      &lt;SelectField\n        fullWidth\n        label=\"Your favourite fruit\"\n        layout=\"horizontal\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        fullWidth\n        label=\"Your favourite fruit\"\n        layout=\"horizontal\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n        variant=\"filled\"\n      /&gt;\n      &lt;SelectField\n        fullWidth\n        isLabelVisible={false}\n        label=\"Your favourite fruit\"\n        layout=\"horizontal\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        fullWidth\n        isLabelVisible={false}\n        label=\"Your favourite fruit\"\n        layout=\"horizontal\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n        variant=\"filled\"\n      /&gt;\n    &lt;/&gt;\n  );\n});</code></pre>"},{"location":"components/SelectField/#help-text","title":"Help Text","text":"<p>You may provide an additional help text to clarify how the input should be filled.</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n    &lt;&gt;\n      &lt;SelectField\n        helpText=\"Choose one or more kinds of fruit to feel happy.\"\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        helpText=\"Choose one or more kinds of fruit to feel happy.\"\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n        variant=\"filled\"\n      /&gt;\n      &lt;SelectField\n        helpText=\"Choose one or more kinds of fruit to feel happy.\"\n        label=\"Your favourite fruit\"\n        layout=\"horizontal\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        helpText=\"Choose one or more kinds of fruit to feel happy.\"\n        label=\"Your favourite fruit\"\n        layout=\"horizontal\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n        variant=\"filled\"\n      /&gt;\n      &lt;SelectField\n        fullWidth\n        helpText=\"Choose one or more kinds of fruit to feel happy.\"\n        label=\"Your favourite fruit\"\n        layout=\"horizontal\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        fullWidth\n        helpText=\"Choose one or more kinds of fruit to feel happy.\"\n        label=\"Your favourite fruit\"\n        layout=\"horizontal\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n        variant=\"filled\"\n      /&gt;\n    &lt;/&gt;\n  );\n});</code></pre>"},{"location":"components/SelectField/#states","title":"States","text":""},{"location":"components/SelectField/#validation-states","title":"Validation States","text":"<p>Validation states visually present the result of validation of the input. You should always provide a validation message for states other than valid so users know what happened and what action they should take or what options they have.</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n    &lt;&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        required\n        validationState=\"valid\"\n        validationText=\"Great, they're in stock!\"\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        required\n        validationState=\"warning\"\n        validationText=\"Oh, really?\"\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        required\n        validationState=\"invalid\"\n        validationText=\"You must select at least one kind of fruit.\"\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        required\n        validationState=\"valid\"\n        validationText=\"Great, they're in stock!\"\n        value={fruit}\n        variant=\"filled\"\n      /&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        required\n        validationState=\"warning\"\n        validationText=\"Oh, really?\"\n        value={fruit}\n        variant=\"filled\"\n      /&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        required\n        value={fruit}\n        validationState=\"invalid\"\n        validationText=\"You must select at least one kind of fruit.\"\n        variant=\"filled\"\n      /&gt;\n    &lt;/&gt;\n  );\n})</code></pre>"},{"location":"components/SelectField/#required-state","title":"Required State","text":"<p>The required state indicates that the input is mandatory.</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  return (\n    &lt;SelectField\n      label=\"Your favourite fruit\"\n      onChange={(e) =&gt; setFruit(e.target.value)}\n      options={[\n        {\n          label: 'Apple',\n          value: 'apple',\n        },\n        {\n          label: 'Banana',\n          value: 'banana',\n        },\n        {\n          label: 'Grapefruit',\n          value: 'grapefruit',\n        },\n      ]}\n      value={fruit}\n      required\n    /&gt;\n  );\n});</code></pre>"},{"location":"components/SelectField/#styling-the-required-state","title":"Styling the Required State","text":"<p>All form fields in React UI can be styled to indicate the required state.</p> <p>However, you may find yourself in a situation where a form field is valid in both selected and unselected states, for example to turn on or off a feature. If your project uses the label color as the primary means to indicate the required state of input fields and the usual asterisk <code>*</code> is omitted, you may want to keep the label color consistent for both states to avoid confusion.</p> <p>For this edge case, there is the <code>renderAsRequired</code> prop:</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n   &lt;React.Fragment&gt;\n      &lt;style&gt;\n      {`\n        .example {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 1rem 0.5rem;\n        }\n\n        .example--themed-form-fields {\n          --rui-FormField__label__color: var(--rui-color-text-secondary);\n          --rui-FormField--required__label__color: var(--rui-color-text-primary);\n          --rui-FormField--required__sign: '';\n        }\n      `}\n      &lt;/style&gt;\n      &lt;div class=\"example example--themed-form-fields\"&gt;\n      &lt;SelectField\n          label=\"This field is optional\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={options}\n          value={fruit}\n        /&gt;\n        &lt;SelectField\n          label=\"This field is optional but looks like required\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={options}\n          value={fruit}\n          renderAsRequired\n        /&gt;\n      &lt;/div&gt;\n    &lt;/React.Fragment&gt;\n  );\n});</code></pre> <p>It renders the field as if it was required, but doesn't add the <code>required</code> attribute to the actual input.</p>"},{"location":"components/SelectField/#disabled-state","title":"Disabled State","text":"<p>It's possible to disable just some options or the whole input.</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      disabled: true,\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n    &lt;&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      /&gt;\n      &lt;SelectField\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n        variant=\"filled\"\n      /&gt;\n      &lt;SelectField\n        disabled\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value=\"apple\"\n      /&gt;\n      &lt;SelectField\n        disabled\n        label=\"Your favourite fruit\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value=\"apple\"\n        variant=\"filled\"\n      /&gt;\n    &lt;/&gt;\n  );\n})</code></pre>"},{"location":"components/SelectField/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the <code>&lt;select&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;select&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/SelectField/#forwarding-ref","title":"Forwarding ref","text":"<p>If you provide ref, it is forwarded to the native HTML <code>&lt;select&gt;</code> element.</p>"},{"location":"components/SelectField/#api","title":"API","text":""},{"location":"components/SelectField/#theming","title":"Theming","text":"<p>Head to Forms Theming to see shared form theming options. On top of that, the following options are available for SelectField.</p> Custom Property Description <code>--rui-FormField--box--select__caret__border-style</code> SelectField arrow border style (e.g. <code>solid</code>) <code>--rui-FormField--box--select__caret__background</code> SelectField arrow background (including <code>url()</code> or gradient) <code>--rui-FormField--box--select__option--disabled__color</code> Text color of disabled SelectField options"},{"location":"components/Table/","title":"Table","text":"<p>Table presents complex tabular data in an easy-to-scan way.</p>"},{"location":"components/Table/#basic-usage","title":"Basic Usage","text":"<p>To implement the Table component, you need to import it first:</p> <pre><code>import { Table } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;Table\n  columns={[\n    {\n      label: 'ID',\n      name: 'id',\n    },\n    {\n      label: 'Name',\n      name: 'name',\n    },\n    {\n      format: (date) =&gt; date.toLocaleDateString('en-GB'),\n      label: 'Date of birth',\n      name: 'dateOfBirth',\n    },\n  ]}\n  rows={[\n    {\n      dateOfBirth: new Date(1940, 10, 9),\n      id: 1,\n      name: 'John Lennon',\n    },\n    {\n      dateOfBirth: new Date(1942, 6, 18),\n      id: 2,\n      name: 'Paul McCartney',\n    },\n    {\n      dateOfBirth: new Date(1943, 2, 25),\n      id: 3,\n      name: 'George Harrison',\n    },\n    {\n      dateOfBirth: new Date(1940, 7, 7),\n      id: 4,\n      name: 'Richard Starkey (Ringo Starr)',\n    },\n  ]}\n/&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/Table/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Keep headers short so users can quickly scan the content of the table.   Just one or two words should be enough.</p> </li> <li> <p>Tables are good for displaying complex tabular data. For simpler data sets   or even plain key-value pairs, consider using the   Grid component.</p> </li> <li> <p>Tables make lots of information easier to scan and compare. If you have   fewer sections and want to emphasize each group more, consider using   Cards.</p> </li> </ul>"},{"location":"components/Table/#responsive-tables","title":"Responsive Tables","text":"<p>The easiest way to make tables responsive is to wrap them with the ScrollView component in the horizontal mode.</p> <pre><code>&lt;ScrollView direction=\"horizontal\"&gt;\n  &lt;Table\n    columns={[\n      {\n        label: 'ID',\n        name: 'id',\n      },\n      {\n        format: (name) =&gt; (\n          &lt;span style={{ whiteSpace: 'nowrap' }}&gt;{name}&lt;/span&gt;\n        ),\n        label: 'Name',\n        name: 'name',\n      },\n      {\n        format: (note) =&gt; (\n          &lt;span style={{ whiteSpace: 'nowrap' }}&gt;{note}&lt;/span&gt;\n        ),\n        label: 'Note',\n        name: 'note',\n      },\n      {\n        format: (date) =&gt; date.toLocaleDateString('en-GB'),\n        label: 'Date of birth',\n        name: 'dateOfBirth',\n      },\n    ]}\n    rows={[\n      {\n        dateOfBirth: new Date(1940, 10, 9),\n        id: 1,\n        name: 'John Lennon',\n        note: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. '\n          + 'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis '\n          + 'natoque penatibus et magnis dis parturient montes, nascetur '\n          + 'ridiculus mus. Donec quam felis, ultricies nec, pellentesque '\n          + 'eu, pretium quis, sem.',\n      },\n      {\n        dateOfBirth: new Date(1942, 6, 18),\n        id: 2,\n        name: 'Paul McCartney',\n        note: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. '\n          + 'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis '\n          + 'natoque penatibus et magnis dis parturient montes, nascetur '\n          + 'ridiculus mus. Donec quam felis, ultricies nec, pellentesque '\n          + 'eu, pretium quis, sem.',\n      },\n      {\n        dateOfBirth: new Date(1943, 2, 25),\n        id: 3,\n        name: 'George Harrison',\n        note: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. '\n          + 'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis '\n          + 'natoque penatibus et magnis dis parturient montes, nascetur '\n          + 'ridiculus mus. Donec quam felis, ultricies nec, pellentesque '\n          + 'eu, pretium quis, sem.',\n      },\n      {\n        dateOfBirth: new Date(1940, 7, 7),\n        id: 4,\n        name: 'Richard Starkey (Ringo Starr)',\n        note: 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. '\n          + 'Aenean commodo ligula eget dolor. Aenean massa. Cum sociis '\n          + 'natoque penatibus et magnis dis parturient montes, nascetur '\n          + 'ridiculus mus. Donec quam felis, ultricies nec, pellentesque '\n          + 'eu, pretium quis, sem.',\n      },\n    ]}\n  /&gt;\n&lt;/ScrollView&gt;</code></pre>"},{"location":"components/Table/#sortable-columns","title":"Sortable Columns","text":"<p>The Table supports sorting indicators by adding a simple configuration.</p> <p>\u26a0\ufe0f The Table component only provides necessary visual support for sorting. Aside from icons, you must provide the comparing functionality yourself if you aren't rendering already sorted data. The reason for this decision is that client often does not have access to the full dataset.</p> <p>The following is an example of custom sorting function executed on the client.</p> <pre><code>React.createElement(() =&gt; {\n  const [tableSortColumn, setTableSortColumn] = React.useState('id');\n  const [tableSortDirection, setTableSortDirection] = React.useState('asc');\n  const [rows, setRows] = React.useState([\n    {\n      dateOfBirth: new Date(1940, 10, 9),\n      id: 1,\n      name: 'John Lennon',\n    },\n    {\n      dateOfBirth: new Date(1942, 6, 18),\n      id: 2,\n      name: 'Paul McCartney',\n    },\n    {\n      dateOfBirth: new Date(1943, 2, 25),\n      id: 3,\n      name: 'George Harrison',\n    },\n    {\n      dateOfBirth: new Date(1940, 7, 7),\n      id: 4,\n      name: 'Richard Starkey (Ringo Starr)',\n    },\n  ]);\n  const compare = (items, key, direction) =&gt; {\n    const sortedItems = [...items];\n    if (key === 'id' || key === 'dateOfBirth') {\n      sortedItems.sort((a, b) =&gt; b[key] - a[key]);\n    } else if (key === 'name') {\n      sortedItems.sort((a, b) =&gt; {\n        if (a.name &gt; b.name) {\n          return -1;\n        }\n        if (a.name &lt; b.name) {\n          return 1;\n        }\n        return 0;\n      });\n    }\n    return direction === 'desc' ? sortedItems.reverse() : sortedItems;\n  };\n  const columns = [\n    {\n      isSortable: true,\n      label: 'ID',\n      name: 'id',\n    },\n    {\n      isSortable: true,\n      label: 'Name',\n      name: 'name',\n    },\n    {\n      format: (date) =&gt; date.toISOString(),\n      isSortable: true,\n      label: 'Date of birth',\n      name: 'dateOfBirth',\n    },\n  ];\n  return (\n    &lt;Table\n      columns={columns}\n      rows={rows}\n      sort={{\n        ascendingIcon: &lt;rui-icon icon=\"up\" /&gt;,\n        column: tableSortColumn,\n        descendingIcon: &lt;rui-icon icon=\"down\" /&gt;,\n        direction: tableSortDirection,\n        onClick: (column, direction) =&gt; {\n          setTableSortColumn(column);\n          setTableSortDirection(direction === 'asc' ? 'desc' : 'asc');\n          setRows(compare(rows, column, direction));\n        },\n      }}\n    /&gt;\n  );\n});</code></pre>"},{"location":"components/Table/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the root <code>&lt;table&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;table&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/Table/#api","title":"API","text":""},{"location":"components/Tabs/","title":"Tabs","text":"<p>Tabs separate related content into groups within a single context.</p>"},{"location":"components/Tabs/#basic-usage","title":"Basic Usage","text":"<p>To implement the Tabs component, you need to import it first:</p> <pre><code>import { Tabs, TabsItem } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>React.createElement(() =&gt; {\n  const [activeTab, setActiveTab] = React.useState(1);\n  const navigate = (event, tab) =&gt; {\n    setActiveTab(tab);\n    event.preventDefault();\n  };\n  return (\n    &lt;Tabs&gt;\n      &lt;TabsItem\n        href=\"#design\"\n        isActive={activeTab === 1}\n        label=\"Design\"\n        onClick={(e) =&gt; navigate(e, 1)}\n      /&gt;\n      &lt;TabsItem\n        href=\"#code\"\n        isActive={activeTab === 2}\n        label=\"Code\"\n        onClick={(e) =&gt; navigate(e, 2)}\n      /&gt;\n      &lt;TabsItem\n        href=\"#resources\"\n        isActive={activeTab === 3}\n        label=\"Resources\"\n        onClick={(e) =&gt; navigate(e, 3)}\n      /&gt;\n    &lt;/Tabs&gt;\n  );\n})</code></pre> <p>See API for all available options.</p>"},{"location":"components/Tabs/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Use tabs to divide similar content. Tabs make sense when the content they   contain is related.</p> </li> <li> <p>Make sure everything necessary to complete a single task is contained   within one tab. Users don't like switching context to get their task done.</p> </li> <li> <p>Make labels short and clear. Long tab names impede comprehension. Use as   few words as possible, preferably just one.</p> </li> <li> <p>Limit the number of tabs. Having too many tabs increases clutter and   can be overwhelming for users. Try to have no more than 5 or 6 tabs.</p> </li> </ul>"},{"location":"components/Tabs/#tabs-with-icons","title":"Tabs with Icons","text":"<p>Tab titles can be accompanied by icons. Once you decide to have icons, use one for each tab and don't leave some tabs without an icon.</p> <pre><code>React.createElement(() =&gt; {\n  const [activeTab, setActiveTab] = React.useState(1);\n  const navigate = (event, tab) =&gt; {\n    setActiveTab(tab);\n    event.preventDefault();\n  };\n  return (\n    &lt;Tabs&gt;\n      &lt;TabsItem\n        beforeLabel={&lt;rui-icon icon=\"pencil\" /&gt;}\n        href=\"#design\"\n        isActive={activeTab === 1}\n        label=\"Design\"\n        onClick={(e) =&gt; navigate(e, 1)}\n      /&gt;\n      &lt;TabsItem\n        beforeLabel={&lt;rui-icon icon=\"code\" /&gt;}\n        href=\"#code\"\n        isActive={activeTab === 2}\n        label=\"Code\"\n        onClick={(e) =&gt; navigate(e, 2)}\n      /&gt;\n      &lt;TabsItem\n        beforeLabel={&lt;rui-icon icon=\"star\" /&gt;}\n        href=\"#resources\"\n        isActive={activeTab === 3}\n        label=\"Resources\"\n        onClick={(e) =&gt; navigate(e, 3)}\n      /&gt;\n    &lt;/Tabs&gt;\n  );\n});</code></pre>"},{"location":"components/Tabs/#scrollable-tabs","title":"Scrollable Tabs","text":"<p>If you have more than a few tabs, you may need to make sure they will be all accessible no matter the space they have around. Wrap Tabs into ScrollView to make them scrollable if necessary.</p> <pre><code>React.createElement(() =&gt; {\n  const [activeTab, setActiveTab] = React.useState(1);\n  const navigate = (event, tab) =&gt; {\n    setActiveTab(tab);\n    event.preventDefault();\n  };\n  return (\n    &lt;div style={{ width: '19rem' }}&gt;\n      &lt;ScrollView direction=\"horizontal\"&gt;\n        &lt;Tabs&gt;\n          &lt;TabsItem\n            href=\"#design\"\n            isActive={activeTab === 1}\n            label=\"Design\"\n            onClick={(e) =&gt; navigate(e, 1)}\n          /&gt;\n          &lt;TabsItem\n            href=\"#code\"\n            isActive={activeTab === 2}\n            label=\"Code\"\n            onClick={(e) =&gt; navigate(e, 2)}\n          /&gt;\n          &lt;TabsItem\n            href=\"#resources\"\n            isActive={activeTab === 3}\n            label=\"Resources\"\n            onClick={(e) =&gt; navigate(e, 3)}\n          /&gt;\n          &lt;TabsItem\n            href=\"#other\"\n            isActive={activeTab === 4}\n            label=\"Other\"\n            onClick={(e) =&gt; navigate(e, 4)}\n          /&gt;\n          &lt;TabsItem\n            href=\"#more\"\n            isActive={activeTab === 5}\n            label=\"More\"\n            onClick={(e) =&gt; navigate(e, 5)}\n          /&gt;\n        &lt;/Tabs&gt;\n      &lt;/ScrollView&gt;\n    &lt;/div&gt;\n  );\n})</code></pre>"},{"location":"components/Tabs/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to:</p> <ul> <li>the root <code>&lt;nav&gt;</code> HTML element in case of <code>Tabs</code> component</li> <li>the <code>&lt;a&gt;</code> HTML element in case of <code>TabsItem</code></li> </ul> <p>This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;nav&gt;</code> HTML element attributes</li> <li><code>&lt;a&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/Tabs/#api","title":"API","text":""},{"location":"components/Tabs/#tabsitem","title":"TabsItem","text":""},{"location":"components/Tabs/#theming","title":"Theming","text":""},{"location":"components/Tabs/#tabs-theming","title":"Tabs Theming","text":"Custom Property Description <code>--rui-Tabs__border-bottom-width</code> Width of decorative bottom border <code>--rui-Tabs__border-bottom-color</code> Color of decorative bottom border <code>--rui-Tabs__gap--xs</code> Gap between individual tab items on smallest screens <code>--rui-Tabs__gap--sm</code> Gap between individual tab items from <code>sm</code> breakpoint up <code>--rui-Tabs__gap--md</code> Gap between individual tab items from <code>md</code> breakpoint up <code>--rui-Tabs__padding-x</code> Horizontal padding"},{"location":"components/Tabs/#tabsitem-theming","title":"TabsItem Theming","text":"Custom Property Description <code>--rui-Tabs__item__padding--xs</code> Padding of tab items on smallest screens <code>--rui-Tabs__item__padding--sm</code> Padding of tab items from <code>sm</code> breakpoint up <code>--rui-Tabs__item__padding--md</code> Padding of tab items from <code>md</code> breakpoint up <code>--rui-Tabs__item__font-weight</code> Label font weight <code>--rui-Tabs__item__color</code> Label color <code>--rui-Tabs__item__border-width</code> Border width, allows specifying for individual sides <code>--rui-Tabs__item__border-color</code> Border color, allows specifying for individual sides <code>--rui-Tabs__item__border-radius</code> Top corners radius <code>--rui-Tabs__item__background-color</code> Background color <code>--rui-Tabs__item__box-shadow</code> Box shadow <code>--rui-Tabs__item__icon__gap</code> Gap between label and accompanying elements, e.g. icons"},{"location":"components/Tabs/#theming-tabsitem-hover-and-active-states","title":"Theming TabsItem Hover and Active States","text":"<p>Most of TabsItem options can be adjusted for hover and active states as follows:</p> <p><code>--rui-Tabs__item--&lt;STATE&gt;__&lt;PROPERTY&gt;</code></p> <p>Where:</p> <ul> <li><code>&lt;STATE&gt;</code> is one of <code>hover</code> or <code>active</code>,</li> <li><code>&lt;PROPERTY&gt;</code> is one of <code>font-weight</code>, <code>color</code>, <code>border-width</code>, <code>border-color</code>,   <code>background-color</code>, <code>box-shadow</code>, <code>shift-y</code> (shifts vertically the whole   item), or <code>label__shift-y</code> (tweaks vertical position of tab label).</li> </ul>"},{"location":"components/Text/","title":"Text","text":"<p>Text is a tiny component to control wrapping of text content.</p>"},{"location":"components/Text/#basic-usage","title":"Basic Usage","text":"<p>To implement the Text component, you need to import it first:</p> <pre><code>import { Text } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;docoff-placeholder&gt;\n  &lt;Text lines={3}&gt;\n    Hello! This text will be clamped to three lines.\n    Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo\n    ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis\n    dis parturient montes, nascetur ridiculus mus. Donec quam felis,\n    ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa\n    quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget,\n    arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.\n  &lt;/Text&gt;\n&lt;/docoff-placeholder&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/Text/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Use Text anytime you need to control potentially long strings and   prevent them from overflowing or breaking their container.</p> </li> <li> <p>By default, Text doesn't alter rendering of its content. Use available   options to achieve the result you need.</p> </li> <li> <p>Text renders as <code>&lt;span&gt;</code> by default, so it can only contain   inline-level HTML elements (like <code>&lt;strong&gt;</code> or <code>&lt;a&gt;</code>, but not <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>,   or <code>&lt;h2&gt;</code>). If necessary, use the <code>blockLevel</code> option to render as <code>&lt;div&gt;</code> to   keep your HTML valid.</p> </li> <li> <p>Use Text for short pieces of text content. Including a couple of HTML tags   shouldn't cause any harm, but keep in mind Text is not intended to wrap   complex HTML structures or even React components.</p> </li> </ul>"},{"location":"components/Text/#number-of-lines","title":"Number of Lines","text":"<p>Specify how many <code>lines</code> of text should be visible if content doesn't fit its container. If the number of lines is exceeded, the content is truncated and appended by an ellipsis (<code>\u2026</code>).</p> <pre><code>React.createElement(() =&gt; {\n  const [lines, setLines] = React.useState(1);\n  return (\n    &lt;div&gt;\n      &lt;Toolbar align=\"baseline\"&gt;\n        &lt;ToolbarItem&gt;\n          &lt;TextField\n            label=\"Number of lines\"\n            min={1}\n            max={100}\n            onChange={(e) =&gt; setLines(Number(e.target.value))}\n            type=\"number\"\n            value={lines}\n          /&gt;\n        &lt;/ToolbarItem&gt;\n      &lt;/Toolbar&gt;\n      &lt;docoff-placeholder&gt;\n        &lt;Text lines={lines}&gt;\n          Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean\n          commodo ligula eget dolor. Aenean massa. Cum sociis natoque\n          penatibus et magnis dis parturient montes, nascetur ridiculus mus.\n          Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.\n          Nulla consequat massa quis enim. Donec pede justo, fringilla vel,\n          aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut,\n          imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede\n          mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum\n          semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula,\n          porttitor eu, consequat vitae, eleifend ac, enim. Aliquam lorem\n          ante, dapibus in, viverra quis, feugiat a, tellus.\n        &lt;/Text&gt;\n      &lt;/docoff-placeholder&gt;\n    &lt;/div&gt;\n  );\n});</code></pre>"},{"location":"components/Text/#word-wrapping","title":"Word Wrapping","text":"<p>There are three possible ways of controlling wrapping of long words if they do not fit on a line. Set <code>wordWrapping</code> to one of the following values:</p> <ul> <li> <p><code>normal</code>: Do not force any wrapping (default behavior).</p> </li> <li> <p><code>long-words</code>: To prevent overflow, an otherwise unbreakable string of   characters \u2014 like a long word or URL \u2014 may be broken at any point if there are   no otherwise-acceptable break points in the line.</p> </li> <li> <p><code>anywhere</code>: Create a break at the exact place where text would otherwise   overflow its container (even if putting an entire word on its own line would   negate the need for a break).</p> </li> </ul> <p>\ud83d\udcd6 Read more about wrapping and breaking text at MDN.</p>"},{"location":"components/Text/#hyphens","title":"Hyphens","text":"<p>The <code>hyphens</code> option specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.</p> <p>\ud83d\udc49 The <code>auto</code> setting's behavior depends on the language being properly tagged to select the appropriate hyphenation rules. You must specify a language using the <code>lang</code> HTML attribute (e.g. on <code>&lt;html&gt;</code> tag) to guarantee that automatic hyphenation is applied in that language.</p> <p>\ud83d\udc49 Manually suggested line break opportunities will override automatic break point selection in <code>auto</code> mode when present.</p> <p>\ud83d\udcd6 Read more about <code>hyphens</code> CSS property at MDN.</p> <pre><code>React.createElement(() =&gt; {\n  const [hyphens, setHyphens] = React.useState('none');\n  const [wordWrapping, setWordWrapping] = React.useState('normal');\n  return (\n    &lt;div&gt;\n      &lt;Toolbar&gt;\n        &lt;ToolbarGroup align=\"baseline\"&gt;\n          &lt;ToolbarItem&gt;\n            &lt;span id=\"word-wrapping-options-label\"&gt;Word wrapping:&lt;/span&gt;\n          &lt;/ToolbarItem&gt;\n          &lt;ToolbarItem&gt;\n            &lt;ButtonGroup aria-labelledby=\"word-wrapping-options-label\" priority=\"outline\"&gt;\n              &lt;Button\n                aria-pressed={wordWrapping === 'normal'}\n                color={wordWrapping === 'normal' ? 'selected' : 'secondary'}\n                label=\"normal\"\n                onClick={() =&gt; setWordWrapping('normal')}\n              /&gt;\n              &lt;Button\n                aria-pressed={wordWrapping === 'long-words'}\n                color={wordWrapping === 'long-words' ? 'selected' : 'secondary'}\n                label=\"long-words\"\n                onClick={() =&gt; setWordWrapping('long-words')}\n              /&gt;\n              &lt;Button\n                aria-pressed={wordWrapping === 'anywhere'}\n                color={wordWrapping === 'anywhere' ? 'selected' : 'secondary'}\n                label=\"anywhere\"\n                onClick={() =&gt; setWordWrapping('anywhere')}\n              /&gt;\n            &lt;/ButtonGroup&gt;\n          &lt;/ToolbarItem&gt;\n        &lt;/ToolbarGroup&gt;\n        &lt;ToolbarGroup align=\"baseline\"&gt;\n          &lt;ToolbarItem&gt;\n            &lt;span id=\"hyphens-options-label\"&gt;Hyphens:&lt;/span&gt;\n          &lt;/ToolbarItem&gt;\n          &lt;ToolbarItem&gt;\n            &lt;ButtonGroup aria-labelledby=\"hyphens-options-label\" priority=\"outline\"&gt;\n              &lt;Button\n                aria-pressed={hyphens === 'none'}\n                color={hyphens === 'none' ? 'selected' : 'secondary'}\n                label=\"none\"\n                onClick={() =&gt; setHyphens('none')}\n              /&gt;\n              &lt;Button\n                aria-pressed={hyphens === 'auto'}\n                color={hyphens === 'auto' ? 'selected' : 'secondary'}\n                label=\"auto\"\n                onClick={() =&gt; setHyphens('auto')}\n              /&gt;\n              &lt;Button\n                aria-pressed={hyphens === 'manual'}\n                color={hyphens === 'manual' ? 'selected' : 'secondary'}\n                label=\"manual\"\n                onClick={() =&gt; setHyphens('manual')}\n              /&gt;\n            &lt;/ButtonGroup&gt;\n          &lt;/ToolbarItem&gt;\n        &lt;/ToolbarGroup&gt;\n      &lt;/Toolbar&gt;\n      &lt;docoff-placeholder width=\"11em\" bordered&gt;\n        &lt;Text hyphens={hyphens} wordWrapping={wordWrapping}&gt;\n          {hyphens === 'manual'\n            ? (&lt;&gt;LongWord&amp;shy;ThatHasManual&amp;shy;Breaking&amp;shy;Possibilities&lt;/&gt;)\n            : (&lt;&gt;LongWordThatHasNoBreakingPossibilities&lt;/&gt;)}\n          {' '}\n          and a couple of ordinary words that are nice and well behaved.\n        &lt;/Text&gt;\n      &lt;/docoff-placeholder&gt;\n    &lt;/div&gt;\n  );\n});</code></pre>"},{"location":"components/Text/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to:</p> <ul> <li><code>&lt;span&gt;</code> HTML element in case that <code>blockLevel</code> is set to <code>false</code></li> <li><code>&lt;div&gt;</code> HTML element in case that <code>blockLevel</code> is set to <code>true</code></li> </ul> <p>This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;span&gt;</code> HTML element attributes</li> <li><code>&lt;div&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/Text/#api","title":"API","text":""},{"location":"components/TextArea/","title":"TextArea","text":"<p>TextArea enables users to add longer text to a form.</p>"},{"location":"components/TextArea/#basic-usage","title":"Basic Usage","text":"<p>To implement the TextArea component, you need to import it first:</p> <pre><code>import { TextArea } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;TextArea label=\"Your feedback\" /&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/TextArea/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Use short and descriptive labels, ideally nouns rather than seemingly   polite phrases like Please enter your message. Short labels will help your   users accomplish their task faster.</p> </li> <li> <p>Use text labels unless it is necessary to wrap text label into   Popover-like to component to provide additional info about the field.</p> </li> <li> <p>Only make the TextArea's label invisible when there is another visual   clue to guide users through filling the input. Using the first option as   label is not recommended either \u2014 it disappears once user makes their choice.</p> </li> <li> <p>When a short label is not enough, use help texts to guide users before   they enter anything.</p> </li> <li> <p>Optionally you can pre-fill your text fields with a placeholder to give   users an example of what they're expected to fill in. Just remember the   placeholder disappears once a value is entered so don't put anything important   there. Usually, en example value starting with \u201cEg.\u201d works best.</p> </li> <li> <p>Use clear, calm error messages when there's a problem with what they   entered. Be positive and focus on solutions to make the error message helpful.</p> </li> <li> <p>Ensure the height of a text area fits within mobile screen sizes.</p> </li> </ul>"},{"location":"components/TextArea/#design-variants","title":"Design Variants","text":"<p>To satisfy the design requirements of your project, all input fields in React UI come in two design variants to choose from: outline and filled. Both can be further customized with CSS custom properties.</p> <pre><code>&lt;TextArea\n  label=\"Your feedback\"\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  variant=\"filled\"\n/&gt;</code></pre>"},{"location":"components/TextArea/#sizes","title":"Sizes","text":"<p>Aside from the default (medium) size, two additional sizes are available: small and large.</p> <pre><code>&lt;TextArea\n  label=\"Your feedback\"\n  size=\"small\"\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  size=\"large\"\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  size=\"small\"\n  variant=\"filled\"\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  variant=\"filled\"\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  size=\"large\"\n  variant=\"filled\"\n/&gt;</code></pre> <p>Full-width fields span the full width of a parent:</p> <pre><code>&lt;TextArea\n  label=\"Your feedback\"\n  fullWidth\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  variant=\"filled\"\n  fullWidth\n/&gt;</code></pre>"},{"location":"components/TextArea/#input-size","title":"Input Size","text":"<p>The default width of all inputs is 240 px, and it can be customized with a CSS custom property. However, you can also control the size of individual text areas using the <code>rows</code> and <code>cols</code> properties. Additionally, text areas are vertically resizable by users.</p> <p>\ud83d\udc49 Remember that the <code>cols</code> and <code>rows</code> HTML attributes do not limit on how many characters the user can enter. Use the <code>maxlength</code> attribute to achieve that effect.</p> <pre><code>&lt;TextArea\n  label=\"Your feedback\"\n  cols={50}\n  rows={6}\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  variant=\"filled\"\n  cols={50}\n  rows={6}\n/&gt;</code></pre>"},{"location":"components/TextArea/#invisible-label","title":"Invisible Label","text":"<p>In some cases, it may be convenient to visually hide the field label. The label remains accessible to assistive technologies.</p> <p>While it may be acceptable for login screens with just a few fields or other simple forms, it's dangerous to hide labels from users in most cases. Keep in mind you should provide another visual clue so users know what to fill into the input.</p> <pre><code>&lt;TextArea\n  label=\"Feedback\"\n  isLabelVisible={false}\n  placeholder=\"Eg. What I liked the best was\u2026\"\n/&gt;\n&lt;TextArea\n  label=\"Feedback\"\n  isLabelVisible={false}\n  variant=\"filled\"\n  placeholder=\"Eg. What I liked the best was\u2026\"\n/&gt;</code></pre>"},{"location":"components/TextArea/#horizontal-layout","title":"Horizontal Layout","text":"<p>The default vertical layout is very easy to use and work with. However, there are situations where horizontal layout suits better \u2014 and that's why React UI supports this kind of layout as well.</p> <pre><code>&lt;TextArea\n  label=\"Your feedback\"\n  layout=\"horizontal\"\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  layout=\"horizontal\"\n  variant=\"filled\"\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  layout=\"horizontal\"\n  fullWidth\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  layout=\"horizontal\"\n  variant=\"filled\"\n  fullWidth\n/&gt;\n&lt;TextArea\n  isLabelVisible={false}\n  label=\"Your feedback\"\n  layout=\"horizontal\"\n  placeholder=\"Your feedback\"\n  fullWidth\n/&gt;\n&lt;TextArea\n  isLabelVisible={false}\n  label=\"Your feedback\"\n  layout=\"horizontal\"\n  placeholder=\"Your feedback\"\n  variant=\"filled\"\n  fullWidth\n/&gt;</code></pre>"},{"location":"components/TextArea/#help-text","title":"Help Text","text":"<p>You may provide an additional help text to clarify how the input should be filled.</p> <pre><code>&lt;TextArea\n  label=\"Your feedback\"\n  helpText=\"Why would you recommend us?\"\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  variant=\"filled\"\n  helpText=\"Why would you recommend us?\"\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  layout=\"horizontal\"\n  helpText=\"Why would you recommend us?\"\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  layout=\"horizontal\"\n  helpText=\"Why would you recommend us?\"\n  variant=\"filled\"\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  layout=\"horizontal\"\n  helpText=\"Why would you recommend us?\"\n  fullWidth\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  layout=\"horizontal\"\n  variant=\"filled\"\n  helpText=\"Why would you recommend us?\"\n  fullWidth\n/&gt;</code></pre>"},{"location":"components/TextArea/#states","title":"States","text":""},{"location":"components/TextArea/#validation-states","title":"Validation States","text":"<p>Validation states visually present the result of validation of the input. You should always provide a help text for states other than valid so users know what happened and what action they should take or what options they have.</p> <pre><code>&lt;TextArea\n  label=\"Your feedback\"\n  onChange={() =&gt; {}}\n  validationState=\"valid\"\n  validationText=\"Looks good!\"\n  value=\"Like that!\"\n  required\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  onChange={() =&gt; {}}\n  validationState=\"warning\"\n  validationText=\"The feedback should be at least 3 characters long.\"\n  value=\"..\"\n  required\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  validationState=\"invalid\"\n  validationText=\"Please share your feedback with us.\"\n  required\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  onChange={() =&gt; {}}\n  validationState=\"valid\"\n  validationText=\"Looks good!\"\n  variant=\"filled\"\n  value=\"Like that!\"\n  required\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  onChange={() =&gt; {}}\n  validationState=\"warning\"\n  validationText=\"The feedback should be at least 3 characters long.\"\n  variant=\"filled\"\n  value=\"..\"\n  required\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  validationState=\"invalid\"\n  validationText=\"Please share your feedback with us.\"\n  variant=\"filled\"\n  required\n/&gt;</code></pre>"},{"location":"components/TextArea/#disabled-state","title":"Disabled State","text":"<p>It's possible to disable the whole input.</p> <pre><code>&lt;TextArea\n  label=\"Your feedback\"\n  disabled\n/&gt;\n&lt;TextArea\n  label=\"Your feedback\"\n  variant=\"filled\"\n  disabled\n/&gt;</code></pre>"},{"location":"components/TextArea/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the <code>&lt;textarea&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <pre><code>&lt;TextArea\n  label=\"Address\"\n  autoComplete=\"street-address\"\n  minLength={3}\n  maxLength={80}\n/&gt;\n&lt;TextArea\n  label=\"Address\"\n  variant=\"filled\"\n  autoComplete=\"street-address\"\n  minLength={3}\n  maxLength={80}\n/&gt;</code></pre> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;textarea&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/TextArea/#forwarding-ref","title":"Forwarding ref","text":"<p>If you provide ref, it is forwarded to the native HTML <code>&lt;textarea&gt;</code> element.</p>"},{"location":"components/TextArea/#api","title":"API","text":""},{"location":"components/TextArea/#theming","title":"Theming","text":"<p>Head to Forms Theming to see shared form theming options.</p>"},{"location":"components/TextField/","title":"TextField","text":"<p>TextField allows users to input text information.</p>"},{"location":"components/TextField/#basic-usage","title":"Basic Usage","text":"<p>To implement the TextField component, you need to import it first:</p> <pre><code>import { TextField } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;TextField label=\"First name\" /&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/TextField/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Use the most suitable input type for current context: aside from the   common <code>text</code> type, there are also <code>email</code>, <code>number</code>, <code>password</code>, and <code>tel</code>   types at your disposal. A properly chosen input type is especially important   for touch users as it triggers an appropriate virtual keyboard, so it helps   speed up the completion of the field.</p> </li> <li> <p>Beware of the <code>number</code> input type: it may not be always what you want.   Not all number-like values are actually numbers, e.g. phone numbers, credit   card numbers, or business IDs. In such cases use the most appropriate input   type (probably <code>text</code> or <code>tel</code>) along with the <code>pattern</code> attribute   to improve the input experience for touch users.</p> </li> <li> <p>Use short and descriptive labels, ideally nouns rather than seemingly   polite phrases like Please enter your first name. Short labels will help   your users accomplish their task faster.</p> </li> <li> <p>Use text labels unless it is necessary to wrap text label into   Popover-like to component to provide additional info about the field.</p> </li> <li> <p>Only make the TextField's label invisible when there is another visual   clue to guide users through filling the input.</p> </li> <li> <p>When a short label is not enough, use help texts to guide users before   they enter anything.</p> </li> <li> <p>Optionally you can pre-fill your text fields with a placeholder to give   users an example of what they're expected to fill in. Just remember the   placeholder disappears once a value is entered so don't put anything important   there. Usually, en example value starting with \u201cEg.\u201d works best.</p> </li> <li> <p>Use clear, calm error messages when there's a problem with what they   entered. Be positive and focus on solutions to make the error message helpful.</p> </li> <li> <p>When asking users for their contact information or other personal information,   make use of the <code>autocomplete</code> attribute to help them fill the   form faster.</p> </li> </ul>"},{"location":"components/TextField/#design-variants","title":"Design Variants","text":"<p>To satisfy the design requirements of your project, all input fields in React UI come in two design variants to choose from: outline and filled. Both can be further customized with CSS custom properties.</p> <pre><code>&lt;TextField\n  label=\"First name\"\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  variant=\"filled\"\n/&gt;</code></pre>"},{"location":"components/TextField/#sizes","title":"Sizes","text":"<p>Aside from the default (medium) size, two additional sizes are available: small and large.</p> <pre><code>&lt;TextField\n  label=\"First name\"\n  size=\"small\"\n/&gt;\n&lt;TextField\n  label=\"First name\"\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  size=\"large\"\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  size=\"small\"\n  variant=\"filled\"\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  variant=\"filled\"\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  size=\"large\"\n  variant=\"filled\"\n/&gt;</code></pre> <p>Full-width fields span the full width of a parent:</p> <pre><code>&lt;TextField\n  label=\"First name\"\n  fullWidth\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  variant=\"filled\"\n  fullWidth\n/&gt;</code></pre>"},{"location":"components/TextField/#input-types","title":"Input Types","text":"<p>Aside from the common <code>text</code> type, there are also <code>email</code>, <code>number</code>, <code>password</code>, and <code>tel</code> types at your disposal.</p> <pre><code>&lt;TextField\n  label=\"Email\"\n  type=\"email\"\n/&gt;\n&lt;TextField\n  label=\"Email\"\n  variant=\"filled\"\n  type=\"email\"\n/&gt;\n&lt;TextField\n  label=\"Age\"\n  type=\"number\"\n/&gt;\n&lt;TextField\n  label=\"Age\"\n  variant=\"filled\"\n  type=\"number\"\n/&gt;\n&lt;TextField\n  label=\"Password\"\n  type=\"password\"\n/&gt;\n&lt;TextField\n  label=\"Password\"\n  variant=\"filled\"\n  type=\"password\"\n/&gt;\n&lt;TextField\n  label=\"Phone\"\n  type=\"tel\"\n/&gt;\n&lt;TextField\n  label=\"Phone\"\n  variant=\"filled\"\n  type=\"tel\"\n/&gt;</code></pre>"},{"location":"components/TextField/#input-size","title":"Input Size","text":"<p>The default width of all inputs is 240 px, and it can be customized with a CSS custom property. However, you can also change the width of individual text fields using the <code>inputSize</code> property. It (obviously) sets the <code>size</code> attribute of the <code>input</code> element and is further picked up by CSS to normalize rendering across browsers.</p> <p>\ud83d\udc49 Remember that the <code>size</code> and <code>max</code> HTML attributes don't limit on how many characters the user can enter. Use the <code>maxlength</code> attribute to achieve that effect (doesn't work for <code>number</code> input type though).</p> <p>\ud83d\udc49 Note that according to the HTML specification, the <code>size</code> attribute (invoked by <code>inputSize</code> API option) is not available for <code>number</code> input type. TextField supports <code>inputSize</code> option for all types of inputs, so you can use it whenever you find it suitable. Just keep in mind the <code>size</code> attribute will not be present in the DOM for numeric inputs.</p> <pre><code>&lt;TextField\n  inputSize={3}\n  label=\"Title\"\n/&gt;\n&lt;TextField\n  inputSize={3}\n  label=\"Title\"\n  variant=\"filled\"\n/&gt;\n&lt;TextField\n  inputSize={3}\n  label=\"Age\"\n  type=\"number\"\n/&gt;\n&lt;TextField\n  inputSize={3}\n  label=\"Age\"\n  type=\"number\"\n  variant=\"filled\"\n/&gt;</code></pre>"},{"location":"components/TextField/#invisible-label","title":"Invisible Label","text":"<p>In some cases, it may be convenient to visually hide the field label. The label remains accessible to assistive technologies.</p> <p>While it may be acceptable for login screens with just a few fields or for other simple forms, it's dangerous to hide labels from users in most cases. Keep in mind you should provide another visual clue so users know what to fill into the input.</p> <pre><code>&lt;TextField\n  label=\"User name\"\n  isLabelVisible={false}\n  placeholder=\"Eg. john@example.com\"\n/&gt;\n&lt;TextField\n  label=\"User name\"\n  isLabelVisible={false}\n  variant=\"filled\"\n  placeholder=\"Eg. john@example.com\"\n/&gt;</code></pre>"},{"location":"components/TextField/#horizontal-layout","title":"Horizontal Layout","text":"<p>The default vertical layout is very easy to use and work with. However, there are situations where horizontal layout suits better \u2014 and that's why React UI supports this kind of layout as well.</p> <pre><code>&lt;TextField\n  inputSize={3}\n  label=\"Title\"\n  layout=\"horizontal\"\n/&gt;\n&lt;TextField\n  inputSize={3}\n  label=\"Title\"\n  layout=\"horizontal\"\n  variant=\"filled\"\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  layout=\"horizontal\"\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  layout=\"horizontal\"\n  variant=\"filled\"\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  layout=\"horizontal\"\n  fullWidth\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  layout=\"horizontal\"\n  variant=\"filled\"\n  fullWidth\n/&gt;\n&lt;TextField\n  isLabelVisible={false}\n  label=\"First name\"\n  layout=\"horizontal\"\n  placeholder=\"First name\"\n  fullWidth\n/&gt;\n&lt;TextField\n  isLabelVisible={false}\n  label=\"First name\"\n  layout=\"horizontal\"\n  placeholder=\"First name\"\n  variant=\"filled\"\n  fullWidth\n/&gt;</code></pre>"},{"location":"components/TextField/#help-text","title":"Help Text","text":"<p>You may provide an additional help text to clarify how the input should be filled.</p> <pre><code>&lt;TextField\n  label=\"First name\"\n  helpText=\"Choose one or more kinds of fruit to feel happy.\"\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  variant=\"filled\"\n  helpText=\"Choose one or more kinds of fruit to feel happy.\"\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  layout=\"horizontal\"\n  helpText=\"Choose one or more kinds of fruit to feel happy.\"\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  layout=\"horizontal\"\n  helpText=\"Choose one or more kinds of fruit to feel happy.\"\n  variant=\"filled\"\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  layout=\"horizontal\"\n  helpText=\"Choose one or more kinds of fruit to feel happy.\"\n  fullWidth\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  layout=\"horizontal\"\n  variant=\"filled\"\n  helpText=\"Choose one or more kinds of fruit to feel happy.\"\n  fullWidth\n/&gt;</code></pre> <p>Keep in mind that long help texts don't play well with small input sizes, especially in vertical layout. To fix this at least for horizontal layout, help text expands over the full field width when the desired input width (based on <code>inputSize</code> option) is 10 characters or smaller.</p> <pre><code>&lt;TextField\n  inputSize={3}\n  label=\"Title\"\n  layout=\"horizontal\"\n  helpText=\"What academic degree do you hold?\"\n/&gt;\n&lt;TextField\n  inputSize={3}\n  label=\"Title\"\n  layout=\"horizontal\"\n  variant=\"filled\"\n  helpText=\"What academic degree do you hold?\"\n/&gt;\n&lt;TextField\n  label=\"Age\"\n  layout=\"horizontal\"\n  min={13}\n  max={120}\n  inputSize={3}\n  type=\"number\"\n  helpText=\"How old do you see yourself?\"\n/&gt;\n&lt;TextField\n  label=\"Age\"\n  layout=\"horizontal\"\n  min={13}\n  max={120}\n  inputSize={3}\n  variant=\"filled\"\n  type=\"number\"\n  helpText=\"How old do you see yourself?\"\n/&gt;</code></pre>"},{"location":"components/TextField/#states","title":"States","text":""},{"location":"components/TextField/#validation-states","title":"Validation States","text":"<p>Validation states visually present the result of validation of the input. You should always provide a validation message for states other than valid so users know what happened and what action they should take or what options they have.</p> <pre><code>&lt;TextField\n  label=\"User name\"\n  onChange={() =&gt; {}}\n  validationState=\"valid\"\n  validationText=\"Looks good!\"\n  value=\"johnny1986\"\n  required\n/&gt;\n&lt;TextField\n  label=\"User name\"\n  onChange={() =&gt; {}}\n  validationState=\"warning\"\n  validationText={(\n    &lt;&gt;\n      Account with this name already exists, pick a different one.\n      {' '}\n      &lt;TextLink href=\"#\" label=\"Forgot your password?\" /&gt;\n    &lt;/&gt;\n  )}\n  value=\"joe\"\n  required\n/&gt;\n&lt;TextField\n  label=\"User name\"\n  validationState=\"invalid\"\n  validationText=\"Please enter a user name of your choice.\"\n  required\n/&gt;\n&lt;TextField\n  label=\"User name\"\n  onChange={() =&gt; {}}\n  validationState=\"valid\"\n  validationText=\"Looks good!\"\n  variant=\"filled\"\n  value=\"johnny1986\"\n  required\n/&gt;\n&lt;TextField\n  label=\"User name\"\n  onChange={() =&gt; {}}\n  validationState=\"warning\"\n  validationText={(\n    &lt;&gt;\n      Account with this name already exists, pick a different one.\n      {' '}\n      &lt;TextLink href=\"#\" label=\"Forgot your password?\" /&gt;\n    &lt;/&gt;\n  )}\n  variant=\"filled\"\n  value=\"joe\"\n  required\n/&gt;\n&lt;TextField\n  label=\"User name\"\n  validationState=\"invalid\"\n  validationText=\"Please enter a user name of your choice.\"\n  variant=\"filled\"\n  required\n/&gt;</code></pre>"},{"location":"components/TextField/#disabled-state","title":"Disabled State","text":"<p>It's possible to disable the whole input.</p> <pre><code>&lt;TextField\n  label=\"First name\"\n  onChange={() =&gt; {}}\n  value=\"John\"\n  disabled\n/&gt;\n&lt;TextField\n  label=\"First name\"\n  onChange={() =&gt; {}}\n  variant=\"filled\"\n  value=\"John\"\n  disabled\n/&gt;</code></pre>"},{"location":"components/TextField/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the <code>&lt;input&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <pre><code>&lt;TextField\n  label=\"Address\"\n  autoComplete=\"street-address\"\n  minLength={3}\n  maxLength={80}\n/&gt;\n&lt;TextField\n  label=\"Address\"\n  variant=\"filled\"\n  autoComplete=\"street-address\"\n  minLength={3}\n  maxLength={80}\n/&gt;\n&lt;TextField\n  inputSize={3}\n  min={13}\n  max={120}\n  label=\"Age\"\n  type=\"number\"\n/&gt;\n&lt;TextField\n  inputSize={3}\n  min={13}\n  max={120}\n  label=\"Age\"\n  type=\"number\"\n  variant=\"filled\"\n/&gt;</code></pre> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;input type=\"text\" /&gt;</code> HTML element attributes</li> <li><code>&lt;input type=\"email\" /&gt;</code> HTML element attributes</li> <li><code>&lt;input type=\"number\" /&gt;</code> HTML element attributes</li> <li><code>&lt;input type=\"tel\" /&gt;</code> HTML element attributes</li> <li><code>&lt;input type=\"password\" /&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/TextField/#forwarding-ref","title":"Forwarding ref","text":"<p>If you provide ref, it is forwarded to the native HTML <code>&lt;input&gt;</code> element.</p>"},{"location":"components/TextField/#api","title":"API","text":""},{"location":"components/TextField/#theming","title":"Theming","text":"<p>Head to Forms Theming to see shared form theming options.</p>"},{"location":"components/TextLink/","title":"TextLink","text":"<p>TextLink allows users to follow navigation.</p>"},{"location":"components/TextLink/#basic-usage","title":"Basic Usage","text":"<p>To implement the TextLink component, you need to import it first:</p> <pre><code>import { TextLink } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;TextLink\n  href=\"/docs/contribute/general-guidelines\"\n  label=\"How can I contribute to React UI?\"\n/&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/TextLink/#general-guidelines","title":"General Guidelines","text":"<p>Avoid using links for actions, use a Button instead. This is because users expect navigation to happen when clicking on something what looks like a link.</p>"},{"location":"components/TextLink/#custom-routing","title":"Custom Routing","text":"<p>It's common to use custom function for routing within SPAs. Use the <code>onClick</code> option to provide such function.</p> <pre><code>&lt;TextLink\n  href=\"/docs/contribute/general-guidelines\"\n  label=\"This link is controlled by custom function\"\n  onClick={(event) =&gt; {\n    event.preventDefault();\n    alert('You will be redirected.')\n    window.location = event.currentTarget.getAttribute('href');\n  }}\n/&gt;</code></pre>"},{"location":"components/TextLink/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the root <code>&lt;a&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;a&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/TextLink/#api","title":"API","text":""},{"location":"components/TextLink/#theming","title":"Theming","text":"<p>\u2139\ufe0f The TextLink component is context-aware and can inherit text color from its parent component. This applies for components using Feedback color collection and for components in any of the supported validation states. In such cases, the custom properties marked with an asterisk (*) are ignored.</p> Custom Property Description <code>--rui-TextLink__color</code> * Text color <code>--rui-TextLink__text-decoration</code> Text decoration, e.g. underline <code>--rui-TextLink--hover__color</code> * Text color on hover <code>--rui-TextLink--hover__text-decoration</code> Text decoration on hover <code>--rui-TextLink--active__color</code> * Text color in the active state <code>--rui-TextLink--active__text-decoration</code> Text decoration in the active state"},{"location":"components/Toggle/","title":"Toggle","text":"<p>Toggle switches things on and off.</p>"},{"location":"components/Toggle/#basic-usage","title":"Basic Usage","text":"<p>To implement the Toggle component, you need to import it first:</p> <pre><code>import { Toggle } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>React.createElement(() =&gt; {\n  const [studioQuality, setStudioQuality] = React.useState(true);\n  return (\n    &lt;Toggle\n      checked={studioQuality}\n      label=\"Listen in studio quality\"\n      onChange={() =&gt; setStudioQuality(!studioQuality)}\n    /&gt;\n  );\n});</code></pre> <p>See API for all available options.</p>"},{"location":"components/Toggle/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Use the toggle only for boolean (true/false) input with an immediate effect   (without confirmation). To toggle things on or off in forms that require to   be submitted by a button, use rather the   CheckboxField component.</p> </li> <li> <p>Use positive wording for the toggle label, so that it's clear what will   happen when the user turns on the toggle. Avoid negations such as \u201cDon't send   me any emails\u201d which would mean that the user needs to turn the toggle on   in order for something not to happen.</p> </li> <li> <p>Use text labels unless it is necessary to wrap text label into   Popover-like to component to provide additional info about the field.</p> </li> <li> <p>Only make the Toggle's label invisible when there is another visual clue   to guide users through using the input.</p> </li> <li> <p>When a short label is not enough, use help texts to guide users before   they enter anything.</p> </li> <li> <p>Use clear, calm error messages when there's a problem with what they   entered.</p> </li> <li> <p>The toggle is designed for switching things on and off. Don't use it to   switch between two different things that cannot be described as on or off   using a single label, e.g. different viewing modes. In such cases, consider   using the ButtonGroup component.</p> </li> </ul>"},{"location":"components/Toggle/#help-text","title":"Help Text","text":"<p>You may provide an additional help text to clarify what will be the impact of turning the toggle on or off.</p> <pre><code>React.createElement(() =&gt; {\n  const [studioQuality, setStudioQuality] = React.useState(true);\n  return (\n    &lt;Toggle\n      checked={studioQuality}\n      helpText={\n        'Unrivaled audio quality. Uses the MQA audio format. '\n        + 'Transfers a lot of data.'\n      }\n      label=\"Listen in studio quality\"\n      onChange={() =&gt; setStudioQuality(!studioQuality)}\n    /&gt;\n  );\n});</code></pre>"},{"location":"components/Toggle/#label-options","title":"Label Options","text":"<p>In some cases, it may be convenient to visually hide the toggle label. The label remains accessible to assistive technologies.</p> <pre><code>React.createElement(() =&gt; {\n  const [studioQuality, setStudioQuality] = React.useState(true);\n  return (\n    &lt;Toggle\n      checked={studioQuality}\n      isLabelVisible={false}\n      label=\"You cannot see this\"\n      onChange={() =&gt; setStudioQuality(!studioQuality)}\n    /&gt;\n  );\n});</code></pre> <p>It's also possible to display the label before the input:</p> <pre><code>React.createElement(() =&gt; {\n  const [studioQuality, setStudioQuality] = React.useState(true);\n  return (\n    &lt;Toggle\n      checked={studioQuality}\n      label=\"Listen in studio quality\"\n      labelPosition=\"before\"\n      onChange={() =&gt; setStudioQuality(!studioQuality)}\n    /&gt;\n  );\n});</code></pre>"},{"location":"components/Toggle/#states","title":"States","text":""},{"location":"components/Toggle/#validation-states","title":"Validation States","text":"<p>Validation states visually present the result of validation of the input. You should always provide a validation message for states other than valid so users know what happened and what action they should take or what options they have.</p> <pre><code>React.createElement(() =&gt; {\n  const [studioQuality, setStudioQuality] = React.useState(true);\n  return (\n    &lt;&gt;\n      &lt;Toggle\n        checked={studioQuality}\n        label=\"Listen in studio quality\"\n        onChange={() =&gt; setStudioQuality(!studioQuality)}\n        validationState=\"valid\"\n      /&gt;\n      &lt;Toggle\n        checked={studioQuality}\n        label=\"Listen in studio quality\"\n        onChange={() =&gt; setStudioQuality(!studioQuality)}\n        validationState=\"warning\"\n        validationText={\n          'Looks like you are connected over cellular network. '\n          + 'Please make sure you know what you are doing.'\n        }\n      /&gt;\n      &lt;Toggle\n        checked={studioQuality}\n        label=\"Listen in studio quality\"\n        onChange={() =&gt; setStudioQuality(!studioQuality)}\n        validationState=\"invalid\"\n        validationText={(\n          &lt;&gt;\n            Please\n            {' '}\n            &lt;TextLink href=\"#\" label=\"upgrade your plan\" /&gt;\n            {' '}\n            to make this option available.\n          &lt;/&gt;\n        )}\n      /&gt;\n    &lt;/&gt;\n  );\n});</code></pre>"},{"location":"components/Toggle/#required-state","title":"Required State","text":"<p>The required state indicates that the input is mandatory.</p> <pre><code>React.createElement(() =&gt; {\n  const [studioQuality, setStudioQuality] = React.useState(true);\n  return (\n    &lt;Toggle\n      checked={studioQuality}\n      label=\"Listen in studio quality\"\n      onChange={() =&gt; setStudioQuality(!studioQuality)}\n      required\n    /&gt;\n  );\n});</code></pre>"},{"location":"components/Toggle/#styling-the-required-state","title":"Styling the Required State","text":"<p>All form fields in React UI can be styled to indicate the required state.</p> <p>However, you may find yourself in a situation where a form field is valid in both checked and unchecked states, for example to turn on or off a feature. If your project uses the label color as the primary means to indicate the required state of input fields and the usual asterisk <code>*</code> is omitted, you may want to keep the label color consistent for both states to avoid confusion.</p> <p>For this edge case, there is the <code>renderAsRequired</code> prop:</p> <pre><code>React.createElement(() =&gt; {\n  const [optional, setOptional] = React.useState(false);\n  const [renderAsRequired, setRenderAsRequired] = React.useState(false);\n  return (\n    &lt;React.Fragment&gt;\n      &lt;style&gt;\n      {`\n        .example {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 1rem 0.5rem;\n        }\n\n        .example--themed-form-fields {\n          --rui-FormField__label__color: var(--rui-color-text-secondary);\n          --rui-FormField--required__label__color: var(--rui-color-text-primary);\n          --rui-FormField--required__sign: '';\n        }\n      `}\n      &lt;/style&gt;\n      &lt;div class=\"example example--themed-form-fields\"&gt;\n       &lt;Toggle\n          checked={optional}\n          label=\"This field is optional\"\n          onChange={() =&gt; setOptional(!optional)}\n        /&gt;\n        &lt;Toggle\n          checked={renderAsRequired}\n          label=\"This field is optional but looks like required\"\n          onChange={() =&gt; setRenderAsRequired(!renderAsRequired)}\n          renderAsRequired\n        /&gt;\n      &lt;/div&gt;\n    &lt;/React.Fragment&gt;\n  );\n});</code></pre> <p>It renders the field as if it was required, but doesn't add the <code>required</code> attribute to the actual input.</p>"},{"location":"components/Toggle/#disabled-state","title":"Disabled State","text":"<p>Disabled state makes the input unavailable.</p> <pre><code>&lt;Toggle label=\"Disabled toggle\" disabled /&gt;\n&lt;Toggle\n  label=\"Disabled toggle, checked\"\n  disabled\n  checked\n/&gt;</code></pre>"},{"location":"components/Toggle/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the <code>&lt;input&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;input type=\"checkbox\" /&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/Toggle/#forwarding-ref","title":"Forwarding ref","text":"<p>If you provide ref, it is forwarded to the native HTML <code>&lt;input&gt;</code> element.</p>"},{"location":"components/Toggle/#api","title":"API","text":""},{"location":"components/Toggle/#theming","title":"Theming","text":"<p>Head to Forms Theming to see shared form theming options. On top of that, the following options are available for Toggle.</p> Custom Property Description <code>--rui-FormField--check__input--toggle__width</code> Input width (height is shared with other check fields) <code>--rui-FormField--check__input--toggle__border-radius</code> Input corner radius <code>--rui-FormField--check__input--toggle__background-size</code> Input background size <code>--rui-FormField--check__input--toggle--default__background-image</code> Background image of unchecked input <code>--rui-FormField--check__input--toggle--default__background-position</code> Background position of unchecked input <code>--rui-FormField--check__input--toggle--checked__background-image</code> Background image of checked input <code>--rui-FormField--check__input--toggle--checked__background-position</code> Background position of checked input"},{"location":"components/Toolbar/","title":"Toolbar","text":"<p>The responsive Toolbar layout is a versatile tool that allows spacing, grouping, and aligning inline items.</p>"},{"location":"components/Toolbar/#basic-usage","title":"Basic Usage","text":"<p>To implement the Toolbar component, you need to import it first:</p> <pre><code>import { Toolbar, ToolbarItem } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;Toolbar&gt;\n  &lt;ToolbarItem&gt;\n    &lt;docoff-placeholder bordered&gt;Toolbar item&lt;/docoff-placeholder&gt;\n  &lt;/ToolbarItem&gt;\n  &lt;ToolbarItem&gt;\n    &lt;docoff-placeholder bordered&gt;Toolbar item&lt;/docoff-placeholder&gt;\n  &lt;/ToolbarItem&gt;\n  &lt;ToolbarItem&gt;\n    &lt;docoff-placeholder bordered&gt;Toolbar item&lt;/docoff-placeholder&gt;\n  &lt;/ToolbarItem&gt;\n&lt;/Toolbar&gt;</code></pre> <p>See API for all available options.</p>"},{"location":"components/Toolbar/#general-guidelines","title":"General Guidelines","text":"<ul> <li> <p>Toolbar is great for flexible inline layouts. For stacking your content   vertically or building two-dimensional layouts head to the Grid   layout.</p> </li> <li> <p>Wrap your items into the ToolbarItem component. This ensures your content   is properly spaced and aligned with other Toolbar elements. Do not try to   put any custom HTML or React components directly into the Toolbar layout   without wrapping it with the ToolbarItem first.</p> </li> <li> <p>Be careful with using Toolbar with long or dynamic items in narrow   containers. Toolbar intentionally prevents its items from shrinking using   <code>flex: none</code> which may cause overflow in case of lack of horizontal space.   Depending on your situation, consider turning on the <code>nowrap</code> option   (which allows shrinking of items but disables Toolbar from wrapping), using   the Text component to precisely control text wrapping, or switching to   the Grid layout.</p> </li> </ul>"},{"location":"components/Toolbar/#alignment","title":"Alignment","text":"<p>You can tweak your Toolbar layout using rich alignment options, both in horizontal and vertical direction.</p> <p>\ud83d\udc49 At the current stage of development, React UI is RTL aware so switching to a fully RTL-compatible behavior in the future should be painless. That's why the justification values are called rather <code>start</code> than <code>left</code> and <code>end</code> instead of <code>right</code>.</p> <pre><code>React.createElement(() =&gt; {\n  const [alignment, setAlignment] = React.useState('top');\n  const [justification, setJustification] = React.useState('start');\n  return (\n    &lt;div&gt;\n      &lt;Toolbar&gt;\n        &lt;ToolbarGroup align=\"baseline\"&gt;\n          &lt;ToolbarItem&gt;\n            &lt;span id=\"alignment-label\"&gt;Alignment:&lt;/span&gt;\n          &lt;/ToolbarItem&gt;\n          &lt;ToolbarItem&gt;\n            &lt;ButtonGroup aria-labelledby=\"alignment-label\" priority=\"outline\"&gt;\n              &lt;Button\n                aria-pressed={alignment === 'top'}\n                color={alignment === 'top' ? 'selected' : 'secondary'}\n                label=\"top\"\n                onClick={() =&gt; setAlignment('top')}\n              /&gt;\n              &lt;Button\n                aria-pressed={alignment === 'middle'}\n                color={alignment === 'middle' ? 'selected' : 'secondary'}\n                label=\"middle\"\n                onClick={() =&gt; setAlignment('middle')}\n              /&gt;\n              &lt;Button\n                aria-pressed={alignment === 'bottom'}\n                color={alignment === 'bottom' ? 'selected' : 'secondary'}\n                label=\"bottom\"\n                onClick={() =&gt; setAlignment('bottom')}\n              /&gt;\n              &lt;Button\n                aria-pressed={alignment === 'baseline'}\n                color={alignment === 'baseline' ? 'selected' : 'secondary'}\n                label=\"baseline\"\n                onClick={() =&gt; setAlignment('baseline')}\n              /&gt;\n            &lt;/ButtonGroup&gt;\n          &lt;/ToolbarItem&gt;\n        &lt;/ToolbarGroup&gt;\n        &lt;ToolbarGroup align=\"baseline\"&gt;\n          &lt;ToolbarItem&gt;\n            &lt;span id=\"justification-label\"&gt;Justification:&lt;/span&gt;\n          &lt;/ToolbarItem&gt;\n          &lt;ToolbarItem&gt;\n            &lt;ButtonGroup aria-labelledby=\"justification-label\" priority=\"outline\"&gt;\n              &lt;Button\n                aria-pressed={justification === 'start'}\n                color={justification === 'start' ? 'selected' : 'secondary'}\n                label=\"start\"\n                onClick={() =&gt; setJustification('start')}\n              /&gt;\n              &lt;Button\n                aria-pressed={justification === 'center'}\n                color={justification === 'center' ? 'selected' : 'secondary'}\n                label=\"center\"\n                onClick={() =&gt; setJustification('center')}\n              /&gt;\n              &lt;Button\n                aria-pressed={justification === 'end'}\n                color={justification === 'end' ? 'selected' : 'secondary'}\n                label=\"end\"\n                onClick={() =&gt; setJustification('end')}\n              /&gt;\n              &lt;Button\n                aria-pressed={justification === 'space-between'}\n                color={justification === 'space-between' ? 'selected' : 'secondary'}\n                label=\"space-between\"\n                onClick={() =&gt; setJustification('space-between')}\n              /&gt;\n            &lt;/ButtonGroup&gt;\n          &lt;/ToolbarItem&gt;\n        &lt;/ToolbarGroup&gt;\n      &lt;/Toolbar&gt;\n      &lt;Toolbar align={alignment} justify={justification}&gt;\n        &lt;ToolbarItem&gt;\n          &lt;docoff-placeholder bordered&gt;First item&lt;/docoff-placeholder&gt;\n        &lt;/ToolbarItem&gt;\n        &lt;ToolbarItem&gt;\n          &lt;docoff-placeholder bordered&gt;\n            Second item&lt;br /&gt;\n            is taller\n          &lt;/docoff-placeholder&gt;\n        &lt;/ToolbarItem&gt;\n        &lt;ToolbarItem&gt;\n          &lt;docoff-placeholder bordered&gt;Third item&lt;/docoff-placeholder&gt;\n        &lt;/ToolbarItem&gt;\n      &lt;/Toolbar&gt;\n    &lt;/div&gt;\n  );\n});</code></pre>"},{"location":"components/Toolbar/#groups","title":"Groups","text":"<p>Toolbar items can be grouped which enables you aligning related items together. To provide the best possible flexibility for building your layout, the ToolbarGroup allows you to set many options similar to the Toolbar: vertical alignment, dense spacing, or disable wrapping.</p> <pre><code>&lt;Toolbar justify=\"space-between\"&gt;\n  &lt;ToolbarGroup&gt;\n    &lt;ToolbarItem&gt;\n      &lt;docoff-placeholder bordered&gt;Group A&lt;/docoff-placeholder&gt;\n    &lt;/ToolbarItem&gt;\n    &lt;ToolbarItem&gt;\n      &lt;docoff-placeholder bordered&gt;Group A&lt;/docoff-placeholder&gt;\n    &lt;/ToolbarItem&gt;\n  &lt;/ToolbarGroup&gt;\n  &lt;ToolbarGroup align=\"middle\"&gt;\n    &lt;ToolbarItem&gt;\n      &lt;docoff-placeholder bordered&gt;Group B&lt;/docoff-placeholder&gt;\n    &lt;/ToolbarItem&gt;\n    &lt;ToolbarItem&gt;\n      &lt;docoff-placeholder bordered&gt;Group B&lt;/docoff-placeholder&gt;\n    &lt;/ToolbarItem&gt;\n  &lt;/ToolbarGroup&gt;\n  &lt;ToolbarItem&gt;\n    &lt;docoff-placeholder bordered&gt;Item&lt;/docoff-placeholder&gt;\n  &lt;/ToolbarItem&gt;\n&lt;/Toolbar&gt;</code></pre>"},{"location":"components/Toolbar/#dense-layout","title":"Dense Layout","text":"<p>Sometimes it's useful to get related items even closer together. This can be easily achieved through the <code>dense</code> option which can be applied on individual toolbar groups, or on the entire toolbar.</p> <pre><code>React.createElement(() =&gt; {\n  const [isGroupDense, setIsGroupDense] = React.useState(false);\n  const [isToolbarDense, setIsToolbarDense] = React.useState(false);\n  return (\n    &lt;div&gt;\n      &lt;Toolbar&gt;\n        &lt;ToolbarItem&gt;\n          &lt;CheckboxField\n            checked={isGroupDense}\n            label=\"Dense ToolbarGroup\"\n            onChange={(e) =&gt; setIsGroupDense(e.target.checked)}\n          /&gt;\n        &lt;/ToolbarItem&gt;\n        &lt;ToolbarItem&gt;\n          &lt;CheckboxField\n            checked={isToolbarDense}\n            label=\"Dense Toolbar\"\n            onChange={(e) =&gt; setIsToolbarDense(e.target.checked)}\n          /&gt;\n        &lt;/ToolbarItem&gt;\n      &lt;/Toolbar&gt;\n      &lt;Toolbar dense={isToolbarDense}&gt;\n        &lt;ToolbarGroup dense={isGroupDense}&gt;\n          &lt;ToolbarItem&gt;\n            &lt;docoff-placeholder bordered&gt;Group item&lt;/docoff-placeholder&gt;\n          &lt;/ToolbarItem&gt;\n          &lt;ToolbarItem&gt;\n            &lt;docoff-placeholder bordered&gt;Group item&lt;/docoff-placeholder&gt;\n          &lt;/ToolbarItem&gt;\n        &lt;/ToolbarGroup&gt;\n        &lt;ToolbarItem&gt;\n          &lt;docoff-placeholder bordered&gt;Standalone item&lt;/docoff-placeholder&gt;\n        &lt;/ToolbarItem&gt;\n        &lt;ToolbarItem&gt;\n          &lt;docoff-placeholder bordered&gt;Standalone item&lt;/docoff-placeholder&gt;\n        &lt;/ToolbarItem&gt;\n      &lt;/Toolbar&gt;\n    &lt;/div&gt;\n  );\n});</code></pre>"},{"location":"components/Toolbar/#wrapping","title":"Wrapping","text":"<p>By default, all toolbar items are queued up one after another in a row. The items automatically wrap and create a new row. To prevent this behavior, just set the <code>nowrap</code> option on the Toolbar or on individual ToolbarGroups. Note that ToolbarGroups can still wrap when the wrapping is disabled just on their parent Toolbar.</p> <pre><code>&lt;p&gt;Disabled wrapping on entire toolbar:&lt;/p&gt;\n&lt;Toolbar justify=\"space-between\" nowrap&gt;\n  &lt;ToolbarGroup&gt;\n    &lt;ToolbarItem&gt;\n      &lt;docoff-placeholder bordered&gt;Group A&lt;/docoff-placeholder&gt;\n    &lt;/ToolbarItem&gt;\n    &lt;ToolbarItem&gt;\n      &lt;docoff-placeholder bordered&gt;Group A&lt;/docoff-placeholder&gt;\n    &lt;/ToolbarItem&gt;\n  &lt;/ToolbarGroup&gt;\n  &lt;ToolbarGroup&gt;\n    &lt;ToolbarItem&gt;\n      &lt;docoff-placeholder bordered&gt;Group B&lt;/docoff-placeholder&gt;\n    &lt;/ToolbarItem&gt;\n    &lt;ToolbarItem&gt;\n      &lt;docoff-placeholder bordered&gt;Group B&lt;/docoff-placeholder&gt;\n    &lt;/ToolbarItem&gt;\n  &lt;/ToolbarGroup&gt;\n  &lt;ToolbarItem&gt;\n    &lt;docoff-placeholder bordered&gt;Item&lt;/docoff-placeholder&gt;\n  &lt;/ToolbarItem&gt;\n&lt;/Toolbar&gt;\n&lt;p&gt;Disabled wrapping on toolbar groups:&lt;/p&gt;\n&lt;Toolbar justify=\"space-between\"&gt;\n  &lt;ToolbarGroup nowrap&gt;\n    &lt;ToolbarItem&gt;\n      &lt;docoff-placeholder bordered&gt;Group A&lt;/docoff-placeholder&gt;\n    &lt;/ToolbarItem&gt;\n    &lt;ToolbarItem&gt;\n      &lt;docoff-placeholder bordered&gt;Group A&lt;/docoff-placeholder&gt;\n    &lt;/ToolbarItem&gt;\n  &lt;/ToolbarGroup&gt;\n  &lt;ToolbarGroup nowrap&gt;\n    &lt;ToolbarItem&gt;\n      &lt;docoff-placeholder bordered&gt;Group B&lt;/docoff-placeholder&gt;\n    &lt;/ToolbarItem&gt;\n    &lt;ToolbarItem&gt;\n      &lt;docoff-placeholder bordered&gt;Group B&lt;/docoff-placeholder&gt;\n    &lt;/ToolbarItem&gt;\n  &lt;/ToolbarGroup&gt;\n  &lt;ToolbarItem&gt;\n    &lt;docoff-placeholder bordered&gt;Item&lt;/docoff-placeholder&gt;\n  &lt;/ToolbarItem&gt;\n&lt;/Toolbar&gt;</code></pre> <p>\ud83d\udc49 Depending on your situation, you may need to further control wrapping of text content placed within Toolbar. The Text component is designed specifically for this kind of job.</p>"},{"location":"components/Toolbar/#flexible-items","title":"Flexible Items","text":"<p>Toolbar items can be made flexible to grow and shrink according to the available space. This is useful e.g. when you need to combine text with an action:</p> <pre><code>&lt;Toolbar&gt;\n  &lt;ToolbarItem flexible&gt;\n    &lt;docoff-placeholder bordered&gt;My Headline&lt;/docoff-placeholder&gt;\n  &lt;/ToolbarItem&gt;\n  &lt;ToolbarItem&gt;\n    &lt;docoff-placeholder bordered&gt;Action&lt;/docoff-placeholder&gt;\n  &lt;/ToolbarItem&gt;\n&lt;/Toolbar&gt;</code></pre> <p>Or to build a classic media layout with image on the left and text on the right:</p> <pre><code>&lt;Toolbar&gt;\n  &lt;ToolbarItem&gt;\n    &lt;docoff-placeholder bordered&gt;Media object&lt;/docoff-placeholder&gt;\n  &lt;/ToolbarItem&gt;\n  &lt;ToolbarItem flexible&gt;\n    &lt;docoff-placeholder bordered&gt;Media body&lt;/docoff-placeholder&gt;\n  &lt;/ToolbarItem&gt;\n&lt;/Toolbar&gt;</code></pre>"},{"location":"components/Toolbar/#forwarding-html-attributes","title":"Forwarding HTML Attributes","text":"<p>In addition to the options below in the component's API section, you can specify any HTML attribute you like. All attributes that don't interfere with the API of the React component and that aren't filtered out by <code>transferProps</code> helper are forwarded to the root <code>&lt;div&gt;</code> HTML element. This enables making the component interactive and helps to improve its accessibility.</p> <p>\ud83d\udc49 For the full list of supported attributes refer to:</p> <ul> <li><code>&lt;div&gt;</code> HTML element attributes</li> <li>React common props</li> </ul>"},{"location":"components/Toolbar/#api","title":"API","text":""},{"location":"components/Toolbar/#toolbargroup-api","title":"ToolbarGroup API","text":"<p>A wrapper for grouping ToolbarItems together.</p> <p></p>"},{"location":"components/Toolbar/#toolbaritem-api","title":"ToolbarItem API","text":"<p>A wrapper for individual toolbar items.</p> <p></p>"},{"location":"components/Toolbar/#theming","title":"Theming","text":"Custom Property Description <code>--rui-Toolbar__gap</code> Gap between toolbar items <code>--rui-Toolbar__gap--dense</code> Dense gap between toolbar items"},{"location":"docs/contribute/api/","title":"API Guidelines","text":"<p>Guiding principles for designing component APIs.</p>"},{"location":"docs/contribute/api/#visual-props-api-vs-theme","title":"Visual Props: API vs. Theme","text":"<p>While a custom theme is intended to define visual and interaction settings, component API can be designed to allow customization of many kinds, including the visual properties. This may be confusing during the design process of a component. So how do you reliably know which approach you need?</p> <p>The key difference is whether you want to enable overriding the default value in the component instance:</p> <p>Do I want to allow overriding this particular visual setting in a component instance?</p> <ul> <li>If yes, put it into the API of the component. Developers can adjust their   global props, but the option value can still be   overridden per component instance.</li> <li>If not, put it into the theme. Developers can change it   in their theme and it will be   the same for all component instances.</li> </ul>"},{"location":"docs/contribute/api/#measures","title":"Measures","text":"<p>Always use spacing values for all kinds of measures like offsets, gaps, or spacings. This helps keep the design consistent across components.</p>"},{"location":"docs/contribute/composition/","title":"Composition","text":"<p>There are several types of composition approaches.</p> <ol> <li> <p>Self-contained components: just a single component is needed. E.g.    <code>Alert</code>, <code>Button</code>, <code>TextField</code>, etc.</p> </li> <li> <p>Components with subcomponents: subcomponents cannot exist on their own    outside their parent components.</p> <ul> <li> <p>Mandatory subcomponents: subcomponent must be used at least once in    order for the composition to work. E.g. <code>Tabs</code> + <code>TabsItem</code>.</p> </li> <li> <p>Optional subcomponents: optional subcomponents may be used to achieve    special results. E.g. <code>FormLayout</code> + <code>FormLayoutCustomField</code> or <code>Grid</code> +    <code>GridSpan</code>.</p> </li> <li> <p>Both mandatory and optional subcomponents: e.g. <code>Card</code> + <code>CardBody</code>    (mandatory) + <code>CardFooter</code> (optional), <code>Toolbar</code> + <code>ToolbarItem</code>    (mandatory) + <code>ToolbarGroup</code> (optional), etc.</p> </li> </ul> </li> <li> <p>Wrappers for other components: component is designed to wrap other    self-contained components. E.g. <code>FormLayout</code> + form fields (<code>CheckboxField</code>,    <code>TextField</code>, <code>Toggle</code>, \u2026) or <code>ButtonGroup</code> + <code>Button</code>.</p> </li> </ol> <p>While authoring self-contained components (1) and wrappers (3) is quite straightforward, components with subcomponents require special attention when styling. Head to CSS Guidelines to learn more.</p>"},{"location":"docs/contribute/css/","title":"CSS Guidelines","text":""},{"location":"docs/contribute/css/#css-guidelines","title":"CSS Guidelines","text":"<p>Basic rules to follow when authoring React UI CSS.</p>"},{"location":"docs/contribute/css/#coding-style","title":"Coding Style","text":"<p>React UI uses Stylelint to avoid errors in CSS and enforce unified coding style across all stylesheets.</p> <p>Configurations used:</p> <ul> <li> <p><code>stylelint-config-visionapps</code> \u2014 a more strict   extension of popular community preset   <code>stylelint-config-standard</code>.</p> </li> <li> <p><code>stylelint-config-visionapps-order</code> \u2014   an opinionated list of CSS properties order.</p> </li> <li> <p><code>stylelint-config-css-modules</code> \u2014 tweak of   Stylelint rules for CSS modules.</p> </li> </ul>"},{"location":"docs/contribute/css/#css-architecture","title":"CSS Architecture","text":"<p>Without Web Components, there is no such thing as a complete encapsulation of a component. Inside browser window, a React app is still a bunch of HTML and CSS (and JS, of course) living in the same global context. Developers can fight against CSS cascade, inheritance and specificity, or accept these principles, and even benefit from them. Understanding how CSS works and making use of this knowledge leads towards smaller stylesheets, easier maintenance, and better performance.</p> <p>To be able to handle CSS at such a large scale of a UI library, React UI works in harmony with fundamental CSS principles. Most importantly, all CSS is written in specificity order, i.e. from lowest to highest specificity. This idea was most famously shaped and popularized by Harry Roberts in his [ITCSS] architecture. React UI draws inspiration from ITCSS which can be seen the best in the foundation CSS layer (and its source).</p>"},{"location":"docs/contribute/css/#file-structure","title":"File Structure","text":"<p>There are three simple rules to follow when organizing React UI CSS:</p> <ol> <li>Component styles must be placed in component's directory.</li> <li>Components must not import other component's styles.</li> <li>Any CSS that needs to be shared across multiple components and/or global    styles must be placed in the <code>src/styles</code> directory.</li> </ol> <p>\ud83d\udc49 All React UI CSS is written in Sass. Learn more about preprocessing with Sass.</p> <pre><code>\u251c\u2500\u2500 src\n    \u251c\u2500\u2500 \u2026\n    \u2514\u2500\u2500 lib                       Main source directory, contains global Sass endpoints\n        \u251c\u2500\u2500 components            React components with their stylesheets\n            \u251c\u2500\u2500 *\n                \u251c\u2500\u2500 &lt;Component&gt;\n                    \u251c\u2500\u2500 \u2026\n                    \u251c\u2500\u2500 _settings.scss           Component's non-themeable Sass variables\n                    \u251c\u2500\u2500 _theme.scss              Component's Sass interface to its CSS custom properties in `theme.scss`\n                    \u251c\u2500\u2500 _tools.scss              Component's Sass mixins and functions\n                    \u251c\u2500\u2500 Component.module.scss    Component's main stylesheet loaded as CSS Module\n                    \u2514\u2500\u2500 \u2026\n        \u251c\u2500\u2500 \u2026\n        \u251c\u2500\u2500 styles                Partials for top-level Sass endpoints and shared styles\n            \u251c\u2500\u2500 elements          Styles for unclassed HTML elements (type selectors)\n            \u251c\u2500\u2500 generic           Global ground-zero styles\n            \u251c\u2500\u2500 helpers           Helper classes\n            \u251c\u2500\u2500 settings          Sass variables shared across global styles and/or multiple components\n            \u251c\u2500\u2500 theme             Sass interface to `theme.scss`, used in global styles or across multiple components\n            \u251c\u2500\u2500 theme-constants   Sass variables for use only within `theme.scss`\n            \u251c\u2500\u2500 tools             Sass mixins and functions shared across global styles and/or multiple components\n            \u2514\u2500\u2500 _utilities.scss   Sass loop that generates utility classes from `settings/_utilities.scss` config\n        \u251c\u2500\u2500 \u2026\n        \u251c\u2500\u2500 foundation.scss       Mandatory themeable CSS layer, ground-zero for React components\n        \u251c\u2500\u2500 helpers.scss          Optional set of helper and utility classes\n        \u2514\u2500\u2500 theme.scss            Default theme, a collection of hundreds of CSS custom properties</code></pre>"},{"location":"docs/contribute/css/#cascade-layers","title":"Cascade Layers","text":"<p>React UI CSS is organized into cascade layers, each with its own specificity level. The layers are as follows:</p> <ol> <li><code>@layer theme</code> \u2014 a collection of hundreds of CSS custom properties that    define the look and feel of your UI.</li> <li><code>@layer foundation</code> \u2014 mandatory ground-zero CSS for components and other    styling. Includes sublayers like <code>@layer foundation.generic</code> and    <code>@layer foundation.elements</code>.</li> <li><code>@layer helpers</code> \u2014 small styling abstractions that can be used across the    whole UI.</li> <li><code>@layer components</code> \u2014 component styles are written as CSS modules which    output into this layer. Also, each component has its own cascade layer, e.g.    <code>@layer components.modal</code>.</li> <li><code>@layer utilities</code> \u2014 tiny classes to control selected CSS properties,    forcing them with <code>!important</code>.</li> </ol> <p>Any custom CSS can be added to the end of the cascade, but it's recommended to use any of the existing layers to keep the CSS organized.</p> <p>\ud83d\udc49 With <code>!important</code> styles, layered styles take precedence over unlayered styles.</p>"},{"location":"docs/contribute/css/#css-modules","title":"CSS Modules","text":"<p>For components, React UI leverages CSS modules (not to be confused with modular CSS specification of the same name) to take advantage of writing native CSS (meaning \u201cnot JSS or CSS in JS\u201d). Together with Sass, CSS modules represent flexibility and popular programming features needed to author modern stylesheets perfectly familiar to traditional CSS developers.</p>"},{"location":"docs/contribute/css/#components","title":"Components","text":"<p>CSS modules help keeping source class names short and clear. The same class name can be used in another component with different styling. Final class names are converted by tooling and composed of component name, original class name, and a random suffix which makes them unique in global context of the whole web app.</p> <p>For example, this JSX:</p> <pre><code>// Button.jsx\n\n&lt;button className={styles.root}&gt;\n  &lt;span className={styles.beforeLabel}&gt;{beforeLabel}&lt;/span&gt;\n  &lt;span className={styles.label}&gt;{label}&lt;/span&gt;\n  &lt;span className={styles.afterLabel}&gt;{afterLabel}&lt;/span&gt;\n&lt;/button&gt;</code></pre> <p>\u2026 with this SCSS:</p> <pre><code>// Button.module.scss\n\n.root {\n // \u2026\n}\n\n.beforeLabel {\n // \u2026\n}\n\n.afterLabel {\n // \u2026\n}\n\n.label {\n  // \u2026\n}</code></pre> <p>\u2026 produces following CSS class names:</p> <ul> <li><code>Button-module__root__2yVxr5IZ</code></li> <li><code>Button-module__beforeLabel__1rrmrrWj</code></li> <li><code>Button-module__afterLabel__38eMTilM</code></li> <li><code>Button-module__label__23iTNlfS</code></li> </ul> <p>Resulting CSS class names are both unique and human-readable at the same time which is convenient for development. Class names are further shortened and obfuscated for production environments.</p>"},{"location":"docs/contribute/css/#class-naming-rules","title":"Class Naming Rules","text":"<p>Following rules make it clear both in JSX and CSS what is affected by a CSS class.</p> <ol> <li> <p>Class names must use camelCase notation to be usable in JavaScript    context.</p> </li> <li> <p>Short, preferably single-word names should be chosen for all component    elements. No naming convention like BEM or SUIT CSS needs to be applied    since class names are unique in the global scope thanks to CSS modules.    Conventions for modifier classes are covered by the rules below.</p> </li> <li> <p>Component's top-level HTML element must have <code>root</code> class name.    However, this rule has a few exceptions:</p> <ol> <li> <p>When the component is a subcomponent, it's usually better to use    subcomponent's name, e.g. <code>item</code> or <code>group</code>. This enables us to keep    related CSS of both the main component and its subcomponents in a single    file and see the big picture during development.</p> </li> <li> <p>When no CSS on the root element is necessary and styling only takes place    once a visual modification is invoked by component props, <code>root</code> class    name can be omitted entirely.</p> </li> </ol> </li> <li> <p>Modifier class names related to the current HTML element must start with    <code>is</code> and contain the name of the target element, e.g. <code>isRootLoading</code>    (modifies <code>root</code>) or <code>isLabelHidden</code> (modifies <code>label</code>). However, child    elements may be modified as well, e.g. by a CSS selector like    <code>.isRootRequired &gt; .label</code> (root is marked as required but the label is what    needs to be visually modified).</p> </li> <li> <p>Modifier class names related to child elements must start with <code>has</code>     and refer to the element in question, e.g. <code>hasRootSmallInput</code> (applies     styling on <code>root</code> but relates to <code>input</code>).</p> </li> </ol>"},{"location":"docs/contribute/css/#custom-properties","title":"Custom Properties","text":"<p>React UI takes advantage of supporting modern browsers and uses CSS custom properties to make writing and maintaining CSS more efficient.</p> <p>There are three kinds of custom properties used:</p> <ol> <li> <p><code>--rui-local-*</code> for internal (component-scoped, local) custom properties.    May reuse other custom property types.</p> </li> <li> <p><code>--rui-custom-*</code> for any custom properties whose value comes from component's    API. May reuse other custom property types.</p> </li> <li> <p><code>--rui-*</code> (unscoped for the sake of brevity) for theme-related custom    properties. Part of public API, designed to be customized. Must not reuse    other custom property types. Refer to the theming overview to learn how    their names are created.</p> </li> </ol>"},{"location":"docs/contribute/css/#helpers-and-utilities","title":"Helpers and Utilities","text":"<p>There are also global helper and utility classes (both documented as CSS Helpers for the sake of comprehensibility for non-CSS guys) that can be used by developers and thus remain unaltered by CSS modules.</p>"},{"location":"docs/contribute/css/#class-naming-rules_1","title":"Class Naming Rules","text":"<p>Class names must use kebab-case notation to be usable in HTML context.</p>"},{"location":"docs/contribute/css/#preprocessing-with-sass","title":"Preprocessing with Sass","text":"<p>All React UI CSS source is written in SCSS syntax of Sass preprocessor.</p> <ul> <li> <p>Sass variables, mixins and functions must use kebab-case notation.</p> </li> <li> <p>Only Sass modules must be used to organize Sass source files, <code>@import</code>   is deprecated. Using scoped variables, mixins and functions (those starting   with <code>_</code>) is highly recommended whenever appropriate.</p> </li> <li> <p>Built-in Sass modules should be preferred over older Sass functions that   are deprecated, e.g. <code>map.get()</code> instead of <code>map-get()</code>.</p> </li> <li> <p>Mixins that lead to duplicate CSS should be avoided. If possible, combine   multiple CSS selectors for the desired rule set to achieve the same result.</p> </li> <li> <p>Extend functionality should be avoided entirely due to its hardly   predictable behavior.</p> </li> <li> <p>Classes that are automatically generated by Sass loops should be handled   with care. With loops, it's easy to produce a lot of CSS and negatively   impact performance.</p> </li> </ul>"},{"location":"docs/contribute/css/#postprocessing-with-postcss","title":"Postprocessing with PostCSS","text":"<p>All styles are automatically prefixed by Autoprefixer plugin for PostCSS according to Browserslist configuration stored in <code>.browserslistrc</code>.</p>"},{"location":"docs/contribute/general-guidelines/","title":"Contributing","text":"<p>In the first place, thank you for your interest in contributing! \ud83d\ude4f</p>"},{"location":"docs/contribute/general-guidelines/#development","title":"Development","text":"<p>Working on the site requires:</p> <ul> <li>Docker</li> <li>Docker Compose</li> </ul> <p>This allows running the documentation site which serves as a development platform.</p>"},{"location":"docs/contribute/general-guidelines/#configure-docker-compose","title":"Configure Docker Compose","text":"<p>Review the default env variable values in the <code>docker-compose.yml</code> file. The defaults should work for most systems, but can be changed if needed. To change them, edit the <code>.env</code> file as needed.</p>"},{"location":"docs/contribute/general-guidelines/#use-docker-compose","title":"Use Docker Compose","text":""},{"location":"docs/contribute/general-guidelines/#node-shell","title":"Node shell","text":"<p>All npm commands such as <code>npm ci</code>, <code>npm test</code>, <code>npm run eslint</code> and others you need to run them within the <code>node_shell</code> docker container.</p> <p>To log into the container, run:</p> <pre><code>docker compose run --rm node_shell</code></pre>"},{"location":"docs/contribute/general-guidelines/#run-the-dev-server","title":"Run the Dev Server","text":"<ol> <li> <p>Within <code>node_shell</code>: Install dependencies:</p> <pre><code>npm ci</code></pre> </li> <li> <p>On host: Run development server:</p> <pre><code>docker compose up node_dev_server mkdocs_dev_server</code></pre> </li> </ol>"},{"location":"docs/contribute/general-guidelines/#build-the-project","title":"Build the Project","text":"<ol> <li> <p>On host: Make sure the dev server is not running:</p> <pre><code>docker compose down</code></pre> </li> <li> <p>Within <code>node_shell</code>: Install dependencies:</p> <pre><code>npm ci</code></pre> </li> <li> <p>On host: Build JS:</p> <pre><code>docker compose run --rm node_build_site</code></pre> </li> <li> <p>On host: Build mkDocs:</p> <pre><code>docker compose run --rm mkdocs_build_site</code></pre> </li> </ol>"},{"location":"docs/contribute/general-guidelines/#git-workflow","title":"Git Workflow","text":"<p>In order for the automation to work in the best possible way (we use GitHub Actions), please follow these guidelines:</p> <ol> <li> <p>One pull request per subject. Don't combine unrelated changes in a single    PR unless they are really subtle details such as fix of a typo.</p> </li> <li> <p>Only PRs into <code>master</code> branch are listed in changelog. PRs into other    branches are not picked up by release automation.</p> </li> <li> <p>Name your branches according to nature of change. Choose one of:</p> <ul> <li><code>bc/*</code> for breaking changes</li> <li><code>feature/*</code> for features</li> <li><code>bugfix/*</code> for bugfixes</li> <li><code>refactoring/*</code> for refactoring of the library</li> <li><code>docs/*</code> or <code>documentation/*</code> for changes in docs</li> <li><code>maintenance/*</code> for maintenance (builds, dependencies, automation, etc.)</li> <li><code>release/*</code> for releases (administrators only)</li> </ul> </li> <li> <p>Write clear, helpful and descriptive commit messages.</p> <ol> <li>Use imperative and write in English, e.g. Update dependencies or    Claim support for controlled components only.</li> <li>If an issue exists for your changes, append the issue number in    parentheses to the end of the commit message, e.g. Update dependencies    (#261).</li> <li>Optionally use Markdown code blocks to emphasize, e.g.    Create <code>ScrollView</code> component (#53).</li> </ol> </li> <li> <p>Write clear, helpful and descriptive PR names.</p> <ol> <li>All rules for commit messages apply also for PR names.</li> <li>Always check that PR name meets the requirements above because PR    names are used in changelog. GitHub automatically truncates long PR    names and picks up branch name for multi-commit PRs, so it's necessary to    make sure the PR name is what we want to have in the changelog.</li> <li>If an issue exists for your changes, append this text to PR    description (the topmost comment in the PR) in order for the issue    to be    closed automatically once the PR is merged: <code>Closes #&lt;ISSUE NUMBER&gt;</code>. You    will know the issue is linked correctly when it appears in the Linked    issues section of the PR. (Having the issue mentioned in commit message    and/or PR name does not have this effect.)</li> <li>If there is no issue for your changes, please add your PR to <code>The    Board</code> GitHub project in the Projects section of the PR. The correct    board column will be selected automatically. This helps us keep track of    what is in development.</li> </ol> </li> </ol> <p>Pull requests are labelled automatically. You can add more labels to better qualify the nature of the change \u2014 in such case, it will be included in all corresponding changelog groups. Or use the <code>skip changelog</code> label to exclude a pull request from the changelog.</p>"},{"location":"docs/contribute/general-guidelines/#package-linking","title":"Package Linking","text":"<p>The best way for development of React UI is to link <code>react-ui</code> into your application with <code>npm link</code> so you can see it in action.</p> <ol> <li>In React UI repository, run <code>npm link</code></li> <li>In your application, run <code>npm link @react-ui-org/react-ui</code></li> </ol> <p>To prevent Invalid Hook Call Warning when React UI is linked, add the following code to your app's Webpack config:</p> <pre><code>const path = require('path');\n\nmodule.exports = {\n  resolve: {\n    alias: {\n      react: path.resolve('./node_modules/react'),\n      'react-dom': path.resolve('./node_modules/react-dom'),\n    },\n  },\n};</code></pre>"},{"location":"docs/contribute/general-guidelines/#general-guidelines","title":"General Guidelines","text":"<p>To keep React UI consistent and predictable the following guidelines should be observed:</p> <ol> <li>If component accepts the <code>children</code> prop it should be either required or the element    should return <code>null</code> when no children are provided.</li> <li>When forwarding HTML attributes to the component the following rules should     be observed:<ol> <li>If the component internally instantiates one or more interactive     (clickable/editable) elements, the attributes should be forwarded to    all of them.</li> <li>If the component does not internally instantiate an interactive     (clickable/editable) element, the attributes should be forwarded to the     root element of the component.</li> </ol> </li> </ol>"},{"location":"docs/contribute/general-guidelines/#documenting","title":"Documenting","text":"<p>We use combination of Material for MkDocs and Docoff as the documentation platform.</p> <p>Do see their respective documentation for details.</p>"},{"location":"docs/contribute/releasing/","title":"Releasing","text":"<p>The release process is fully automated so you can release a new version just by bumping version number in <code>package.json</code>. However, there are several chances to adjust both version and changelog if you wish to do so for a reason.</p> <p>In order for the automation to work properly, contributors must follow the contributing guidelines.</p>"},{"location":"docs/contribute/releasing/#how-it-works","title":"How It Works","text":"<ol> <li> <p>Pull requests are automatically labelled by branch name. Labels are then used    for:</p> <ol> <li>resolving next semantic version number    (BREAKING.FEATURE.PATCH),</li> <li>grouping changes in changelog.</li> </ol> </li> <li> <p>Release draft with changelog is generated as pull requests are merged into    the <code>master</code> branch. Invididual PR names are listed and grouped by type based    on label(s) added to them previously.</p> </li> </ol> <p>See the source of <code>.github/workflows</code> for details.</p>"},{"location":"docs/contribute/releasing/#release-process","title":"Release Process","text":"<ol> <li> <p>As you go: make sure all contributions follow the contributing    guidelines, especially the Git workflow (correct    PR names and branch names). Check out the release draft on    GitHub releases page to see what the changelog looks like and    what will be the next version number.</p> <p>Don't edit manually until you are ready to publish the release. Release draft is automatically overwritten everytime a change is merged to <code>master</code>.</p> </li> <li> <p>Manual: once you are ready to publish a release:</p> <ol> <li> <p>Bump the version number in <code>package.json</code> and <code>package-lock.json</code>.    Make sure it matches the intended version number in the release draft.    Don't combine this step with any other changes, they wouldn't be    reflected in the changelog.</p> </li> <li> <p>Now is also your chance to review and adjust (if necessary) the    intended    version and actual changelog before the release is published.    Automatic release drafting is skipped when a version change in    <code>package.json</code> is  detected so this time your changes will not be    overwritten. Save your changes in release draft with the Save draft    button, do not publish yet!</p> </li> <li> <p>Get back to the repository, commit both files as    <code>Bump version to &lt;VERSION_NUMBER&gt;</code> in <code>release/&lt;VERSION_NUMBER&gt;</code> branch,    create a pull request, hold your breath, and\u2014merge it.</p> </li> </ol> </li> <li> <p>Automatic: once the release pull request from step 2.3 is merged, the    following actions are triggered automatically:</p> <ol> <li>GitHub release draft with name corresponding to the version number from    step 2 is published.</li> <li>Git tag with the version number from step 2 is added to <code>master</code> branch.</li> <li>Package is built and published to npm package registry.</li> <li>Documentation is built and deployed to production.</li> </ol> </li> </ol> <p>Note: prefix version number with <code>v</code> everywhere except in <code>package.json</code> and <code>package-lock.json</code>.</p>"},{"location":"docs/css-helpers/animation/","title":"Animation","text":"<p>The animation helper allows applying simple animations to UI elements.</p> <p>\ud83d\udc49 Remember that non-block inline elements (ie. an unstyled <code>span</code> or elements that have <code>display: inline</code>) cannot be animated.</p> <pre><code>&lt;p&gt;\n  &lt;code className=\"mr-3\"&gt;.animation-spin-clockwise&lt;/code&gt;\n  &lt;span className=\"d-inline-flex animation-spin-clockwise\"&gt;\n    &lt;rui-icon icon=\"loading\" /&gt;\n  &lt;/span&gt;\n&lt;/p&gt;\n&lt;p&gt;\n  &lt;code className=\"mr-3\"&gt;.animation-spin-counterclockwise&lt;/code&gt;\n  &lt;span className=\"d-inline-flex animation-spin-counterclockwise\"&gt;\n    &lt;rui-icon icon=\"loading\" /&gt;\n  &lt;/span&gt;\n&lt;/p&gt;</code></pre>"},{"location":"docs/css-helpers/box-alignment/","title":"Box Alignment","text":"<p>Responsive box-alignment helper classes allow aligning the content across both axes by setting the <code>align-items</code> and <code>justify-content</code> CSS properties.</p> <p>Use the box-alignment classes on flex or grid containers, they will not work elsewhere.</p> <p>\ud83d\udc49 If you need to quickly create a flex container, there is the <code>.d-flex</code> helper class at your disposal.</p> <p>\ud83d\udcd6 Read more about flexbox and grid layout concepts.</p>"},{"location":"docs/css-helpers/box-alignment/#naming-system","title":"Naming System","text":"<p>The classes are named using the format <code>[alignment]-[value]</code> for <code>xs</code> and <code>[alignment]-[breakpoint]-[value]</code> for <code>sm</code>, <code>md</code>, <code>lg</code>, <code>xl</code>, <code>x2l</code>, and <code>x3l</code> breakpoints.</p> <p>Where <code>alignment</code> is one of:</p> <ul> <li><code>align-items</code></li> <li><code>align-self</code></li> <li><code>justify-content</code></li> <li><code>justify-self</code></li> </ul> <p>For <code>align-items</code> and <code>align-self</code> the value can be:</p> <ul> <li><code>center</code></li> <li><code>start</code></li> <li><code>flex-start</code></li> <li><code>end</code></li> <li><code>flex-end</code></li> <li><code>baseline</code></li> <li><code>stretch</code></li> </ul> <p>For <code>justify-content</code> the value can be:</p> <ul> <li><code>center</code></li> <li><code>start</code></li> <li><code>flex-start</code></li> <li><code>end</code></li> <li><code>flex-end</code></li> <li><code>space-between</code></li> </ul> <p>For <code>justify-self</code> the value can be:</p> <ul> <li><code>center</code></li> <li><code>start</code></li> <li><code>end</code></li> <li><code>baseline</code></li> <li><code>stretch</code></li> </ul> <p>\ud83d\udc49 The difference between <code>start</code>/<code>flex-start</code> and <code>end</code>/<code>flex-end</code> is that the prefixed variants are intended for flexbox while the versions without prefix only work inside grid layout.</p> <p>\ud83d\udcd6 Read more about CSS Box Alignment concepts.</p>"},{"location":"docs/css-helpers/box-alignment/#horizontal-main-axis-alignment-justification","title":"Horizontal (Main-Axis) Alignment (Justification)","text":"<p>There are 6 options of alignment on the main axis: <code>start</code> (<code>flex-start</code> for flexbox), <code>center</code>, <code>end</code> (<code>flex-end</code> for flexbox), and <code>space-between</code>.</p> <pre><code>&lt;div className=\"d-flex justify-content-flex-start\"&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code&gt;.justify-content-flex-start&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n&lt;/div&gt;\n&lt;div className=\"d-flex justify-content-center\"&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code&gt;.justify-content-center&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n&lt;/div&gt;\n&lt;div className=\"d-flex justify-content-flex-end\"&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code&gt;.justify-content-flex-end&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n&lt;/div&gt;\n&lt;div className=\"d-flex justify-content-space-between\"&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code&gt;.justify-content-space-between&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code&gt;.justify-content-space-between&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n&lt;/div&gt;</code></pre>"},{"location":"docs/css-helpers/box-alignment/#vertical-cross-axis-alignment","title":"Vertical (Cross-Axis) Alignment","text":"<p>There are 7 options of alignment on the cross axis: <code>start</code> (<code>flex-start</code> for flexbox), <code>center</code>, <code>end</code> (<code>flex-end</code> for flexbox), <code>baseline</code>, and <code>stretch</code>.</p> <pre><code>&lt;docoff-placeholder bordered&gt;\n  &lt;div className=\"d-flex align-items-flex-start\" style={{ height: '6rem' }}&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.align-items-flex-start&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n&lt;/docoff-placeholder&gt;\n&lt;docoff-placeholder bordered&gt;\n  &lt;div className=\"d-flex align-items-center\" style={{ height: '6rem' }}&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.align-items-center&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n&lt;/docoff-placeholder&gt;\n&lt;docoff-placeholder bordered&gt;\n  &lt;div className=\"d-flex align-items-flex-end\" style={{ height: '6rem' }}&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.align-items-flex-end&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n&lt;/docoff-placeholder&gt;\n&lt;docoff-placeholder bordered&gt;\n  &lt;div className=\"d-flex align-items-baseline\" style={{ height: '6rem' }}&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.align-items-baseline&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code style={{ lineHeight: 4 }}&gt;.align-items-baseline&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n&lt;/docoff-placeholder&gt;\n&lt;docoff-placeholder bordered&gt;\n  &lt;div className=\"d-flex align-items-stretch\" style={{ height: '6rem' }}&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.align-items-stretch&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n&lt;/docoff-placeholder&gt;</code></pre>"},{"location":"docs/css-helpers/box-alignment/#responsive-box-alignment","title":"Responsive Box Alignment","text":"<p>From <code>sm</code> up you can set the desired box alignment for individual breakpoints.</p> <pre><code>&lt;div className=\"d-flex justify-content-sm-flex-start\"&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code&gt;.justify-content-sm-flex-start&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n&lt;/div&gt;\n&lt;div className=\"d-flex justify-content-md-center\"&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code&gt;.justify-content-md-center&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n&lt;/div&gt;\n&lt;div className=\"d-flex justify-content-lg-flex-end\"&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code&gt;.justify-content-lg-flex-end&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n&lt;/div&gt;\n&lt;div className=\"d-flex justify-content-xl-space-between\"&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code&gt;.justify-content-xl-space-between&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code&gt;.justify-content-xl-space-between&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n&lt;/div&gt;</code></pre>"},{"location":"docs/css-helpers/colors/","title":"Colors","text":"<p>Helpers for text and background.</p>"},{"location":"docs/css-helpers/colors/#text-colors","title":"Text Colors","text":"<p>The text color helpers allow coloring any text with predefined text colors, feedback colors, and neutral colors.</p> <pre><code>  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"text-primary\"&gt;.text-primary&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"text-primary-disabled\"&gt;.text-primary-disabled&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"text-secondary\"&gt;.text-secondary&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"text-secondary-disabled\"&gt;.text-secondary-disabled&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"text-success\"&gt;.text-success&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"text-warning\"&gt;.text-warning&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"text-danger\"&gt;.text-danger&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"text-help\"&gt;.text-help&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"text-info\"&gt;.text-info&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"text-note\"&gt;.text-note&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered dark&gt;\n    &lt;code className=\"text-light\"&gt;.text-light&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"text-dark\"&gt;.text-dark&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;</code></pre>"},{"location":"docs/css-helpers/colors/#background-colors","title":"Background Colors","text":"<p>The background color helpers allow coloring any element with predefined background colors (with an exception to background colors for interactive areas that are intended to be used only in CSS).</p> <pre><code>  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-base\"&gt;.bg-base&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-layer-1\"&gt;.bg-layer-1&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-layer-2\"&gt;.bg-layer-2&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-basic\"&gt;.bg-basic&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-disabled\"&gt;.bg-disabled&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-primary\"&gt;.bg-primary&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-secondary\"&gt;.bg-secondary&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-selected\"&gt;.bg-selected&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-success\"&gt;.bg-success&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-warning\"&gt;.bg-warning&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-danger\"&gt;.bg-danger&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-help\"&gt;.bg-help&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-info\"&gt;.bg-info&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-note\"&gt;.bg-note&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-light\"&gt;.bg-light&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;\n  &lt;docoff-placeholder bordered&gt;\n    &lt;code className=\"bg-dark text-light\"&gt;.bg-dark&lt;/code&gt;\n  &lt;/docoff-placeholder&gt;</code></pre>"},{"location":"docs/css-helpers/display/","title":"Display","text":"<p>Responsive display helper classes enable to change the <code>display</code> CSS property, including hiding the content.</p>"},{"location":"docs/css-helpers/display/#naming-system","title":"Naming System","text":"<p>The classes are named using the format <code>d-[value]</code> for <code>xs</code> and <code>d-[breakpoint]-[value]</code> for <code>sm</code>, <code>md</code>, <code>lg</code>, <code>xl</code>, <code>x2l</code>, and <code>x3l</code> breakpoints.</p> <p>Where <code>value</code> is one of:</p> <ul> <li><code>block</code></li> <li><code>flex</code></li> <li><code>inline</code></li> <li><code>inline-block</code></li> <li><code>inline-flex</code></li> <li><code>none</code></li> </ul>"},{"location":"docs/css-helpers/display/#examples","title":"Examples","text":"<pre><code>&lt;div className=\"d-inline-block\"&gt;\n  &lt;code&gt;.d-inline-block&lt;/code&gt;\n&lt;/div&gt;\n&lt;div className=\"d-inline-block\"&gt;\n  &lt;code&gt;.d-inline-block&lt;/code&gt;\n&lt;/div&gt;</code></pre> <pre><code>&lt;div className=\"d-block\"&gt;\n  &lt;code&gt;.d-block&lt;/code&gt;\n&lt;/div&gt;\n&lt;div className=\"d-block\"&gt;\n  &lt;code&gt;.d-block&lt;/code&gt;\n&lt;/div&gt;</code></pre>"},{"location":"docs/css-helpers/display/#hiding-content","title":"Hiding Content","text":"<p>To hide elements simply use the <code>.d-none</code> class or one of the <code>.d-{sm,md,lg,xl,x2l,x3l}-none</code> classes for any responsive screen variation.</p> <p>To show an element only on a given interval of screen sizes you can combine one <code>.d-*-none</code> class with a <code>.d-*-*</code> class, for example <code>.d-none</code> <code>.d-md-block</code> will hide the element for all screen sizes except on the <code>md</code> size.</p> <pre><code>&lt;p className=\"d-none d-md-block\"&gt;\n  This element is hidden on small screens and it becomes visible on screens\n  starting from the &lt;code&gt;md&lt;/code&gt; breakpoint.\n&lt;/p&gt;</code></pre> <p>\ud83d\udc49 It's perfectly OK to hide the content with the <code>.d-none</code> helper class. Just note that it can be even easier with the less known <code>hidden</code> HTML attribute. Browser support is awesome, so why not to use it!</p> <pre><code>Invisible elements\n&lt;span role=\"img\" aria-label=\"Cannot see monkey\"&gt;\ud83d\ude48&lt;/span&gt;.\nNothing here!\n&lt;div className=\"d-none\"&gt;You cannot see me!&lt;/div&gt;\n&lt;div hidden&gt;I am invisible, too&lt;/div&gt;</code></pre>"},{"location":"docs/css-helpers/spacing/","title":"Spacing","text":"<p>Responsive spacing helper classes enable to simply add or modify <code>margin</code> and <code>padding</code> properties where necessary.</p>"},{"location":"docs/css-helpers/spacing/#naming-system","title":"Naming System","text":"<p>The classes are named using the format <code>[property][sides]-[size]</code> for <code>xs</code> and <code>[property][sides]-[breakpoint]-[size]</code> for <code>sm</code>, <code>md</code>, <code>lg</code>, <code>xl</code>, <code>x2l</code>, and  <code>x3l</code> breakpoints.</p> <p>Where <code>property</code> is one of:</p> <ul> <li><code>m</code> - for classes that set <code>margin</code></li> <li><code>p</code> - for classes that set <code>padding</code></li> </ul> <p>Where <code>sides</code> is one of:</p> <ul> <li><code>t</code> - for classes that set <code>margin-top</code> or <code>padding-top</code></li> <li><code>b</code> - for classes that set <code>margin-bottom</code> or <code>padding-bottom</code></li> <li><code>l</code> - for classes that set <code>margin-left</code> or <code>padding-left</code></li> <li><code>r</code> - for classes that set <code>margin-right</code> or <code>padding-right</code></li> </ul> <p>Where <code>size</code> is one of:</p> <ul> <li><code>0</code></li> <li><code>1</code></li> <li><code>2</code></li> <li><code>3</code></li> <li><code>4</code></li> <li><code>5</code></li> <li><code>6</code></li> <li><code>7</code></li> <li><code>auto</code> for classes that set the <code>margin</code> to <code>auto</code></li> </ul> <p>\ud83d\udc49 Check the spacing scale to see the exact values of individual sizes.</p>"},{"location":"docs/css-helpers/spacing/#examples","title":"Examples","text":"<p>Example of the <code>margin-bottom</code> property applied for all viewport sizes:</p> <pre><code>&lt;div&gt;\n  &lt;div className=\"mb-0\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.mb-0&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n  &lt;div className=\"mb-1\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.mb-1&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n  &lt;div className=\"mb-2\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.mb-2&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n  &lt;div className=\"mb-3\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.mb-3&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n  &lt;div className=\"mb-4\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.mb-4&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n  &lt;div className=\"mb-5\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.mb-5&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n  &lt;div className=\"mb-6\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.mb-6&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n  &lt;div className=\"mb-7\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.mb-7&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre> <p>Example of the <code>padding-left</code> property applied from <code>sm</code> breakpoint up:</p> <pre><code>&lt;div&gt;\n  &lt;div className=\"pl-sm-0\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.pl-sm-0&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n  &lt;div className=\"pl-sm-1\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.pl-sm-1&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n  &lt;div className=\"pl-sm-2\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.pl-sm-2&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n  &lt;div className=\"pl-sm-3\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.pl-sm-3&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n  &lt;div className=\"pl-sm-4\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.pl-sm-4&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n  &lt;div className=\"pl-sm-5\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.pl-sm-5&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n  &lt;div className=\"pl-sm-6\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.pl-sm-6&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n  &lt;div className=\"pl-sm-7\"&gt;\n    &lt;docoff-placeholder bordered&gt;\n      &lt;code&gt;.pl-sm-7&lt;/code&gt;\n    &lt;/docoff-placeholder&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>"},{"location":"docs/css-helpers/typography/","title":"Typography","text":"<p>With the typography helper classes you can set the desired <code>font-size</code> or align text with the <code>text-align</code> property.</p>"},{"location":"docs/css-helpers/typography/#font-size","title":"Font Size","text":"<p>The full scale of font sizes is available through the following helper classes:</p> <pre><code>&lt;h4 className=\"font-size-1\"&gt;Font size 1 (base font size)&lt;/h4&gt;\n&lt;h4 className=\"font-size-2\"&gt;Font size 2&lt;/h4&gt;\n&lt;h4 className=\"font-size-3\"&gt;Font size 3&lt;/h4&gt;\n&lt;h4 className=\"font-size-4\"&gt;Font size 4&lt;/h4&gt;\n&lt;h4 className=\"font-size-5\"&gt;Font size 5&lt;/h4&gt;\n&lt;h4 className=\"font-size-6\"&gt;Font size 6&lt;/h4&gt;</code></pre>"},{"location":"docs/css-helpers/typography/#text-alignment","title":"Text Alignment","text":"<p>\ud83d\udcd0 Try resizing your browser to see how the alignment below changes.</p> <pre><code>&lt;div&gt;\n  &lt;p className=\"text-left\"&gt;\n    &lt;code&gt;.text-left&lt;/code&gt;\n    {' '}\n    Left aligned text on all viewport sizes.\n  &lt;/p&gt;\n  &lt;p className=\"text-center\"&gt;\n    &lt;code&gt;.text-center&lt;/code&gt;\n    {' '}\n    Center aligned text on all viewport sizes.\n  &lt;/p&gt;\n  &lt;p className=\"text-right\"&gt;\n    &lt;code&gt;.text-right&lt;/code&gt;\n    {' '}\n    Right aligned text on all viewport sizes.\n  &lt;/p&gt;\n  &lt;p className=\"text-sm-right\"&gt;\n    &lt;code&gt;.text-sm-right&lt;/code&gt;\n    {' '}\n    Right aligned text on viewports sized &lt;code&gt;sm&lt;/code&gt; (small) or wider.\n  &lt;/p&gt;\n  &lt;p className=\"text-md-right\"&gt;\n    &lt;code&gt;.text-md-right&lt;/code&gt;\n    {' '}\n    Right aligned text on viewports sized &lt;code&gt;md&lt;/code&gt; (medium) or wider.\n  &lt;/p&gt;\n  &lt;p className=\"text-lg-right\"&gt;\n    &lt;code&gt;.text-lg-right&lt;/code&gt;\n    {' '}\n    Right aligned text on viewports sized &lt;code&gt;lg&lt;/code&gt; (large) or wider.\n  &lt;/p&gt;\n  &lt;p className=\"text-xl-right\"&gt;\n    &lt;code&gt;.text-xl-right&lt;/code&gt;\n    {' '}\n    Right aligned text on viewports sized &lt;code&gt;xl&lt;/code&gt; (extra-large) or\n    wider.\n  &lt;/p&gt;\n  &lt;p className=\"text-x2l-right\"&gt;\n    &lt;code&gt;.text-x2l-right&lt;/code&gt;\n    {' '}\n    Right aligned text on viewports sized &lt;code&gt;x2l&lt;/code&gt; (XX-large) or\n    wider.\n  &lt;/p&gt;\n  &lt;p className=\"text-x3l-right\"&gt;\n    &lt;code&gt;.text-x3l-right&lt;/code&gt;\n    {' '}\n    Right aligned text on viewports sized &lt;code&gt;x3l&lt;/code&gt; (XXX-large) or\n    wider.\n  &lt;/p&gt;\n&lt;/div&gt;</code></pre>"},{"location":"docs/customize/font/","title":"Font","text":"<p>React UI uses native font stack for optimum text rendering on every device and OS.</p> <p>This is a good practice because it reduces the size of the data transferred, and it also ensures that the text is displayed in the font that the user is most comfortable with.</p> <p>You can change it to a custom font by loading the font in your project:</p> <pre><code>   &lt;link\n     href=\"https://fonts.googleapis.com/css2?family=Titillium+Web:wght@300;400;700&amp;display=swap\"\n     rel=\"stylesheet\"\n   /&gt;</code></pre> <p>\u2026 and overriding the <code>--rui-font-family-base</code> CSS custom property:</p> <pre><code>:root {\n  --rui-font-family-base: 'Titillium Web', helvetica, roboto, arial, sans-serif;\n}</code></pre>"},{"location":"docs/customize/global-props/","title":"Global Props","text":"<p>Sometimes it can be useful to share some configuration props between multiple instances of components of the same or different kind.</p> <p>This can be achieved by wrapping application or its part with <code>GlobalPropsProvider</code> and passing in the common props through <code>globalProps</code> prop. With or without using <code>GlobalPropsProvider</code> the component can be configured by passing in the props directly. The props passed in directly always take precedence over props coming from <code>GlobalPropsProvider</code>.</p>"},{"location":"docs/customize/global-props/#basic-usage","title":"Basic Usage","text":"<p>To define global props, you need to import <code>GlobalPropsProvider</code> first:</p> <pre><code>import { GlobalPropsProvider } from '@react-ui-org/react-ui';</code></pre> <p>Then wrap application or its part with <code>GlobalPropsProvider</code> with defined <code>globalProps</code> attribute holding an object. Keys are names of the components, and their values are objects with arbitrary props you want to pass to the specified components.</p> <p>Keys conform to actual names of components.</p> <pre><code>&lt;&gt;\n  &lt;Badge label=\"1\" /&gt;\n\n  &lt;GlobalPropsProvider\n    globalProps={{\n      Badge: { priority: 'outline' },\n    }}\n  &gt;\n    &lt;Badge label=\"2\" /&gt;\n    &lt;Badge\n      label=\"3\"\n      priority=\"filled\"\n    /&gt;\n  &lt;/GlobalPropsProvider&gt;\n&lt;/&gt;</code></pre>"},{"location":"docs/customize/global-props/#nesting","title":"Nesting","text":"<p><code>GlobalPropsProvider</code>s can be nested. This is useful e.g. when you want to configure props across whole application and then override some of them in a specific part of the application.</p> <p>When a nested <code>GlobalPropsProvider</code> is used, the props are merged deeply together. This means that you only need to set the value that changes and the rest is inherited. If you need to remove some prop, you can set it to <code>undefined</code>.</p> <pre><code>&lt;GlobalPropsProvider globalProps={{\n  Grid: {\n    columns: {\n      xs: '1fr',\n      md: '1fr 1fr',\n    },\n    justifyItems: 'center',\n    rows: {\n      xs: '50px',\n      md: '100px',\n    },\n  },\n}}&gt;\n  &lt;GlobalPropsProvider globalProps={{\n    Grid: {\n      columns: {\n        sm: '1fr 1fr 1fr',\n      },\n      justifyItems: 'undefined',\n      rows: undefined,\n    },\n  }}&gt;\n    &lt;Grid&gt;\n      &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n      &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n      &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n      &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n      &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n      &lt;docoff-placeholder bordered&gt;Grid item&lt;/docoff-placeholder&gt;\n    &lt;/Grid&gt;\n  &lt;/GlobalPropsProvider&gt;\n&lt;/GlobalPropsProvider&gt;</code></pre>"},{"location":"docs/customize/translations/","title":"Translations","text":"<p>Some components may contain texts which improve components' accessibility. All texts are in English by default and can be translated to other languages.</p> <p>Structure of translations can be found in the file src/translations/en.json.</p> <p>To use custom translations, you need to import <code>TranslationsProvider</code> first:</p> <pre><code>import { TranslationsProvider } from '@react-ui-org/react-ui';</code></pre> <p>Then wrap application (or its part) with <code>TranslationsProvider</code> with the <code>translations</code> prop object.</p> <pre><code>&lt;TranslationsProvider translations={{\n  Alert: { close: 'Close now!' }\n}}&gt;\n  &lt;Alert onClose={() =&gt; alert('You closed me!')}&gt;\n    Hi, I'm a closable Alert.\n  &lt;/Alert&gt;\n&lt;/TranslationsProvider&gt;</code></pre>"},{"location":"docs/customize/translations/#nesting","title":"Nesting","text":"<p>The <code>TranslationsProvider</code>s can be nested. This is useful e.g. when you want to configure translations across whole application and then override some of them in a specific part of the application.</p> <p>When a nested <code>TranslationsProvider</code> is used, the props are merged deeply together. This means that you can extend specific object with new props or override existing ones.</p> <pre><code>&lt;TranslationsProvider translations={{\n  Alert: { close: 'Close now!' }\n}}&gt;\n  &lt;Alert onClose={() =&gt; alert('You closed me!')}&gt;\n    Hi, I'm a closable Alert.\n  &lt;/Alert&gt;\n\n  &lt;TranslationsProvider translations={{\n    Alert: { close: 'Close immediately!' }\n  }}&gt;\n    &lt;Alert onClose={() =&gt; alert('You closed me!')}&gt;\n      Hi, I'm another Alert and I'm also closable.\n    &lt;/Alert&gt;\n  &lt;/TranslationsProvider&gt;\n&lt;/TranslationsProvider&gt;</code></pre>"},{"location":"docs/customize/theming/forms/","title":"Forms Theming","text":"<p>To make forms theming easy and robust, form components have many theming options in common.</p> <p>General naming convention for CSS custom properties looks as follows:</p> <p><code>--rui-FormField--[&lt;TYPE&gt;]--[&lt;MODIFICATION&gt;]__[&lt;ELEMENT&gt;--[&lt;ELEMENT TYPE]]--[&lt;INTERACTION STATE&gt;]__&lt;PROPERTY&gt;</code></p> <p>Items in brackets are optional. As you read on you will notice some theming option groups may have less complicated conventions (that are still subset of the naming system above).</p>"},{"location":"docs/customize/theming/forms/#basic-theming","title":"Basic Theming","text":"<p>The following theme options define basic appearance of all form fields.</p> Custom Property Description <code>--rui-FormField__label__color</code> Label text color <code>--rui-FormField__label__font-size</code> Label font size <code>--rui-FormField__help-text__font-size</code> Help text font size <code>--rui-FormField__help-text__font-style</code> Help text font style, e.g. italic <code>--rui-FormField__help-text__color</code> Help text color"},{"location":"docs/customize/theming/forms/#horizontal-layout","title":"Horizontal Layout","text":"<p>Options for fields that support horizontal layout.</p> Custom Property Description <code>--rui-FormField--horizontal__label__text-align</code> Text alignment of labels in horizontal layout <code>--rui-FormField--horizontal__label__min-width</code> Minimum width of labels in horizontal layout <code>--rui-FormField--horizontal__label__width</code> Default width of labels in horizontal layout <code>--rui-FormField--horizontal__label__padding-y</code> Top and bottom padding to tweak vertical alignment of labels <code>--rui-FormField--horizontal__label__vertical-alignment</code> Vertical box alignment of labels in horizontal layout <code>--rui-FormField--horizontal__field__vertical-alignment</code> Vertical box alignment of fields in horizontal layout <code>--rui-FormField--horizontal--full-width__label__width</code> Default width of labels in full-width horizontal layout"},{"location":"docs/customize/theming/forms/#box-fields","title":"Box Fields","text":"<p>Options shared by box form controls. This includes TextField, TextArea, and SelectField.</p> Custom Property Description <code>--rui-FormField--box__border-width</code> Control border width <code>--rui-FormField--box__border-radius</code> Control corner radius <code>--rui-FormField--box__input__width</code> Default text input and select box width <code>--rui-FormField--box__input__min-width</code> Minimum text input and select box width <code>--rui-FormField--box__placeholder__color</code> Placeholder text color <p>Example:</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n    &lt;React.Fragment&gt;\n      &lt;style type=\"text/css\"&gt;\n        {`\n        .example {\n          margin: 0;\n        }\n\n        .example &gt; * {\n          margin: 4px;\n        }\n\n        .example--themed-form-fields {\n          --rui-FormField--box__border-width: 2px;\n          --rui-FormField--box__border-radius: 0.5rem;\n          --rui-FormField--box__input__width: 300px;\n        }\n      `}\n      &lt;/style&gt;\n      &lt;TextField\n        id=\"default-outline-text-field\"\n        label=\"Default outline text field\"\n      /&gt;\n      &lt;TextField\n        id=\"default-filled-text-field\"\n        label=\"Default filled text field\"\n        variant=\"filled\"\n      /&gt;\n      &lt;SelectField\n        id=\"default-outline-select-field\"\n        label=\"Default outline select field\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      /&gt;\n      &lt;div className=\"example example--themed-form-fields mt-6\"&gt;\n        &lt;TextField\n          id=\"themed-outline-text-field\"\n          label=\"Themed outline text field\"\n        /&gt;\n        &lt;TextField\n          id=\"themed-filled-text-field\"\n          label=\"Themed filled text field\"\n          variant=\"filled\"\n        /&gt;\n        &lt;SelectField\n          id=\"themed-outline-select-field\"\n          label=\"Themed outline select field\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={options}\n          value={fruit}\n        /&gt;\n      &lt;/div&gt;\n    &lt;/React.Fragment&gt;\n  )\n});</code></pre>"},{"location":"docs/customize/theming/forms/#box-field-variants","title":"Box Field Variants","text":"<p>Theming options for box form controls. Naming convention looks as follows:</p> <p><code>--rui-FormField--box--&lt;VISUAL VARIANT&gt;--&lt;INTERACTION STATE&gt;__&lt;PROPERTY&gt;</code></p> <p>Where:</p> <ul> <li><code>&lt;VISUAL VARIANT&gt;</code> is one of <code>filled</code> or <code>outline</code>,</li> <li><code>&lt;INTERACTION STATE&gt;</code> is one of <code>default</code>, <code>hover</code>, <code>focus</code>, or <code>disabled</code>,</li> <li><code>&lt;PROPERTY&gt;</code> is one of <code>color</code>, <code>border-color</code>, <code>background</code>, <code>box-shadow</code>, or   <code>surrounding-text-color</code> (the last one being available only for <code>default</code> and   <code>disabled</code> interaction states).</li> </ul> <p>Example:</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n    &lt;React.Fragment&gt;\n      &lt;style type=\"text/css\"&gt;\n        {`\n        .example {\n          margin: 0;\n        }\n\n        .example &gt; * {\n          margin: 4px;\n        }\n\n        .example--themed-form-field-variants {\n          --rui-FormField--box__border-width: 0px;\n          --rui-FormField--box--outline--default__box-shadow:\n            0.1em 0.1em 0.5em rgba(0, 0, 0, 0.2);\n          --rui-FormField--box--outline--hover__box-shadow:\n            0.1em 0.1em 0.75em rgba(0, 0, 0, 0.3);\n          --rui-FormField--box--outline--focus__box-shadow:\n            inset 0.1em 0.1em 0.25em rgba(0, 0, 0, 0.2);\n        }\n      `}\n      &lt;/style&gt;\n      &lt;TextField\n        id=\"default-outline-text-field\"\n        label=\"Default outline text field\"\n      /&gt;\n      &lt;SelectField\n        id=\"default-outline-select-field\"\n        label=\"Default outline select field\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      /&gt;\n      &lt;div className=\"example example--themed-form-field-variants mt-6\"&gt;\n        &lt;TextField\n          id=\"themed-outline-text-field\"\n          label=\"Themed outline text field\"\n        /&gt;\n        &lt;SelectField\n          id=\"themed-outline-select-field\"\n          label=\"Themed outline select field\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={options}\n          value={fruit}\n        /&gt;\n      &lt;/div&gt;\n    &lt;/React.Fragment&gt;\n  )\n});</code></pre>"},{"location":"docs/customize/theming/forms/#box-field-sizes","title":"Box Field Sizes","text":"<p>Available sizes can be adjusted as follows:</p> <p><code>--rui-FormField--box--&lt;SIZE&gt;__&lt;PROPERTY&gt;</code></p> <p>Where:</p> <ul> <li><code>&lt;SIZE&gt;</code> is one of <code>small</code>, <code>medium</code>, or <code>large</code></li> <li><code>&lt;PROPERTY&gt;</code> is one of <code>height</code>, <code>padding-x</code>, <code>padding-y</code>, or <code>font-size</code></li> </ul> <p>\ud83d\udc49 Box field sizes are linked to Button sizes so they align nicely when placed in row.</p> <p>Example:</p> <pre><code>React.createElement(() =&gt; {\n  const [fruit, setFruit] = React.useState('apple');\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n    &lt;React.Fragment&gt;\n      &lt;style type=\"text/css\"&gt;\n        {`\n        .example {\n          margin: 0;\n        }\n\n        .example &gt; * {\n          margin: 4px;\n        }\n\n        .example--themed-form-field-sizes {\n          --rui-FormField--box--medium__height: 3rem;\n          --rui-FormField--box--medium__padding-x: 1.25rem;\n        }\n      `}\n      &lt;/style&gt;\n      &lt;TextField\n        id=\"default-medium-text-field\"\n        label=\"Default medium text field\"\n      /&gt;\n      &lt;SelectField\n        id=\"default-medium-select-field\"\n        label=\"Default medium select field\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        value={fruit}\n      /&gt;\n      &lt;div className=\"example example--themed-form-field-sizes mt-6\"&gt;\n        &lt;TextField\n          id=\"themed-medium-text-field\"\n          label=\"Themed medium text field\"\n        /&gt;\n        &lt;SelectField\n          id=\"themed-medium-select-field\"\n          label=\"Themed medium select field\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={options}\n          value={fruit}\n        /&gt;\n      &lt;/div&gt;\n    &lt;/React.Fragment&gt;\n  )\n});</code></pre>"},{"location":"docs/customize/theming/forms/#check-fields","title":"Check Fields","text":"<p>Options shared by checkable form controls. This includes CheckboxField, Radio, and Toggle.</p> Custom Property Description <code>--rui-FormField--check__input__size</code> Size of check inputs <code>--rui-FormField--check__input__border-width</code> Border width of check inputs <code>--rui-FormField--check__input--focus__box-shadow</code> Box shadow to highlight focused inputs <code>--rui-FormField--check__tap-target-size</code> Minimum tap target size <p>Interaction states:</p> Custom Property Description <code>--rui-FormField--check--default__border-color</code> Border color of unchecked inputs <code>--rui-FormField--check--default__check-background-color</code> Background color of unchecked inputs <code>--rui-FormField--check--checked__border-color</code> Border color of checked inputs <code>--rui-FormField--check--checked__check-background-color</code> Background color of checked inputs <code>--rui-FormField--check--disabled__border-color</code> Border color of disabled unchecked inputs <code>--rui-FormField--check--disabled__check-background-color</code> Background color of disabled unchecked inputs <code>--rui-FormField--check--checked-disabled__border-color</code> Border color of disabled checked inputs <code>--rui-FormField--check--checked-disabled__check-background-color</code> Background color of disabled checked inputs <p>Example:</p> <pre><code>React.createElement(() =&gt; {\n  const [agree, setAgree] = React.useState(true);\n  const [fruit, setFruit] = React.useState('apple');\n  const [studioQuality, setStudioQuality] = React.useState(true);\n  return (\n    &lt;React.Fragment&gt;\n      &lt;style type=\"text/css\"&gt;\n        {`\n        .example {\n          margin: 0;\n        }\n\n        .example &gt; * {\n          margin: 4px;\n        }\n\n        .example--themed-check-fields {\n          --rui-FormField--check__input__border-width: 2px;\n          --rui-FormField--check--checked__border-color: LightSeaGreen;\n          --rui-FormField--check--checked__check-background-color: MediumAquamarine;\n        }\n        `}\n      &lt;/style&gt;\n      &lt;Radio\n        id=\"default-radio\"\n        label=\"Default radio\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={[\n          {\n            label: 'Apple',\n            value: 'apple',\n          },\n          {\n            label: 'Banana',\n            value: 'banana',\n          },\n          {\n            label: 'Grapefruit',\n            value: 'grapefruit',\n          },\n        ]}\n        value={fruit}\n      /&gt;\n      &lt;CheckboxField\n        checked={agree}\n        id=\"default-checkbox\"\n        label=\"Default checkbox\"\n        onChange={() =&gt; setAgree(!agree)}\n      /&gt;\n      &lt;Toggle\n        checked={studioQuality}\n        id=\"default-toggle\"\n        label=\"Default toggle\"\n        onChange={() =&gt; setStudioQuality(!studioQuality)}\n      /&gt;\n      &lt;div className=\"example example--themed-check-fields mt-6\"&gt;\n        &lt;Radio\n          id=\"themed-radio\"\n          label=\"Themed radio\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={[\n            {\n              label: 'Apple',\n              value: 'apple',\n            },\n            {\n              label: 'Banana',\n              value: 'banana',\n            },\n            {\n              label: 'Grapefruit',\n              value: 'grapefruit',\n            },\n          ]}\n          value={fruit}\n        /&gt;\n        &lt;CheckboxField\n          checked={agree}\n          id=\"themed-checkbox\"\n          label=\"Themed checkbox\"\n          onChange={() =&gt; setAgree(!agree)}\n        /&gt;\n        &lt;Toggle\n          checked={studioQuality}\n          id=\"themed-toggle\"\n          label=\"Themed toggle\"\n          onChange={() =&gt; setStudioQuality(!studioQuality)}\n        /&gt;\n      &lt;/div&gt;\n    &lt;/React.Fragment&gt;\n  )\n});</code></pre>"},{"location":"docs/customize/theming/forms/#validation-states","title":"Validation States","text":"<p>Theming options for validation states are shared by all form components. Naming convention looks as follows:</p> <p><code>--rui-FormField--&lt;VALIDATION STATE&gt;--&lt;INTERACTION STATE&gt;__&lt;PROPERTY&gt;</code></p> <p>Where:</p> <ul> <li><code>&lt;VALIDATION STATE&gt;</code> is one of <code>invalid</code>, <code>valid</code>, or <code>warning</code></li> <li><code>&lt;INTERACTION STATE&gt;</code> is one of <code>default</code>, <code>checked</code>, <code>disabled</code>, or   <code>checked-disabled</code></li> <li><code>&lt;PROPERTY&gt;</code> is one of <code>color</code>, <code>border-color</code>, <code>background</code>,   <code>check-background-color</code>, <code>box-shadow</code>, or <code>surrounding-text-color</code></li> </ul> <p>Not all properties are used by all components, this varies from component to component. Also, <code>hover</code> interaction state is unavailable for validation states everywhere \u2014 <code>default</code> state appearance is retained on hovering. For box fields, <code>focus</code> state for validation states is inherited from default form field appearance (i.e. as if no validation state was set).</p> <p>Example:</p> <pre><code>React.createElement(() =&gt; {\n  const [agree, setAgree] = React.useState(true);\n  const [fruit, setFruit] = React.useState('apple');\n  const [studioQuality, setStudioQuality] = React.useState(true);\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n    &lt;React.Fragment&gt;\n      &lt;style type=\"text/css\"&gt;\n        {`\n        .example {\n          margin: 0;\n        }\n\n        .example &gt; * {\n          margin: 4px;\n        }\n\n        .example--themed-form-field-validation-states {\n          --rui-FormField--valid--default__color: white;\n          --rui-FormField--valid--default__border-color: LightSeaGreen;\n          --rui-FormField--valid--default__background: MediumAquamarine;\n          --rui-FormField--valid--default__check-background-color: MediumAquamarine;\n          --rui-FormField--valid--default__surrounding-text-color: DarkSlateGray;\n          --rui-FormField--valid--checked__check-background-color: MediumAquamarine;\n        }\n    `}\n      &lt;/style&gt;\n      &lt;TextField\n        id=\"default-valid-text-field\"\n        label=\"Default valid text field\"\n        validationState=\"valid\"\n        validationText=\"This field is valid\"\n      /&gt;\n      &lt;SelectField\n        id=\"default-valid-select-field\"\n        label=\"Default valid select field\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={options}\n        validationState=\"valid\"\n        validationText=\"This field is valid\"\n        value={fruit}\n      /&gt;\n      &lt;Radio\n        id=\"default-valid-radio\"\n        label=\"Default valid radio\"\n        onChange={(e) =&gt; setFruit(e.target.value)}\n        options={[\n          {\n            label: 'Apple',\n            value: 'apple',\n          },\n          {\n            label: 'Banana',\n            value: 'banana',\n          },\n          {\n            label: 'Grapefruit',\n            value: 'grapefruit',\n          },\n        ]}\n        validationState=\"valid\"\n        validationText=\"This field is valid\"\n        value={fruit}\n      /&gt;\n      &lt;CheckboxField\n        checked={agree}\n        id=\"default-valid-checkbox\"\n        label=\"Default valid checkbox\"\n        onChange={() =&gt; setAgree(!agree)}\n        validationState=\"valid\"\n        validationText=\"This field is valid\"\n      /&gt;\n      &lt;Toggle\n        checked={studioQuality}\n        id=\"default-valid-toggle\"\n        label=\"Default valid toggle\"\n        onChange={() =&gt; setStudioQuality(!studioQuality)}\n        validationState=\"valid\"\n        validationText=\"This field is valid\"\n      /&gt;\n      &lt;div className=\"example example--themed-form-field-validation-states mt-6\"&gt;\n        &lt;TextField\n          id=\"themed-valid-text-field\"\n          label=\"Themed valid text field\"\n          validationState=\"valid\"\n          validationText=\"This field is valid\"\n        /&gt;\n        &lt;SelectField\n          id=\"themed-valid-select-field\"\n          label=\"Themed valid select field\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={options}\n          validationState=\"valid\"\n          validationText=\"This field is valid\"\n          value={fruit}\n        /&gt;\n        &lt;Radio\n          id=\"themed-valid-radio\"\n          label=\"Themed valid radio\"\n          onChange={(e) =&gt; setFruit(e.target.value)}\n          options={[\n            {\n              label: 'Apple',\n              value: 'apple',\n            },\n            {\n              label: 'Banana',\n              value: 'banana',\n            },\n            {\n              label: 'Grapefruit',\n              value: 'grapefruit',\n            },\n          ]}\n          validationState=\"valid\"\n          validationText=\"This field is valid\"\n          value={fruit}\n        /&gt;\n        &lt;CheckboxField\n          checked={agree}\n          id=\"themed-valid-checkbox\"\n          label=\"Themed valid checkbox\"\n          onChange={() =&gt; setAgree(!agree)}\n          validationState=\"valid\"\n          validationText=\"This field is valid\"\n        /&gt;\n        &lt;Toggle\n          onChange={() =&gt; setStudioQuality(!studioQuality)}\n          checked={studioQuality}\n          id=\"themed-valid-toggle\"\n          label=\"Themed valid toggle\"\n          validationState=\"valid\"\n          validationText=\"This field is valid\"\n        /&gt;\n      &lt;/div&gt;\n    &lt;/React.Fragment&gt;\n  )\n});</code></pre>"},{"location":"docs/customize/theming/forms/#required-state","title":"Required State","text":"<p>Theming options for required fields are shared by all form components.</p> Custom Property Description <code>--rui-FormField--required__label__color</code> Color of required input labels <code>--rui-FormField--required__sign</code> Text appended to required input labels <code>--rui-FormField--required__sign__color</code> Color of text appended to required input labels <p>\ud83d\udc49 Please note that selected components can be rendered as required by setting the <code>renderAsRequired</code> prop to <code>true</code>. This is useful when <code>--rui-FormField--required__label__color</code> is used to indicate the required state of input fields, but you want to bypass it for inputs like feature toggles. This applies to CheckboxField, Radio, SelectField, and Toggle.</p>"},{"location":"docs/customize/theming/forms/#disabled-state","title":"Disabled State","text":"<p>By default, all disabled form fields are semi-transparent and change mouse cursor on hover so users know the fields cannot be used.</p> Custom Property Description <code>--rui-FormField--disabled__cursor</code> Cursor to show on hovering disabled form fields <code>--rui-FormField--disabled__opacity</code> Opacity of disabled form fields (inc. label and help text) <p>Should your design require custom styling of disabled fields, individual field types and validation states can be fine-tuned by several theming options available. All you need is to define all necessary custom properties following the naming conventions documented in previous sections (for simplicity, the properties do not exist in the default theme, we only use transparency to mark disabled fields by default). Namely, you will be interested in <code>disabled</code> and <code>checked-disabled</code> interaction states and properties that are available for styling of these states.</p> <p>Example:</p> <pre><code>React.createElement(() =&gt; {\n  const options = [\n    {\n      label: 'Apple',\n      value: 'apple',\n    },\n    {\n      label: 'Banana',\n      value: 'banana',\n    },\n    {\n      label: 'Grapefruit',\n      value: 'grapefruit',\n    },\n  ];\n  return (\n    &lt;React.Fragment&gt;\n      &lt;style type=\"text/css\"&gt;\n        {`\n        .example {\n          margin: 0;\n        }\n\n        .example &gt; * {\n          margin: 4px;\n        }\n\n        .example--themed-form-field-disabled-state {\n          /*_Common_*/\n          --rui-FormField--disabled__opacity: 1;\n          /*_Check fields_*/\n          --rui-FormField--check--disabled__border-color: silver;\n          --rui-FormField--check--disabled__check-background-color: gainsboro;\n          --rui-FormField--check--disabled__surrounding-text-color: silver;\n          --rui-FormField--check--checked-disabled__border-color: silver;\n          --rui-FormField--check--checked-disabled__check-background-color: gainsboro;\n          /*_Outline box fields_*/\n          --rui-FormField--box--outline--disabled__color: DarkGray;\n          --rui-FormField--box--outline--disabled__border-color: silver;\n          --rui-FormField--box--outline--disabled__background: gainsboro;\n          --rui-FormField--box--outline--disabled__surrounding-text-color: silver;\n          /*_Invalid state_*/\n          --rui-FormField--invalid--disabled__color: DarkGray;\n          --rui-FormField--invalid--disabled__border-color: silver;\n          --rui-FormField--invalid--disabled__background: gainsboro;\n          --rui-FormField--invalid--disabled__check-background-color: gainsboro;\n          --rui-FormField--invalid--disabled__surrounding-text-color: silver;\n          --rui-FormField--invalid--checked-disabled__check-background-color:\n          gainsboro;\n          /*_Warning state_*/\n          --rui-FormField--warning--disabled__color: DarkGray;\n          --rui-FormField--warning--disabled__border-color: silver;\n          --rui-FormField--warning--disabled__background: gainsboro;\n          --rui-FormField--warning--disabled__check-background-color: gainsboro;\n          --rui-FormField--warning--disabled__surrounding-text-color: silver;\n          --rui-FormField--warning--checked-disabled__check-background-color:\n          gainsboro;\n          /*_Valid state_*/\n          --rui-FormField--valid--disabled__color: DarkGray;\n          --rui-FormField--valid--disabled__border-color: silver;\n          --rui-FormField--valid--disabled__background: gainsboro;\n          --rui-FormField--valid--disabled__check-background-color: gainsboro;\n          --rui-FormField--valid--disabled__surrounding-text-color: silver;\n          --rui-FormField--valid--checked-disabled__check-background-color: gainsboro;\n        }\n      `}\n      &lt;/style&gt;\n      &lt;TextField\n        disabled\n        id=\"default-disabled-text-field\"\n        label=\"Default disabled text field\"\n      /&gt;\n      &lt;SelectField\n        disabled\n        id=\"default-disabled-select-field\"\n        label=\"Default disabled select field\"\n        options={options}\n        value=\"apple\"\n      /&gt;\n      &lt;TextField\n        disabled\n        id=\"default-disabled-invalid-text-field\"\n        label=\"Default disabled invalid text field\"\n        validationState=\"invalid\"\n      /&gt;\n      &lt;Radio\n        disabled\n        id=\"default-disabled-radio\"\n        label=\"Default disabled radio\"\n        options={[\n          {\n            label: 'Apple',\n            value: 'apple',\n          },\n          {\n            label: 'Banana',\n            value: 'banana',\n          },\n          {\n            label: 'Grapefruit',\n            value: 'grapefruit',\n          },\n        ]}\n        value=\"apple\"\n      /&gt;\n      &lt;CheckboxField\n        checked\n        disabled\n        id=\"default-disabled-checkbox\"\n        label=\"Default disabled checkbox\"\n      /&gt;\n      &lt;Toggle\n        checked\n        disabled\n        id=\"default-disabled-toggle\"\n        label=\"Default disabled toggle\"\n      /&gt;\n      &lt;CheckboxField\n        disabled\n        id=\"default-disabled-warning-checkbox\"\n        label=\"Default disabled warning checkbox\"\n        validationState=\"warning\"\n      /&gt;\n      &lt;Toggle\n        checked\n        disabled\n        id=\"default-disabled-valid-toggle\"\n        label=\"Default disabled valid toggle\"\n        validationState=\"valid\"\n      /&gt;\n      &lt;div className=\"example example--themed-form-field-disabled-state mt-6\"&gt;\n        &lt;TextField\n          disabled\n          id=\"themed-disabled-text-field\"\n          label=\"Themed disabled text field\"\n        /&gt;\n        &lt;SelectField\n          disabled\n          id=\"themed-disabled-select-field\"\n          label=\"Themed disabled select field\"\n          options={options}\n          value=\"apple\"\n        /&gt;\n        &lt;TextField\n          disabled\n          id=\"themed-disabled-invalid-text-field\"\n          label=\"Themed disabled invalid text field\"\n          validationState=\"invalid\"\n        /&gt;\n        &lt;Radio\n          disabled\n          id=\"themed-disabled-radio\"\n          label=\"Themed disabled radio\"\n          options={[\n            {\n              label: 'Apple',\n              value: 'apple',\n            },\n            {\n              label: 'Banana',\n              value: 'banana',\n            },\n            {\n              label: 'Grapefruit',\n              value: 'grapefruit',\n            },\n          ]}\n          value=\"apple\"\n        /&gt;\n        &lt;CheckboxField\n          checked\n          disabled\n          id=\"themed-disabled-checkbox\"\n          label=\"Themed disabled checkbox\"\n        /&gt;\n        &lt;Toggle\n          checked\n          disabled\n          id=\"themed-disabled-toggle\"\n          label=\"Themed disabled toggle\"\n        /&gt;\n        &lt;CheckboxField\n          disabled\n          id=\"themed-disabled-warning-checkbox\"\n          label=\"Themed disabled warning checkbox\"\n          validationState=\"warning\"\n        /&gt;\n        &lt;Toggle\n          checked\n          disabled\n          id=\"themed-disabled-valid-toggle\"\n          label=\"Themed disabled valid toggle\"\n          validationState=\"valid\"\n        /&gt;\n      &lt;/div&gt;\n    &lt;/React.Fragment&gt;\n  )\n});</code></pre>"},{"location":"docs/customize/theming/overview/","title":"Theming","text":"<p>From the very beginning, React UI has been designed with a great emphasis on customizability. We decided to leverage CSS custom properties for this feature for two main reasons:</p> <ol> <li> <p>We take advantage of the possibilities of native CSS. Preprocessors are    still a thing, but it's not necessary to go as far as for CSS-in-JS to make    a UI customizable, not even speaking of performance.</p> </li> <li> <p>Thanks to JavaScript API, CSS custom properties are both readable and    writable by JS.</p> </li> </ol>"},{"location":"docs/customize/theming/overview/#theming-options","title":"Theming Options","text":"<p>Design tokens define common visual properties like colors, fonts, borders, shadows, or spacing. CSS custom properties are the technical representation of the design tokens in React UI.</p> <p>All CSS custom properties in React UI come prefixed with <code>rui</code> so they don't get in the way of other custom properties in your project.</p> <p>You can adjust any of the properties in your styles. See the default theme for the full list of available design tokens.</p>"},{"location":"docs/customize/theming/overview/#global-and-semantic-design-tokens","title":"Global and Semantic Design Tokens","text":"<p>Global and semantic token names are not complex or long. That is why they are simply lowercase and hyphenated.</p> <p>The names are written in the following format:</p> <p><code>--rui-&lt;type&gt;-[&lt;group&gt;]-&lt;name&gt;-[&lt;state&gt;]</code></p> <p>Where:</p> <ul> <li><code>&lt;type&gt;</code> is one of: <code>color</code>, <code>dimension</code>, <code>font-family</code>, <code>font-weight</code>,   <code>shadow</code>, as suggested by the Design Tokens Format proposal. However,   additional custom types like <code>font-size</code>, <code>line-height</code>, or <code>text-decoration</code>   have been added as they proved necessary.</li> <li><code>&lt;group&gt;</code> optionally groups multiple related values, e.g. <code>text</code>,   <code>background</code>, <code>action</code>, etc.</li> <li><code>&lt;name&gt;</code> is the name of the token, e.g. <code>primary</code>, <code>base</code>, or <code>light</code>. Scales   can be presented as numbered sequences, e.g. <code>space-[0-7]</code>, <code>size-[1-6]</code>, etc.</li> <li><code>&lt;state&gt;</code> describes additional interaction variants of the token: <code>hover</code>,   <code>focus</code>, <code>active</code>, or <code>disabled</code>.</li> </ul> <p>Example global and semantic design tokens represented by CSS custom properties:</p> <pre><code>:root {\n  --rui-color-text-primary: #000;\n  --rui-dimension-space-3: 0.75rem;\n  --rui-font-family-base: \"Titillium Web\", helvetica, roboto, arial, sans-serif;\n}</code></pre> <p>\ufe0f\ud83d\udc49 Please note that breakpoint values are read-only (e.g. for JavaScript) since CSS custom properties cannot be used within media queries (because a media query is not a CSS property).</p>"},{"location":"docs/customize/theming/overview/#component-tokens","title":"Component Tokens","text":"<p>It is also possible to adjust some properties on individual components level, preferably by reusing (inheriting) the semantic design tokens.</p> <p>Due to higher complexity, component tokens use a naming convention that many web developers will find familiar because it works like BEM (with prefixes and component name syntax taken from SUIT CSS, to be precise):</p> <p><code>--rui-&lt;ComponentName&gt;--[&lt;modification(s)&gt;]__[&lt;element&gt;]--[&lt;modification(s)&gt;]__&lt;property&gt;--[&lt;modification&gt;]</code></p> <p>Where:</p> <ul> <li><code>&lt;ComponentName&gt;</code> stands for the actual component name (e.g. <code>Button</code>,   <code>FormField</code>, etc.) with a reasonable exception to form fields whose settings   are widely shared and therefore grouped as <code>FormField</code> options.</li> <li><code>&lt;modifications(s)&gt;</code> can be one or more modifiers, typically a variant (e.g.   <code>primary</code>, <code>filled</code>, <code>box</code>) or interaction state (<code>default</code>, <code>hover</code>,   <code>focus</code>, <code>active</code>, <code>disabled</code>).</li> <li><code>&lt;element&gt;</code> stands for a nested element of the component.</li> <li><code>&lt;property&gt;</code> is usually a CSS property (e.g. <code>color</code>, <code>background</code>,   <code>background-color</code>, <code>width</code>, <code>box-shadow</code>), or a brief property description   where a CSS property wouldn't tell enough (e.g. <code>initial-offset</code>,   <code>check-background-color</code>, <code>tap-target-size</code>).</li> </ul> <p>Example component tokens:</p> <pre><code>:root {\n  --rui-Button--filled--primary--default__color: var(--rui-color-action-on-primary);\n  --rui-Button--filled--primary--default__border-color: var(--rui-color-action-primary);\n  --rui-Button--filled--primary--default__background: var(--rui-color-action-primary);\n  --rui-Button--filled--primary--default__box-shadow: none;\n  --rui-Button--filled--primary--hover__color: var(--rui-color-action-on-primary);\n  --rui-Button--filled--primary--hover__border-color: var(--rui-color-action-primary-hover);\n  --rui-Button--filled--primary--hover__background: var(--rui-color-action-primary-hover);\n  --rui-Button--filled--primary--hover__box-shadow: none;\n}</code></pre>"},{"location":"docs/customize/theming/overview/#best-practices","title":"Best Practices","text":"<ol> <li> <p>It's a good idea to start with changing the global tokens first. Adjust    any context-agnostic values to see how the system reacts and scales.</p> </li> <li> <p>Widely reused context-aware settings such as semantic colors, typography, or    borders define the character of your design system which is stored in the    semantic tokens layer.</p> </li> <li> <p>Having finished the customization at the global and semantic level, you can    then proceed to customize the appearance of individual components \u2014 if    necessary at all.</p> </li> </ol> <p>Even then you should also reuse existing semantic design tokens as much as    possible to ensure that your UI is consistent and works as a system.</p> <p>For the same reason, if you have any custom components in your UI, you should    reuse the semantic design tokens in your own CSS too.</p>"},{"location":"docs/customize/theming/overview/#css-or-sass","title":"CSS, or Sass?","text":"<p>Colors, breakpoints, and SVG definitions used in <code>theme.scss</code> are preprocessed with Sass first. This enables us to:</p> <ul> <li>generate our internal color palette programmatically,</li> <li>keep actual breakpoint values in a single place in the code,</li> <li>keep <code>theme.scss</code> uncluttered by inline SVG.</li> </ul> <p>It's entirely up to you what format you decide to use for storing the theme. Both <code>theme.scss</code> and <code>theme.css</code> will work equally well. It only matters if the custom properties make it from the theme file to the browser.</p> <p>\ud83d\udc49 Just remember everything in the theme constants directory is intended only for usage within <code>theme.scss</code>. Otherwise, the theming system may not work as expected. We recommend calling custom properties from <code>theme.scss</code> either directly in your stylesheet, or through an intermediate, shareable layer like <code>MyComponent/_theme.scss</code> or <code>styles/shared-by-components/_my-sass-variables-referring-to-theme.scss</code> (the latter of which is the approach we use).</p>"},{"location":"docs/foundation/accessibility/","title":"Accessibility","text":"<p>React UI bakes accessibility principles right into its core.</p> <p>\ud83d\udc49 You can adjust all custom properties on this page (and more) in your theme by overriding values in the design tokens section.</p>"},{"location":"docs/foundation/accessibility/#touch-friendliness","title":"Touch Friendliness","text":"<p>The active area of interactive elements should be properly sized so that the elements can be easily targeted on touch screens. Recommended dimensions may vary from platform to platform, however a commonly used size is 7\u201310 mm.</p> <p>Default tap target size in React UI is used by all potentially small interactive components like Alert close button, CheckboxField, or Toggle. Tap target size can be adjusted via the <code>--rui-dimension-tap-target-size</code> custom property (see Theming to learn how).</p> <p>\ud83d\udcd6 Read more about touch targets at Norman Nielsen Group.</p>"},{"location":"docs/foundation/accessibility/#form-fields-and-reserved-space","title":"Form Fields and Reserved Space","text":"<p>Note that form fields with potentially small inputs (like CheckboxField or Toggle) reserve vertical space corresponding to the minimum tap target size. In other words, form fields box model is taller. The reason behind this behaviour is that in many cases the minimum tap target size could overflow its component's box model and tap targets of neighboring components could collide. The extra added space prevents this.</p> <p>However, if placed inside FormLayout, form fields do not add any extra vertical space because it is already provided by <code>FormLayout</code> row gap. Remember to check that form fields in your <code>FormLayout</code> are properly spaced and interactive elements do not collide should you decide to make any changes to <code>--rui-dimension-tap-target-size</code>, <code>--rui-FormField--check__tap-target-size</code> or <code>--rui-FormLayout__row-gap</code> options.</p> <p>Horizontal padding is never added to form fields box model so it does not make their horizontal alignment complicated.</p>"},{"location":"docs/foundation/accessibility/#keyboard-friendliness","title":"Keyboard Friendliness","text":"<p>Many people use keyboard to control their computer. Interactive elements in React UI are highlighted on focus so keyboard users can easily tab over them and see what control currently has focus.</p> <p>All interactive elements obtain a blue outline on focus. Appearance of the focus highlight can be adjusted with the following custom properties:</p> <ul> <li><code>--rui-border-focus-ring</code>,</li> <li><code>--rui-dimension-focus-ring-offset</code>,</li> <li><code>--rui-shadow-focus-ring</code> (set to <code>initial</code> to keep the original box shadow   if there is one).</li> </ul> <p>\ud83d\udcd6 Read more about keyboard accessibility at MDN.</p>"},{"location":"docs/foundation/borders/","title":"Borders","text":"<p>Borders separate the content from the outer context.</p> <p>\ud83d\udc49 All values on this page can be changed by overriding values in your design tokens.</p> <p>Available border widths (the list may grow in the future):</p> Border width Value Usage in CSS Purpose 1 1 px <code>--rui-dimension-border-width-1</code> Base border width <p>Available border styles:</p> Border style Usage in CSS Purpose focus ring <code>--rui-border-focus-ring</code> Focus ring style <p>\ud83d\udc49 Check Colors for available border colors.</p> <p>\ud83d\udc49 Check Accessibility for all focus ring options.</p>"},{"location":"docs/foundation/breakpoints/","title":"Breakpoints","text":"<p>There are 7 CSS breakpoints to provide you maximum control over the responsive behavior of the layout of your app.</p> <p>These breakpoint values are used throughout React UI, in components, or in helper classes. You can reuse them in your own CSS and components to create a seamless experience for your users.</p> Name Value in em Value in px* Usage in CSS** Usage in SCSS xs 0 em 0 px <code>--rui-dimension-breakpoint-xs</code> <code>@include breakpoint.up(xs)</code> sm 36 em 576 px <code>--rui-dimension-breakpoint-sm</code> <code>@include breakpoint.up(sm)</code> md 48 em 768 px <code>--rui-dimension-breakpoint-md</code> <code>@include breakpoint.up(md)</code> lg 66 em 1056 px <code>--rui-dimension-breakpoint-lg</code> <code>@include breakpoint.up(lg)</code> xl 84 em 1344 px <code>--rui-dimension-breakpoint-xl</code> <code>@include breakpoint.up(xl)</code> x2l 90 em 1440 px <code>--rui-dimension-breakpoint-x2l</code> <code>@include breakpoint.up(x2l)</code> x3l 120 em 1920 px <code>--rui-dimension-breakpoint-x3l</code> <code>@include breakpoint.up(x3l)</code> <p>* Supposed the root font size is 16 px.</p> <p>* \u26a0\ufe0f Consider CSS breakpoints as read-only:* because CSS custom properties cannot be used inside media queries (media query is not a CSS property), changing their values will have no effect. If you need to adjust the breakpoint values, you must override the <code>$values</code> SCSS map defined in <code>styles/settings/_breakpoints.scss</code>.</p>"},{"location":"docs/foundation/collections/","title":"Collections","text":"<p>Collections are lists of available values that can be used to customize the appearance of components, such as colors, sizes, and placement. Collections are used to ensure consistency across the design system.</p>"},{"location":"docs/foundation/collections/#general-guidelines","title":"General Guidelines","text":"<ul> <li>Components can support one or more collections from a collection category.   Refer to the documentation for each component to see which collections are   available.</li> <li>If an option from a collection is used in a component, all other options from   the same collection must be available for use in that component too.</li> </ul>"},{"location":"docs/foundation/collections/#colors","title":"Colors","text":"<p>The following color names are designed for use in components that support the <code>color</code> prop:</p> Collection Available values Description Action <code>primary</code>, <code>secondary</code>, <code>selected</code> Reserved for actionable elements, such as buttons and navigation links Feedback <code>success</code>, <code>warning</code>, <code>danger</code>, <code>info</code>, <code>help</code>, <code>note</code> For components with feedback state, such as alerts and buttons Neutral <code>light</code>, <code>dark</code> For components that require a neutral background color, such as badges and buttons"},{"location":"docs/foundation/colors/","title":"Colors","text":"<p>Colors help you communicate the structure of your UI, emphasize any important information, or signal different states of the UI. Use colors intentionally \u2014 they are not decoration and should always serve a purpose.</p> <p>\ud83d\udc49 All colors on this page can be changed by overriding values in your design tokens.</p>"},{"location":"docs/foundation/colors/#general-guidelines","title":"General Guidelines","text":"<ul> <li>Most colors in React UI are semantic: they bear a meaning and target a   specific use case. The only non-semantic exception is the   neutral colors that are included in React UI due to their   frequent usage in UI designs.</li> <li>React UI does not try to suggest any global color palettes. Instead, you   are encouraged to pick any color palettes you want and map them onto the   semantic colors of React UI.</li> <li>In general, colors in React UI can be used for either static   (most of the text colors and most of the   background colors) or interactive use cases   (action colors, feedback colors).   However, some colors are designed to be either:   neutral colors can be used for static and interactive parts   similarly to the primary border color.</li> <li>Interactive color variants always define hover and active (pressed)   states.</li> <li>Action, feedback, and neutral colors suggest what color should be used for   the text placed on them. You don't have to think if black or white makes a   better contrast \u2014 just use <code>on-primary</code> for text on primary color background   or <code>on-success</code> for success color background, and you should be safe.</li> </ul>"},{"location":"docs/foundation/colors/#text-colors","title":"Text Colors","text":"<p>Colors reserved for text. Base text can have primary or secondary priority, while both priorities can be suppressed with the <code>disabled</code> variants. Last but not least, the text colors define the color of links.</p>"},{"location":"docs/foundation/colors/#action-colors","title":"Action Colors","text":"<p>Action colors communicate the importance of an action which can be primary or secondary. Using the selected color, you can also mark an action as the currently selected.</p>"},{"location":"docs/foundation/colors/#feedback-colors","title":"Feedback Colors","text":"<p>Feedback colors help communicate a meaning: green means success, orange means warning, and red means danger or error. On top of that, there are a few more feedback colors to fit various design situations.</p>"},{"location":"docs/foundation/colors/#neutral-colors","title":"Neutral Colors","text":"<p>Neutral colors are intended for neutral variants of components that support colors. The light color works well with dark backgrounds. Conversely, the dark color stands out on light backgrounds.</p>"},{"location":"docs/foundation/colors/#background-colors","title":"Background Colors","text":"<p>Colors reserved for backgrounds.</p>"},{"location":"docs/foundation/colors/#content-layers","title":"Content Layers","text":"<p>Backgrounds for the fundamental UI areas and content layering.</p> <p>\ud83d\udc49 Content layers can be separated from background using their shadow counterparts: <code>background-layer-1</code> + <code>shadow-layer-1</code> etc.</p>"},{"location":"docs/foundation/colors/#component-backgrounds","title":"Component Backgrounds","text":"<p>Basic backgrounds for components.</p> <p>\ud83d\udca1 What is the difference between <code>background-base</code> and <code>background-basic</code>? While the base background is intended for the bottom-most layer of your UI, the basic background is the default go-to background for components.</p>"},{"location":"docs/foundation/colors/#interactive-areas","title":"Interactive Areas","text":"<p>Backgrounds to highlight interactive areas on hover and during interaction.</p> <p>\ud83d\udca1 Please note the default interactive background is always transparent, so it does not stand in the way of the underlying component background.</p>"},{"location":"docs/foundation/colors/#action-backgrounds","title":"Action Backgrounds","text":"<p>Backgrounds for areas with actionable content.</p>"},{"location":"docs/foundation/colors/#feedback-backgrounds","title":"Feedback Backgrounds","text":"<p>Backgrounds for feedback areas.</p>"},{"location":"docs/foundation/colors/#neutral-backgrounds","title":"Neutral Backgrounds","text":"<p>Neutral backgrounds to help you structure your content.</p>"},{"location":"docs/foundation/colors/#border-colors","title":"Border Colors","text":"<p>Colors reserved for borders. With borders, you can separate content areas, components, or their parts. For interactive context, you should always use the primary border.</p>"},{"location":"docs/foundation/colors/#applying-colors","title":"Applying Colors","text":"<p>Components can apply colors above using one or more following approaches.</p>"},{"location":"docs/foundation/colors/#color-collections","title":"Color Collections","text":"<p>Some components (Alert, Badge, Button, and more) come in more color variants to help you better reflect their place in content hierarchy or the meaning of their content. In such cases, one or more Color Collections are always used. There is always a reasonable default color for the component in question that can be changed to any of supported collection values through the <code>color</code> prop.</p>"},{"location":"docs/foundation/colors/#validation-states","title":"Validation States","text":"<p>All form field components that support validation states (CheckboxField, TextField, Toggle and more) apply selected feedback colors for individual states:</p> <ul> <li><code>success</code> feedback color for valid state,</li> <li><code>warning</code> feedback color for warning state,</li> <li><code>danger</code> feedback color for invalid state.</li> </ul> <p>Validation state is always optional. Default styling is applied for the given component when its <code>validationState</code> prop is not specified.</p>"},{"location":"docs/foundation/design-tokens/","title":"Design Tokens","text":"<p>Design tokens are a methodology for expressing design decisions in a platform-agnostic way so that they can be shared across different disciplines, tools, and technologies. They help establish a common vocabulary across organizations.</p> <p>\ud83d\udc49 Design tokens are your starting point for customization of React UI to make it fit your design system needs. React UI uses CSS custom properties as a primary storage format for design tokens.</p>"},{"location":"docs/foundation/design-tokens/#global-tokens","title":"Global Tokens","text":"<p>Global tokens represent the basic, context-agnostic values in your design language. They define color palettes, typography scales, or spacing values, without binding them to any semantic meaning.</p> <pre><code>:root {\n  --pantone-3145c: #00778b;\n}</code></pre>"},{"location":"docs/foundation/design-tokens/#semantic-tokens","title":"Semantic Tokens","text":"<p>Semantic tokens define roles and decisions that give the design system its character. They communicate the intended purpose of a global token and are often reused by component tokens.</p> <pre><code>:root {\n  --rui-color-action-primary: var(--pantone-3145c);\n}</code></pre>"},{"location":"docs/foundation/design-tokens/#component-tokens","title":"Component Tokens","text":"<p>Component tokens represent the values associated with a component. They often inherit from semantic tokens, but are named in a way that narrows down their reusability to the context of the specific component.</p> <pre><code>:root {\n  --rui-Button--filled--primary--default__background: var(--rui-color-action-primary);\n}</code></pre>"},{"location":"docs/foundation/icons/","title":"Icons","text":"<p>React UI does not include any icons to allow more flexibility and to reduce its size. Components that require icons allow them to be passed in via props.</p> <p>Example:</p> <pre><code>import { Alert } from '@react-ui-org/react-ui';\nimport { Icon } from './my-icon-component';\n\n&lt;Alert\n  icon={&lt;Icon icon=\"ok-sign\" /&gt;}\n  color=\"success\"\n&gt;\n  This is a success!\n&lt;/Alert&gt;</code></pre>"},{"location":"docs/foundation/shadows/","title":"Shadows","text":"<p>Use shadows to add depth to your components and to better separate them from background.</p> <p>\ud83d\udc49 All values on this page can be changed by overriding values in your design tokens.</p> Shadow Usage in CSS Purpose layer 1 <code>--rui-shadow-layer-1</code> Elevation, level 1 layer 2 <code>--rui-shadow-layer-2</code> Elevation, level 2 focus ring <code>--rui-shadow-focus-ring</code> Focus ring to be used instead of outline <p>\ud83d\udc49 Check how the layer shadows pair nicely with their background color counterparts.</p> <p>\ud83d\udc49 Check Accessibility for all focus ring options.</p>"},{"location":"docs/foundation/spacing/","title":"Spacing","text":"<p>With only few reasonable exceptions, all margins and paddings in React UI use predefined spacing values. Using only the values from the spacing scale will help you keep your UI consistent.</p> <p>\ud83d\udc49 You can adjust all custom properties on this page (and more) in your theme by overriding values in the design tokens section.</p> Space Value Usage in CSS Usage in SCSS Usage in HTML/JSX* 0 0 <code>--rui-dimension-space-0</code> <code>spacing.of(0)</code> <code>class=\"mt-0\"</code> 1 0.25 rem <code>--rui-dimension-space-1</code> <code>spacing.of(1)</code> <code>class=\"mt-1\"</code> 2 0.5 rem <code>--rui-dimension-space-2</code> <code>spacing.of(2)</code> <code>class=\"mt-2</code> 3 0.75 rem <code>--rui-dimension-space-3</code> <code>spacing.of(3)</code> <code>class=\"mt-3</code> 4 1 rem <code>--rui-dimension-space-4</code> <code>spacing.of(4)</code> <code>class=\"mt-4\"</code> 5 1.5 rem <code>--rui-dimension-space-5</code> <code>spacing.of(5)</code> <code>class=\"mt-5</code> 6 2 rem <code>--rui-dimension-space-6</code> <code>spacing.of(6)</code> <code>class=\"mt-6</code> 7 2.5 rem <code>--rui-dimension-space-7</code> <code>spacing.of(7)</code> <code>class=\"mt-7\"</code> <p>* For the sake of brevity, usage in HTML only illustrates the top margin property. See Spacing helpers for the full list of options.</p>"},{"location":"docs/foundation/spacing/#shared-spacings","title":"Shared Spacings","text":"<p>Commonly reused spacings. Bottom spacing is applied unless the element in question is a last child of its parent.</p> Category Usage in CSS Usage in SCSS Space Shared by base <code>--rui-dimension-space-bottom-base</code> <code>spacing.bottom()</code> 5 Paragraphs, lists etc. headings <code>--rui-dimension-space-bottom-headings</code> <code>spacing.bottom(headings)</code> 5 Heading elements layouts <code>--rui-dimension-space-bottom-layouts</code> <code>spacing.bottom(layouts)</code> 5 Layout components"},{"location":"docs/foundation/spacing/#note-on-live-playgrounds","title":"Note on Live Playgrounds","text":"<p>For demonstration purposes, all elements that are direct descendants of live playgrounds in these docs are given a standard margin on all sides which suppresses default spacing behavior described above:</p> <pre><code>&lt;p&gt;This paragraph will have standard playground margin an all sides.&lt;/p&gt;\n&lt;p&gt;This paragraph will have it too.&lt;/p&gt;</code></pre> <p>Once wrapped in a <code>div</code>, all elements and components remain unaffected and have exactly the same margins as they would have in a real-world React UI project:</p> <pre><code>&lt;div&gt;\n    &lt;p&gt;\n        This paragraph will have bottom margin of\n        &lt;code&gt;--rui-dimension-space-bottom-base&lt;/code&gt;.\n    &lt;/p&gt;\n    &lt;p&gt;\n        This paragraph is a last child of its parent and thus will have no bottom\n        margin.\n    &lt;/p&gt;\n&lt;/div&gt;</code></pre>"},{"location":"docs/foundation/typography/","title":"Typography","text":"<p>Typography is the basic means to present information to users. It also serves to communicate the hierarchy of a page.</p> <p>\ud83d\udc49 All values on this page can be changed by overriding values in your design tokens.</p>"},{"location":"docs/foundation/typography/#showcase","title":"Showcase","text":"<p>Font sizes:</p> <pre><code>&lt;p className=\"font-size-1\"&gt;Font size 1 (base font size)&lt;/p&gt;\n&lt;p className=\"font-size-2\"&gt;Font size 2&lt;/p&gt;\n&lt;p className=\"font-size-3\"&gt;Font size 3&lt;/p&gt;\n&lt;p className=\"font-size-4\"&gt;Font size 4&lt;/p&gt;\n&lt;p className=\"font-size-5\"&gt;Font size 5&lt;/p&gt;\n&lt;p className=\"font-size-6\"&gt;Font size 6&lt;/p&gt;</code></pre> <p>Styling of basic HTML elements:</p> <pre><code>&lt;p&gt;\n  Curabitur sagittis hendrerit ante. Integer pellentesque quam vel velit. Sed\n  vel lectus. Donec odio tempus molestie, porttitor ut, iaculis quis, sem.\n  Pellentesque sapien. Ut enim ad minima veniam, quis nostrum exercitationem\n  ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi\n  consequatur?\n&lt;/p&gt;\n&lt;p&gt;\n  &lt;strong&gt;Bold text&lt;/strong&gt;\n&lt;/p&gt;\n&lt;p&gt;\n  &lt;em&gt;Emphasized text&lt;/em&gt;\n&lt;/p&gt;\n&lt;p&gt;\n  &lt;small&gt;Small text&lt;/small&gt;\n&lt;/p&gt;\n&lt;p&gt;\n  &lt;code&gt;Inline code&lt;/code&gt;\n&lt;/p&gt;\n&lt;p&gt;\n  &lt;a href=\"/\"&gt;Link&lt;/a&gt;\n&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;Unordered list item 1&lt;/li&gt;\n  &lt;li&gt;Unordered list item 2&lt;/li&gt;\n  &lt;li&gt;Unordered list item 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ol&gt;\n  &lt;li&gt;Ordered list item 1&lt;/li&gt;\n  &lt;li&gt;Ordered list item 2&lt;/li&gt;\n  &lt;li&gt;Ordered list item 3&lt;/li&gt;\n&lt;/ol&gt;</code></pre>"},{"location":"docs/foundation/typography/#font","title":"Font","text":"<p>React UI uses native font stack for optimum text rendering on every device and OS.</p> <p>\ud83d\udc49 You can replace the native font stack with a custom font.</p>"},{"location":"docs/foundation/typography/#customization","title":"Customization","text":"<p>Font size, font weight, and line height values can be customised as well:</p> <pre><code>:root {\n  /* Font sizes */\n  --rui-font-size-base: 100%;\n  --rui-font-size-small: 0.889rem;\n  --rui-font-size-smaller: 0.75rem;\n  --rui-font-size-code: 85%;\n\n  --rui-font-size-1: 1rem;\n  --rui-font-size-2: 1.125rem;\n  --rui-font-size-3: 1.266rem;\n  --rui-font-size-4: 1.424rem;\n  --rui-font-size-5: 1.602rem;\n  --rui-font-size-6: 1.802rem;\n\n  /* Line heights */\n  --rui-line-height-base: 1.5;\n  --rui-line-height-small: 1.25;\n\n  /* Font weights */\n  --rui-font-weight-base: 400;\n  --rui-font-weight-light: 300;\n  --rui-font-weight-bold: 700;\n}</code></pre>"},{"location":"docs/getting-started/browsers-and-devices/","title":"Browsers &amp; Devices","text":"<p>React UI supports the latest, stable releases of major browsers and platforms.</p> <p>Alternative browsers which use the latest version of WebKit, Blink, or Gecko, whether directly or via the platform's web view API, are not explicitly supported. However, React UI should (in most cases) display and function correctly in these browsers as well.</p> <p>We use Autoprefixer and Babel to handle intended browser support, which use Browserslist to manage these browser versions. See the source of our <code>.browserslistrc</code> config to learn how.</p>"},{"location":"docs/getting-started/browsers-and-devices/#mobile-devices","title":"Mobile Devices","text":"Chrome Firefox Safari Android \u2705 \u2705 \u2014 iOS \u2705 \u2705 \u2705"},{"location":"docs/getting-started/browsers-and-devices/#desktop-browsers","title":"Desktop Browsers","text":"Chrome Firefox Safari Microsoft Edge Windows \u2705 \u2705 \u2014 \u2705 macOS \u2705 \u2705 \u2705 \u2705 Linux \u2705 \u2705 \u2014 \u2014 <p>To be explicit: Internet Explorer is not supported.</p>"},{"location":"docs/getting-started/installation/","title":"Installation","text":"<p>React UI is distributed as a npm package. To add it to your project, run:</p> <pre><code>npm install --save @react-ui-org/react-ui</code></pre> <p>Please note that <code>prop-types</code>, <code>react</code> and <code>react-dom</code> are peer dependencies.</p>"},{"location":"docs/getting-started/usage/","title":"Usage","text":""},{"location":"docs/getting-started/usage/#responsive-meta-tag","title":"Responsive Meta Tag","text":"<p>React UI is designed and developed mobile-first, a strategy in which we first write code for mobile devices, and then scale up components as necessary using CSS media queries. To ensure proper rendering and touch zooming for all devices, add the responsive viewport meta tag to your <code>&lt;head&gt;</code> element:</p> <pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;</code></pre>"},{"location":"docs/getting-started/usage/#css","title":"CSS","text":"<p>React UI styles are written in Sass and compiled to CSS. You can import them in a ready-to-use CSS bundle like this:</p> <pre><code>import '@react-ui-org/react-ui/dist/react-ui.css';</code></pre> <p>Under the hood, there are several CSS layers:</p> <ol> <li>Layers definition: establish CSS cascade layers.</li> <li>Theme: a collection of hundreds of design tokens that define the look    and feel of your app. See Theming for more.</li> <li>Foundation: mandatory ground-zero CSS for React UI components. Includes    global resets and fixes rendering inconsistencies across browsers with    <code>normalize.css</code>. (Not to be confused with the Foundation CSS framework!)</li> <li>Components: React UI components' styles. Components utilize CSS modules    to avoid class name conflicts and to keep the class names scoped.</li> <li>CSS helpers: tiny CSS classes (helpers and utilities) that can handle    details like typography, spacing, colors, etc. Class name notation is    inspired by Bootstrap utilities, so if you are    familiar with Bootstrap, you will feel at home here.</li> </ol>"},{"location":"docs/getting-started/usage/#sass","title":"Sass","text":"<p>\ud83d\udc49 As of now, we don't provide a way to import the Sass files directly.</p>"},{"location":"docs/getting-started/usage/#components","title":"Components","text":"<p>Import and use any of React UI components in your app:</p> <pre><code>import { Button } from '@react-ui-org/react-ui';\n\n&lt;Button label=\"My Button\" /&gt;</code></pre>"},{"location":"docs/getting-started/usage/#controlled-vs-uncontrolled","title":"Controlled vs. Uncontrolled","text":"<p>While you may find out some components are working for you as uncontrolled, we currently support only controlled components.</p>"},{"location":"docs/getting-started/usage/#full-example","title":"Full Example","text":"<p>Example HTML:</p> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n    &lt;title&gt;React UI Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"app\"&gt;&lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre> <p>Example JSX:</p> <pre><code>import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button } from '@react-ui-org/react-ui';\nimport '@react-ui-org/react-ui/dist/react-ui.css';\n\nconst App = () =&gt; (\n  &lt;Button label=\"My Button\" /&gt;\n);\n\nReactDOM.render(&lt;App /&gt;, document.querySelector('#app'));</code></pre>"},{"location":"docs/getting-started/usage/#cdn","title":"CDN","text":"<p>React UI is also available on CDN:</p> Description URL CSS <code>https://cdn.jsdelivr.net/npm/@react-ui-org/react-ui@latest/dist/react-ui.css</code> JS <code>https://cdn.jsdelivr.net/npm/@react-ui-org/react-ui@latest/dist/react-ui.js</code> <p>\ud83d\udc49 Consider using a specific version instead of <code>latest</code> in production.</p>"},{"location":"helpers/classNames/","title":"classNames","text":"<p>The <code>classNames</code> helper function simplifies creating a string passable to the <code>class</code> / <code>className</code> attribute.</p> <p>It accepts multiple arguments, filters out invalid values, and returns a single string where the remaining parameters are joined by a space.</p>"},{"location":"helpers/classNames/#usage","title":"Usage","text":"<p>To use <code>classNames</code> helper, you need to import it first:</p> <pre><code>import { classNames } from '@react-ui-org/react-ui';</code></pre> <p>And use it:</p> <pre><code>&lt;&gt;\n  &lt;div\n  className={classNames(\n    'd-block',\n    new Date('2025-01-01T00:00:00') &lt; new Date() &amp;&amp; 'text-danger',\n  )}\n  &gt;\n  {(new Date()).toLocaleDateString()}\n  &lt;/div&gt;\n  &lt;div\n  className={classNames(\n    'd-block',\n    new Date('3000-01-01T00:00:00') &lt; new Date() &amp;&amp; 'text-danger',\n  )}\n  &gt;\n  {(new Date()).toLocaleDateString()}\n  &lt;/div&gt;\n&lt;/&gt;</code></pre>"},{"location":"helpers/classNames/#parameter-filtering","title":"Parameter Filtering","text":"<p>The <code>classNames</code> function:</p> <ul> <li>filters out all values that are not strings</li> <li>filters out empty strings</li> <li>filters out whitespace only strings</li> </ul> <pre><code>{classNames(\n  'class-1',\n  'class-2 class-3',\n  ' ',\n  '\u00a0', // non-breakable space\n  ' ', // tab\n  '',\n  0,\n  1,\n  null,\n  undefined,\n  true,\n  false,\n)}</code></pre>"},{"location":"helpers/isChildrenEmpty/","title":"isChildrenEmpty","text":"<p>The <code>isChildrenEmpty</code> helper function determines whether the given children value should be considered \"empty\".</p> <p>It is useful in React when conditionally rendering components based on whether children contain meaningful content.</p>"},{"location":"helpers/isChildrenEmpty/#usage","title":"Usage","text":"<p>To use <code>isChildrenEmpty</code> helper, you need to import it first:</p> <pre><code>import { isChildrenEmpty } from '@react-ui-org/react-ui';</code></pre> <p>Then use it:</p> <pre><code>\nReact.createElement(() =&gt; {\n  const children = null;\n  const isEmpty = isChildrenEmpty(children);\n\n  if (isEmpty === false) {\n    return (\n      &lt;div&gt;{children}&lt;/div&gt;\n    );\n  }\n\n  return (\n    &lt;div&gt;Children not provided&lt;/div&gt;\n  );\n});</code></pre> <pre><code>React.createElement(() =&gt; {\n  const children = (\n    &lt;&gt;\n      &lt;h1&gt;Title&lt;/h1&gt;\n      &lt;p&gt;Content&lt;/p&gt;\n    &lt;/&gt;\n  );\n  const isEmpty = isChildrenEmpty(children);\n\n  if (isEmpty === false) {\n    return (\n      &lt;div&gt;{children}&lt;/div&gt;\n    );\n  }\n\n  return (\n    &lt;div&gt;Children not provided&lt;/div&gt;\n  );\n});</code></pre>"},{"location":"helpers/transferProps/","title":"transferProps","text":"<p>The <code>transferProps</code> helper controls passing of props from the React component to the HTML element.</p> <p>It enables making the component interactive and helps to improve its accessibility. However some props should never be passed to the HTML element as it would break things. This function is used to filter them out. Among these props are:</p> <ul> <li><code>children</code></li> <li><code>className</code></li> <li><code>contentEditable</code></li> <li><code>dangerouslySetInnerHtml</code></li> <li><code>ref</code></li> <li><code>staticContext</code></li> <li><code>style</code></li> <li><code>suppressContentEditableWarning</code></li> </ul> <p>\ud83d\udc49 When run in development mode, the function will log the error to the console if any invalid props are passed.</p>"},{"location":"helpers/transferProps/#basic-usage","title":"Basic Usage","text":"<p>To use <code>transferProps</code> helper, you need to import it first:</p> <pre><code>import { transferProps } from \"@react-ui-org/react-ui\";</code></pre> <p>And use it:</p> <pre><code>const CustomComponent = ({\n  children,\n  id,\n  ...restProps\n}) =&gt; (\n  &lt;div\n    {...transferProps(restProps)}\n    id={id &amp;&amp; `${id}__customComponent`}\n  &gt;\n    {children}\n  &lt;/div&gt;\n);</code></pre>"}]}